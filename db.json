{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/leancloud.memo","path":"leancloud.memo","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/affix.js","path":"js/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/exturl.js","path":"js/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/js.cookie.js","path":"js/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/post-details.js","path":"js/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/scroll-cookie.js","path":"js/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/scrollspy.js","path":"js/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/uploads/website.png","path":"uploads/website.png","modified":1,"renderable":1},{"_id":"themes/next/source/uploads/head.png","path":"uploads/head.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/uploads/loginbackroup1.jpg","path":"uploads/loginbackroup1.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"source/leancloud.memo","hash":"a185699621ce7dbe3a6846cdb194de9afae913ae","modified":1554886270113},{"_id":"themes/next/.all-contributorsrc","hash":"d139a3b623b2e40bbff5c96ad44adf7dbdbc5be1","modified":1554116381000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1554116381000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1554116381000},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1554116381000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1554116381000},{"_id":"themes/next/.gitignore","hash":"3558a8b174618c7a643aceb13233edd729813f9a","modified":1554116381000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1554116381000},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1554116381000},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1554116381000},{"_id":"themes/next/README.md","hash":"7958c3f70b2133b479ddaf525cc4b6d87a37e04a","modified":1554116381000},{"_id":"themes/next/_config.yml","hash":"56fc181e7897d4733d48cbf8480070d76a6c007d","modified":1554963194725},{"_id":"themes/next/bower.json","hash":"8fa4f26f5205cbc64d33318d1be5d35b2667398c","modified":1554116381000},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1554116381000},{"_id":"themes/next/gulpfile.coffee","hash":"23bd9587807edc4dbecb5c5a29ab96ade24458b5","modified":1554116381000},{"_id":"themes/next/package.json","hash":"888bcacea284ec536a1428ad957a78dfb3ec255d","modified":1554116381000},{"_id":"source/404/index.md","hash":"b9f0e96d7c5ffee10b3b6404debb5c301b4b9fb5","modified":1554956591303},{"_id":"source/_posts/hello-world.md","hash":"029f91fccbe8f87c0f3ea10c4042300d2fa7edc0","modified":1554875376680},{"_id":"source/_posts/java并发.md","hash":"ce43c7cb8f54e9db0c63705ff6bae11e6bd31e01","modified":1554946659471},{"_id":"source/categories/index.md","hash":"366346c0eb8fdf344795c3c22aa085c69339b115","modified":1554946609337},{"_id":"source/tags/index.md","hash":"8575512f0ce5bd0ee1b3603ca5475848eb3f8465","modified":1554946508111},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"c149f003d03501565e7688915cd8f2e99fbf8f42","modified":1554116381000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"285a95aca36e0ac770bcde2b35e3b572d45d1518","modified":1554116381000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1554116381000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"492b2c159d871e5b5d4c70d259f36e603afe192d","modified":1554116381000},{"_id":"themes/next/.github/auto_assign.yml","hash":"031f221ee245be2786d55e82fdd677cf957a4ae9","modified":1554116381000},{"_id":"themes/next/.github/config.yml","hash":"8a5cbf5aa9529390fe0a782758aca9c3a02f9dcf","modified":1554116381000},{"_id":"themes/next/.github/eslint-disable-bot.yml","hash":"16541fb7b80f5ab90135db96285badb63c4d7d3e","modified":1554116381000},{"_id":"themes/next/.github/lock.yml","hash":"585d2c471047be320aa62f2b74dad797bf09c530","modified":1554116381000},{"_id":"themes/next/.github/mergeable.yml","hash":"db99f12b64dd37de61e83cbcdd4897c05d625507","modified":1554116381000},{"_id":"themes/next/.github/release-drafter.yml","hash":"ae7ab1405ba19b5715af1b030358baa5b5994c8d","modified":1554116381000},{"_id":"themes/next/.github/stale.yml","hash":"41bf97ee86b8940a0b2e754499ec77fd2b44b717","modified":1554116381000},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1554116381000},{"_id":"themes/next/.github/topissuebot.yml","hash":"10665bf2b5aba351725715c71e94ad183a0e8f18","modified":1554116381000},{"_id":"themes/next/.github/weekly-digest.yml","hash":"404e4ccb7fcd6587bc9b0247a7a7ff256d21f2cb","modified":1554116381000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1554116381000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"0d2f22ea09dd1ef63c66164e048d8239d2ccb2b8","modified":1554116381000},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1554116381000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1554116381000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1554116381000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"212a36d57495990b5f56e46ca8dce1d76c199660","modified":1554116381000},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1554116381000},{"_id":"themes/next/docs/MATH.md","hash":"e6023505dcccaef0b856102543585a13fc6af0b1","modified":1554116381000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1554116381000},{"_id":"themes/next/languages/de.yml","hash":"9e524b2bdfb848504b93a51c5650e76bba5fa9e0","modified":1554116381000},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1554116381000},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1554116381000},{"_id":"themes/next/languages/fr.yml","hash":"d37a5d82b499a2f082fe9bbf3ad9f11b36b6b837","modified":1554116381000},{"_id":"themes/next/languages/id.yml","hash":"1c4868837f5109f1df863b04fe627352c31d404b","modified":1554116381000},{"_id":"themes/next/languages/ja.yml","hash":"1dc35e436da6214cdb3c2ff44bc4a06d0be5b9a0","modified":1554116381000},{"_id":"themes/next/languages/it.yml","hash":"b30ff77ad8044e3b021a3b09187cd377dc789fd2","modified":1554116381000},{"_id":"themes/next/languages/ko.yml","hash":"20bfaa7600d35235996c18e5c13dcef89c119626","modified":1554116381000},{"_id":"themes/next/languages/nl.yml","hash":"1c44b3cb2f817808607f3bf6ef47f58ce7599995","modified":1554116381000},{"_id":"themes/next/languages/pt-BR.yml","hash":"08b913a5cf4cc160083069cb4dfb2d66eecd1218","modified":1554116381000},{"_id":"themes/next/languages/pt.yml","hash":"8ddac820e2c17b484b56c0da8881e142b10e221b","modified":1554116381000},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1554116381000},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1554116381000},{"_id":"themes/next/languages/uk.yml","hash":"1eb59e581568da9a81d6e20541b4ada5fc1c55c0","modified":1554116381000},{"_id":"themes/next/languages/vi.yml","hash":"ba7aff8f88e03f69a0acf7f1b90ee03e077ee88e","modified":1554116381000},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1554116381000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1554877715461},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1554116381000},{"_id":"themes/next/layout/_layout.swig","hash":"74701fcf2303d59400587436ab4c244e04df7ad9","modified":1554116381000},{"_id":"themes/next/layout/archive.swig","hash":"7e8f3a41a68e912f2b2aaba905d314306ccaf794","modified":1554116381000},{"_id":"themes/next/layout/category.swig","hash":"dda0e6b2139decaf5e865d22ec9d45fdb615a703","modified":1554116381000},{"_id":"themes/next/layout/index.swig","hash":"c2a3896c64e96790edc10426ef586b6186a87f46","modified":1554116381000},{"_id":"themes/next/layout/page.swig","hash":"d8a6cbf6f611c5d68d5da430cb6dc7010ff2c7e0","modified":1554116381000},{"_id":"themes/next/layout/post.swig","hash":"f74929fd792541916eb25c2addfb35431be071ba","modified":1554116381000},{"_id":"themes/next/layout/schedule.swig","hash":"3268dd3d90d8b0e142cfa1a2ebb23355baeda148","modified":1554116381000},{"_id":"themes/next/layout/tag.swig","hash":"a6be69a90924c9d2f4d90fb4867234859bd2c2e9","modified":1554116381000},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1554116381000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1554116381000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1554116381000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1554116381000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1554116381000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554116381000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c37a60580c901c79ccb22564b228a46e06207445","modified":1554116381000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"57e1e06e845193e80c7df4a4454af28352526f7a","modified":1554116381000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"07c423cce4157b8e2dbf60907ccbf3f18c4cf98a","modified":1554116381000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/non-english.md","hash":"0b0727ff4d5180ae67f930fb4f8e9488e33eda9f","modified":1554116381000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1554116381000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1554116381000},{"_id":"themes/next/docs/ru/README.md","hash":"4d7ef717d0b57288e606996ee56c20ffd59d5a99","modified":1554116381000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1554116381000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"caa624092175d44e3d3a8c6ca23922718da2354c","modified":1554116381000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"b218e30df4126b6adc87684775ac4c86ea7f7958","modified":1554116381000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"bc43beb3af74d64fbd3920539d08861e4cadb9a0","modified":1554116381000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1554116381000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1554116381000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"115ffbde2b3ce01ef1f8c2b3833e6f6794650132","modified":1554116381000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b76ccbc658024e86639cfa5f8a3817647fc8d651","modified":1554116381000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"1b5bd6ae5781137d81dc8667e912d3df6eeab260","modified":1554116381000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1554116381000},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1554116381000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1554116381000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1554116381000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"89b0a0e64637bf5b0cfea0a23642df3d95eedfa4","modified":1554116381000},{"_id":"themes/next/layout/_macro/post.swig","hash":"10187fafe566b3e5bfa4e7e10c77ea9026d9081d","modified":1554116381000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"480d93619479dcfcbec6906803bb38b2dfbeae53","modified":1554116381000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5352f96f4544c1520babf1cec7b44ddf2f8057b3","modified":1554116381000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"07f88421bda86d9d5ff32d130b1cb1196b99a326","modified":1554116381000},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"6357537ac0bb114aed4d61bafb39e6690a413697","modified":1554116381000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1554116381000},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"06dac109504812b63766a80ede9ddacbd42d227d","modified":1554116381000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"50be1762f60222379a8bef5e42ab1a0f3872b7ff","modified":1554116381000},{"_id":"themes/next/layout/_scripts/exturl.swig","hash":"61ae10d41f67ece004a025077fdb28724af05090","modified":1554116381000},{"_id":"themes/next/layout/_scripts/next-boot.swig","hash":"012e3ece672cc3b13d5e032139f328d3426d7d65","modified":1554116381000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"edaff4766e0c05fd5c889d9dd32884d376bef9d9","modified":1554116381000},{"_id":"themes/next/layout/_scripts/scroll-cookie.swig","hash":"ccd13d73429ef91ef5e8b7d9fa43c8188facdf41","modified":1554116381000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"83470eb401f78f4683907c48ad6760b90730daa3","modified":1554116381000},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"4ccf2abbfd070874265b0436a3eff21f7c998dfb","modified":1554116381000},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"10b61a8bac671e375916a4d234c120117098a78f","modified":1554116381000},{"_id":"themes/next/layout/_third-party/chatra.swig","hash":"eefb68b69b4b0ed558ee0324ccd711990059b20d","modified":1554116381000},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"01ded5e1bad89a6f8d64cd063e3e4e42c20d33bc","modified":1554116381000},{"_id":"themes/next/layout/_third-party/mermaid.swig","hash":"d6e6ddda836bd9e2e8d9767a910c7d3280080e81","modified":1554116381000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"2c4a66be4677d3e4dec3f169ac8a769098dad1fe","modified":1554116381000},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"c28f9dc96ab735daeb7f599f86470aa5a83c03cf","modified":1554116381000},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"810a9b2a6059f46c4a2ddb178f1eaa4c5e23750b","modified":1554116381000},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5db80e8d7ea3f29e998320f79508f7e14342a33c","modified":1554116381000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"cbe40cb67dad15ade967b0f396c1a95b6871f76a","modified":1554116381000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"2398e5cd0cb466953b6e7a42c2b2caddebf3c348","modified":1554116381000},{"_id":"themes/next/layout/_third-party/tidio.swig","hash":"912368c41de675f458b267a49a99ae3e7e420ebb","modified":1554116381000},{"_id":"themes/next/scripts/filters/exturl.js","hash":"79ad823ca803cb00e0bfc648aa6c9d59711e0519","modified":1554116381000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"60eb1554456d9d0e5afc4a2d16f1580a0aa02da8","modified":1554116381000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"799a042bbf497a4c7a2981aa2014ff28fa1bb382","modified":1554116381000},{"_id":"themes/next/scripts/tags/button.js","hash":"f3b4f7ae7e58072bbf410d950a99a0b53cbc866d","modified":1554116381000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1554116381000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"d605918cf819887e9555212dbe12da97fd887a0b","modified":1554116381000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"fcb41c1c81560ed49dc4024654388a28ee7d32b0","modified":1554116381000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"598220fa92ff3540dcab74f633ba41523daa8364","modified":1554116381000},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1554116381000},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1554116381000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1554116381000},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1554116381000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1554116381000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1554116381000},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1554116381000},{"_id":"themes/next/source/css/main.styl","hash":"e010ec8ac73268a0f137204c89e0080ab8d59b3d","modified":1554116381000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1554116381000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1554116381000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1554116381000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1554116381000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1554116381000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1554116381000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1554116381000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1554116381000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1554116381000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1554116381000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1554116381000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1554116381000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1554116381000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1554116381000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1554116381000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1554116381000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1554116381000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1554116381000},{"_id":"themes/next/source/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1554116381000},{"_id":"themes/next/source/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1554116381000},{"_id":"themes/next/source/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1554116381000},{"_id":"themes/next/source/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1554116381000},{"_id":"themes/next/source/js/motion.js","hash":"a16bc0b701646bf6653484675f4d5dc0f892d184","modified":1554116381000},{"_id":"themes/next/source/js/next-boot.js","hash":"e0615efab5f81ba0fd39c0527eac31144deac7ce","modified":1554116381000},{"_id":"themes/next/source/js/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1554116381000},{"_id":"themes/next/source/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1554116381000},{"_id":"themes/next/source/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1554116381000},{"_id":"themes/next/source/js/utils.js","hash":"703375f367acfbd0596733c34437d1b2681abf72","modified":1554116381000},{"_id":"themes/next/source/uploads/website.png","hash":"05cca578d120b5df5c3e6f45b1c0745700d32417","modified":1554964240666},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554116381000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554116381000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554116381000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554116381000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554116381000},{"_id":"themes/next/source/uploads/head.png","hash":"5686771eba240dcb4e7d24553f8f6a5d15d91a08","modified":1554964158036},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"fb33f499022cd02722f834fcef1a0e193362cfde","modified":1554116381000},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1554116381000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"fc6bafc8c633afadc538c5afa5620ea2a1cdcb84","modified":1554116381000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"36eae78a4d7160a1c5e59ca3f7333f00b43d359b","modified":1554116381000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"02bb5748e8540b024e7f4008a9e640890b45280f","modified":1554116381000},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"648bf7eda66629592cb915c4004534b3913cbc22","modified":1554116381000},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1554116381000},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"71af31fea5913fd30c233e555ef13cf2c9768f72","modified":1554116381000},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"5adc60100e129c1d0307bdcaa0c7b8e8375a6ea4","modified":1554116381000},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"0fa4fadb39467b01cede49f21b22e86b1a2da805","modified":1554116381000},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"2940df694fff28e8bf71b6546b4162f1e38227db","modified":1554116381000},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"3615db591dd910fb9fa96542734c7ec0ef05019c","modified":1554116381000},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"eea95b785c9c36d28e1839619793f66e89773bee","modified":1554116381000},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"d44f025eb93c99ddf90202d8293ccf80689a00c7","modified":1554116381000},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"ef11b5be5bfb2f0affe82cf521c002b37fef9819","modified":1554116381000},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1554116381000},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"7d1693416a5dc098f4723a53da2e2d1fc2d6e075","modified":1554116381000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1554116381000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a5587bd1f60d35e58618576cec45e662aa44ea1f","modified":1554116381000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"15b542f5b06b7532234af367340b9ed9fcebb0ac","modified":1554116381000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"6f181cc188ecbe5e607fd989756e470d4cb9765d","modified":1554116381000},{"_id":"themes/next/layout/_partials/share/likely.swig","hash":"b45e934d24d76ec6b6a790e92bdb3d56186b0e2a","modified":1554116381000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"5b05f165547391bf231e52f56f3d925efc09bc44","modified":1554116381000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ffc8e8836714ea79abeb77b75859634615652877","modified":1554116381000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"108b157fbd1ac3baaf19ae87234fa8728ab79556","modified":1554116381000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0097e45e7b671f8006b8b2d3c4f95cacc76a983c","modified":1554116381000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"e42604fbb17648484e5f12afe230d826de089388","modified":1554116381000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"a5723950c343d220270bfd27bd30050eda6c3fb3","modified":1554116381000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"798d67e4a736613ab899eabe6529091bbcda7850","modified":1554116381000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"591b2ccd9713ccb922b9fcf5e278b6de9c5ec30b","modified":1554116381000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"8eadb929c9e50e58502ccad2dc2657746f8c592a","modified":1554116381000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"08cd47ef8572121b7811342d3c9a84a338a18191","modified":1554116381000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"050ea01f25cfe492be9bb77b409644d623fdf2dc","modified":1554116381000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"fae69a0e1a1d42f7bb44e594a29857d94594698b","modified":1554116381000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"d422beaf35a5d2646feaa098bc3e5adf691c7565","modified":1554116381000},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"4a966b7ffe2d80ff1b3dd0fd14b355766dc5c70f","modified":1554116381000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"438c6f5e6665d72f4ea7ee206011d669246f6102","modified":1554116381000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"c754f699c90f6278b9159eff1855c17bc713ee96","modified":1554116381000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"f240a50cd9b627620d9a374a29cf95f0c5e99d7c","modified":1554116381000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"92e04a2b9e0c3df594bc22235d1894e5ad458dfc","modified":1554116381000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"0dd5b315d1da55dbfc10f51a1f8952f72eba2720","modified":1554116381000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"3533167c4295637b91d90f3bae7c651cd128bb6e","modified":1554116381000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"3cfeafefc672d9a7704650ebfb2f9d8668b38d9a","modified":1554116381000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"c77a2e7ef5f449a445fb4d36b055721fba4a81af","modified":1554116381000},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"e8f91c571ceb4b80aafebc4d36b89fb41b1ae040","modified":1554116381000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"388efc86af7f19c05ad0e26720cd24ee012d20b9","modified":1554116381000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"2cbaae65a020bbb0e9265364488aff8bf84fa48d","modified":1554116381000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"5856d5f701e51dfae1fd6fb486cefde67effd555","modified":1554116381000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4a908b613518878b9b69576c5dba4a5185f552ab","modified":1554116381000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a7e304b05a44279d3e4f611908d7faef9dc14d7c","modified":1554116381000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"c2cb2f384bc30d31cdccf9794a729c03e687b45c","modified":1554116381000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"601774d8672577aefbcefac82c94b01f0338da31","modified":1554116381000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b3eaab6a269aa3fcbafe24fd06f0c9206dc12716","modified":1554116381000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"ea94aa85034c6d1b6bb865aecea55c73f8a14501","modified":1554116381000},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"0a13dfd2de52a96901039098c6fc7b515edfc50b","modified":1554116381000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"2edc48d1c1fa2d468cb510b9d2c2914c322d299a","modified":1554959985012},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1554116381000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2e8fb29aa92325df39054b5450757858c6cebc41","modified":1554116381000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"bb744c9264e8e79ae96431a5463f65fe8de5828a","modified":1554116381000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"a8aa41625b94cf17a7f473ed10dcbe683b1db705","modified":1554116381000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1554116381000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"fc15e277d1504532a09b7b1bd31f900ad95ec4b8","modified":1554116381000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d0e97b205d3320421c380f2eee445457430c8152","modified":1554116381000},{"_id":"themes/next/source/js/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1554116381000},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1554116381000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1554116381000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1554116381000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1554116381000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1554116381000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1554116381000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1554116381000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1554116381000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1554116381000},{"_id":"themes/next/source/uploads/loginbackroup1.jpg","hash":"0b7b170964f3a36d5b854d0b7396668d45eee7a3","modified":1554964039956},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"7729491514f8ccdf96777de8f71420e6873c5423","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"8175b9a275d04718f6caf6dc6ae483035ad71b0c","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"b98c65006e2546fbf3870c16fbbcbc009dbaab15","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"9d71f34fa13a41b8c8cd2fbdf3fdea608385277c","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"ce826aedf42b9eca424a044452f5d193866726a6","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"ce2aae8f3ed8ceac3a2417e0481044cf69c788aa","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/scrollbar.styl","hash":"d7b8bcf2a6031296c84bb4f4ecfb037af01d2d82","modified":1554116381000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7e51ea64611ab5d678c112b4688d4db4fd2737e2","modified":1554116381000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"8e0740a9ad349ce5555122325da872923135a698","modified":1554116381000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"6d900b4159eeb869196a619602578bf4d83a117b","modified":1554116381000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"bb9b753d3cc3a816340bd697512a83e757f907fb","modified":1554116381000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"7ffde343bdf10add1f052f3c4308a15180eb4404","modified":1554116381000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"6b3340cf57725b312830b9ce377c9e087ba59297","modified":1554116381000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1554116381000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"9a2d298dbdcbfd758518fd74b63897bc80ce15a5","modified":1554116381000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1554116381000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"24230e46fc9fb7b8551f97bb36e9bc1f7423098e","modified":1554116381000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1554116381000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"75d2d92af070eb10273558b2436972d3f12b361c","modified":1554116381000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fa33213aceed7bf4bf25437ca9c1a00f7734ae65","modified":1554116381000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1554116381000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a96e46a6ae86c423f932bc2bc78b9f7453e4e4e5","modified":1554116381000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6565b4a309325596768d0d32e022c80ef23066cb","modified":1554116381000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"fc160583f742c94316a0fee05c18468033173534","modified":1554116381000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"1edf4e69d0ec0dc9cefed6c35d3e803e0da4093d","modified":1554116381000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1554116381000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1554116381000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"57044a6d19eb418c1c3d28787e82c69efa9e0ca6","modified":1554116381000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"75737591682a2bafa71db4c03fb79e970ac0e7aa","modified":1554116381000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"b6dac5bbf20f090cf4b67d156f030d7170dfb39c","modified":1554116381000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"6400c98a9fd2b9a8502269f33355bd7ab3ff793b","modified":1554116381000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b5b936dddb7b4de4720cd1e8428b30a2f06d63fb","modified":1554116381000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"232aedbd44243b3b80c4503c947060d3269c1afc","modified":1554116381000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1554116381000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1554116381000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1554116381000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1554116381000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1554116381000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"6c4990d375b640ee4551e62c48c1cbe4c3d62212","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"a410ed529afd46ddf4a96ecf0de6599488716887","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ca97f0b6990eef947039faede80c56d9c4381ee1","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"cc6ee18f47f2e1e06df6fa0eadb37079e580fd11","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"c0d9e18a9210fdcaf33e488518b3b288eb58c0a1","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4cfeec9434a72d5efc6ca225d3445d084d4590f7","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"71d8d1cc22a2a7627a6db7240f0c4902a14f9bea","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"e9dd8de7d98f1478ac7d351624fffd3d8738c905","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"6904fd7ea6455e008d9884558b68254608af9a3c","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"2d142c6f39853916256ad8fc79eb6b85f4001ae8","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f1d52954b9a5d1ca8e224382349f525e598dd923","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"80addb9b725e329915c05c27b9fadaf56457a9b3","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"61ca40856e5cacd48e0fa9728fde4605c7dd4c94","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"6a75bb1f2435f4e895cbbb5abbddf6e8f7257804","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"2356226157e8068b0e9bbe2f7d0f74e1ab49199b","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"c961d37190d9bec58a36306c7e716c4e72c4582f","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"1385862a5c0bd845015d165aadbd1a6add7b72d7","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0bf899fab331add63f0c8ead31ca3a3db2ad74d9","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b082d07b13a3d55b4c032fd351dfa9a4fd74edec","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"3f33bb862c2aa993f54987fbb345da067b79b112","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"496f931e3a7e313ba8088fb91bb20789cace72c9","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"5440013a081201ca791582db98159dce93ea9e75","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"8e058c99dd7d41f0bd34c7c28b6ac9fbb17dcb5e","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"d5c8ffed7f2c701052b7a53abaf5ef437374ea72","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"a6c24393dffbdd94dd5c01cdbec5e180b0bfbbbd","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a3170630d8e085889a4bdc20eb7f09c5a0479c47","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"9224b566cd2632f64c1a964e2c786cee93b93286","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"707527c9950a7459355c8abcf4751c0964de0bc1","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"cc83816614f21c7e1d8d3f867d547ff7c658cec4","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"517d541a80d59ad99a3f648be74891e0c7bc72a8","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"c2d9c3b6fbfa65544e6b5a55d3cb2149df04a8a9","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"9a3bfc878ca797946815bed23cd6f92b24a16358","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"8a24b56524a388fbabd408ffc8ba9b56eb9e01ce","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"e425433b81da2714d6fa17c138e1fa750ad810ec","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"8e5c884fb950937afa350c608545455c87aa6129","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"967fb3a3c6c851b34ec5df2d945dc266ed63d146","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"58ec00eebe68d0eebd2eea435c710063877447df","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"d7501ae01fc45fa15b00d1bc5233b9fffa20a3c9","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"21b32840d8b3a14b10770153114778304ba6d1b0","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/tags/pdf.styl","hash":"da8d34729fb6eb0fcb8ee81e67d2be3c02bc1bc4","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"fcda60fecff1479adaf6521cf629cda2506337a8","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"cbc0be5a3285b469858ec9ead48e2ea90bd47ae1","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fc58498d4f5081fcf6218e9e18c5bf2328275bef","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/third-party/copy-code.styl","hash":"688ca3eccc26727d050ad098b32b40934719588a","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"ac7753d536341aa824d7bce0332735e838916995","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"7059e24235b7c57a07f3f8abaa06b0bd6a7eda2f","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"9fac89c8146eb2675721a26f528d7d0f8be7debe","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"f1d9ee1f86a179741f2478f8c70ca11ab578810e","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"61466e3e5459960b5802a267751a0c8018918b0b","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"3ae3f3c276d444862033fd3434c632ad0d2f84e6","modified":1554116381000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"03c4fa9573fddd930552784cf484fd2ee7825323","modified":1554116381000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1554116381000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1554116381000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1554116381000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1554116381000},{"_id":"public/search.xml","hash":"a82bfe42632eccaf807092c598b24aa5382f4b7d","modified":1554964286119},{"_id":"public/leancloud_counter_security_urls.json","hash":"9d956b012c0b815801ebca9a4c7671827743c8f2","modified":1554964286119},{"_id":"public/404/index.html","hash":"122072697451156fd2f45e9f1af82d85208ed903","modified":1554964286176},{"_id":"public/categories/index.html","hash":"41455337b80f2c553fc2a1ad2d3813aa1ce736ec","modified":1554964286176},{"_id":"public/tags/index.html","hash":"9efceaf9e4d9efcfb05ee0facf08c1ec770b4281","modified":1554964286176},{"_id":"public/2019/04/10/java并发/index.html","hash":"45c525f7f6451dcc4e674bd89dffd7490d724055","modified":1554964286176},{"_id":"public/2019/04/10/hello-world/index.html","hash":"fc6b86b7c9707e636e6b35435a63e0f80d9104db","modified":1554964286176},{"_id":"public/archives/index.html","hash":"560e94a4236180634661b56a76d784924c6ec9d1","modified":1554964286177},{"_id":"public/archives/2019/index.html","hash":"7dc2dc9d31d487cec45b2d28f7d66f55ebdfae73","modified":1554964286177},{"_id":"public/archives/2019/04/index.html","hash":"3e7501a8c457550afc05c48772c67e76c293dbae","modified":1554964286177},{"_id":"public/categories/java/index.html","hash":"1c10d05cc589aeb793e3dfd596d16ac79fbc30fe","modified":1554964286177},{"_id":"public/index.html","hash":"6b30256b382dc0260d524e054309b306ebe48b77","modified":1554964286178},{"_id":"public/tags/java/index.html","hash":"41ddfd2d05dbe6554635edb84c753d93df4699e0","modified":1554964286178},{"_id":"public/tags/并发/index.html","hash":"bd13d6af3e861c38a1c648fb5233d6f100e7bae2","modified":1554964286178},{"_id":"public/uploads/website.png","hash":"05cca578d120b5df5c3e6f45b1c0745700d32417","modified":1554964286185},{"_id":"public/uploads/head.png","hash":"5686771eba240dcb4e7d24553f8f6a5d15d91a08","modified":1554964286185},{"_id":"public/uploads/loginbackroup1.jpg","hash":"0b7b170964f3a36d5b854d0b7396668d45eee7a3","modified":1554964286185}],"Category":[{"name":"java","_id":"cjuc90mcj0005v4uohom5esdg"}],"Data":[],"Page":[{"title":"404","date":"2019-04-11T04:22:08.000Z","_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2019-04-11 12:22:08\n---\n<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","updated":"2019-04-11T04:23:11.303Z","path":"404/index.html","comments":1,"layout":"page","_id":"cjuc90mc50001v4uoqipg5xgn","content":"<p>&lt;!DOCTYPE HTML&gt;</p>\n<html><br><head><meta name=\"generator\" content=\"Hexo 3.8.0\"><br>  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"><br>  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"><br>  <meta name=\"robots\" content=\"all\"><br>  <meta name=\"robots\" content=\"index,follow\"><br>  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\"><br></head><br><body><br>  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\"><br>  </script><br>  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script><br>  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script><br></body><br></html>","site":{"data":{}},"excerpt":"","more":"<p>&lt;!DOCTYPE HTML&gt;</p>\n<html><br><head><meta name=\"generator\" content=\"Hexo 3.8.0\"><br>  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"><br>  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"><br>  <meta name=\"robots\" content=\"all\"><br>  <meta name=\"robots\" content=\"index,follow\"><br>  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\"><br></head><br><body><br>  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\"><br>  </script><br>  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script><br>  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script><br></body><br></html>"},{"title":"分类","date":"2019-04-11T01:32:16.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2019-04-11 09:32:16\ntype: \"categories\"\n---\n","updated":"2019-04-11T01:36:49.337Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjuc90mca0003v4uox5kepy4d","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2019-04-11T01:33:29.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-04-11 09:33:29\ntype: \"tags\"\n---\n","updated":"2019-04-11T01:35:08.111Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjuc90mch0004v4uoz327fs1z","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2019-04-10T05:49:36.679Z","updated":"2019-04-10T05:49:36.680Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuc90mbv0000v4uozia6n090","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"java并发","date":"2019-04-10T06:46:46.000Z","type":"tags","_content":"\n# 一、线程状态的转换\n\n![线程转换](https://note.youdao.com/yws/api/personal/file/3782D564310F4EFD9D604DF102DD2897?method=download&shareKey=9986c9632ae622172333d92c9be73583)\n\n## 新建（New）\n\n创建后尚未运行。\n\n## 可运行（Runnable）\n\n可能正在运行，也可能正在等待CPU时间片。  \n包括操作系统线程状态中的Running和Ready。  \nRunning：线程获取CPU权限进行执行。\n\n## 阻塞（Blocking）\n\n等待获取一个排它锁，如果其线程释放了锁就会结束此状态。\n\n## 无限期等待（Waiting）\n\n等待其它线程显式地唤醒，否则不会被分配 CPU 时间片。\n|进入方法|退出方法|\n|---|---|\n|没有设置 Timeout 参数的 Object.wait() 方法|Object.notify() / Object.notifyAll()|\n|没有设置 Timeout 参数的 Thread.join() 方法|被调用的线程执行完毕|\n|LockSupport.park() 方法|LockSupport.unpark(Thread)|\n\n## 期限等待（Timed Waiting）\n\n无需等待其他线程显示地唤醒，在一定时间之后会被系统自动唤醒。\n\n调用 Thread.sleep() 方法使线程进入限期等待状态时，常常用“使一个线程睡眠”进行描述。\n\n调用 Object.wait() 方法使线程进入限期等待或者无限期等待时，常常用“挂起一个线程”进行描述。\n\n睡眠和挂起是用来描述行为，而阻塞和等待用来描述状态。\n\n阻塞和等待的区别在于，阻塞是被动的，它是在等待获取一个排它锁。而等待是主动的，通过调用 Thread.sleep() 和 Object.wait() 等方法进入。\n|进入方法|退出方法|\n|---|---|\n|Thread.sleep() 方法|时间结束|\n|设置了 Timeout 参数的 Object.wait() 方法|时间结束 / Object.notify() / Object.notifyAll()|\n|设置了 Timeout 参数的Thread.join() 方法|时间结束 / 被调用的线程执行完毕|\n|LockSupport.parkNanos() 方法|LockSupport.unpark(Thread)|\n|LockSupport.parkUntil() 方法|LockSupport.unpark(Thread)|\n\n## 死亡（Terminated）\n\n可以是线程结束任务之后自己结束，或者产生了异常而结束。\n\n# 二、使用线程\n\n三种使用线程的方式：\n\n* 实现Runnable接口；\n\n  ```java\n    // 执行\n    MyRunnable myRunnable = new MyRunnable();\n    Thread thread1 = new Thread(myRunnable);\n    thread1.start();\n  ```\n\n* 实现Callable接口（可以有返回值）；\n\n    ```java\n    public static class MyCallable implements Callable<Integer>{\n\n        @Override\n        public Integer call() throws Exception {\n            Integer i = 0;\n            while (i < 3){\n                Thread.sleep(1000);\n                i++;\n            }\n            return i;\n        }\n    }\n    // 执行\n    MyCallable myCallable = new MyCallable();\n    FutureTask<Integer> ft = new FutureTask<>(myCallable);\n    Thread thread2 = new Thread(ft);\n    thread2.start();\n    while (!ft.isDone()){\n        System.out.println(ft.get());\n    }\n    ```\n\n* 继承Thread类。\n\n实现Runnable和Callable接口的类不是真正意义上的线程，还需要通过Thread来调用。可以说任务是通过线程驱动从而执行的。\n\n## 实现接口 VS 继承Thread\n\n实现会更好一些，原因：\n\n* Java不支持多继承，继承Thread不能再去继承别的类，但是可以实现多个接口。\n* 类可能只要求可执行就行，继承整个Thread类开销过大。\n\n# 四、基础线程机制\n\n## Executor\n\n线程池，管理多个线程执行，而无需程序员显式地管理线程的生命周期。\n\n主要有三种Executor：\n\n* CachedThreadPool: 一个任务创建一个线程。\n* FixedThreadPool: 固定大小的线程池。\n* SingleThreadExecutor：相当于大小为 1 的 FixedThreadPool。\n\n```java\nExecutorService cachedThreadPool = Executors.newCachedThreadPool();\nfor (int i = 0; i < 5; i++) {\n    cachedThreadPool.execute(new MyRunnable());\n}\ncachedThreadPool.shutdown();\n```\n\n## Daemon\n\n守护线程是程序运行时在后台提供服务的线程，不属于程序中不可或缺的部分，比如垃圾回收线程。\n\n当所有的非守护线程结束时，程序也就结束了，同时也会杀死进程中的所有守护线程。\nmain() 属于非守护线程。\n\n通过使用Thread对象的setDeamon(true)方法将线程设置为守护线程，注意：\n\n1. thread.setDeamon(true)必须在thread.start()之前设置，否则会抛出IllegalThreadStateException异常。不可以将正在运行的线程设置为守护线程。\n2. 在Deamon线程中产生的线程也是Deamon的。\n3. 守护线程应该永远不去访问固有资源，如文件、数据库，因为它会在任何时候甚至在一个操作的中间发生中断。\n\n## sleep()\n\nThread.sleep(millisec) 方法会休眠当前正在执行的线程，millisec 单位为毫秒。\n\nsleep() 可能会抛出 InterruptedException，因为异常不能跨线程传播回 main() 中，因此必须在本地进行处理。线程中抛出的其它异常也同样需要在本地进行处理。\n\n```java\npublic void run() {\n    try {\n        Thread.sleep(3000);\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n}\n```\n\n## yield()\n\n`Thread.yield();`译为线程让步，让当前线程从运行状态进入就绪状态，它会把CPU执行的时间让掉，让其他或者**自己**线程执行。\n\n# 四、线程的中断\n\n一个线程执行完毕之后会自动结束，如果在运行中发生异常也会提前结束。\n\n## 中断协议\n\n每个线程都有一个与线程是否已中断的相关联的Boolean属性，用于表示线程的中断状态（interrupted status）。中断状态初始时为false；当一个线程A通过调用threadB.interrupt()中断线程B时，会出现以下两种情况之一:\n\n* 如果那个线程B在执行一个低级可中断阻塞方法，例如 Thread.sleep()、 Thread.join() 或 Object.wait()，那么它将取消阻塞并抛出 InterruptedException。但是不能中断 I/O 阻塞和 synchronized 锁阻塞。\n* 否则，interrupt()只是设置线程B的中断状态。 在被中断线程B中运行的代码以后可以轮询中断状态，看看它是否被请求停止正在做的事情。中断状态可以通过 Thread.isInterrupted() 来读取，并且可以通过一个名为 Thread.interrupted() 的操作读取和清除。\n\n## interrupt()\n\n发送中断信号\n对于以下代码，在 main() 中启动一个线程之后再中断它，由于线程中调用了 Thread.sleep() 方法，因此会抛出一个 InterruptedException，从而提前结束线程，不执行之后的语句。\n\n```java\npublic static void main(String[] args) {\n    Thread thread = new Thread(){\n        @Override\n        public void run() {\n            try {\n                Thread.sleep(2000);\n                System.out.println(\"Thread run\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    };\n    thread.start();\n    thread.interrupt();\n}\n/*输出\n//java.lang.InterruptedException: sleep interrupted\nat java.lang.Thread.sleep(Native Method)\nat com.wkk.demo.javaconcurrent.InterruptTest$1.run(InterruptTest.java:15)\n*/\n```\n\n## interrupted()\n\n获取线程是否已经中断。在线程中可以通过循环判断是否发出中断信号，决定当前线程是否停止。\n\n## Executor的中断操作\n\n调用Executor的shutdown()方法会等待线程都执行完毕之后再关闭，但是调用shutdownNow()方法，相当于调用了每个线程的interrupt()方法。\n\n只想中断一个线程，可以通过使用submit()方法提交一个线程，它会返回一个 Future<?> 对象，通过调用该对象的 cancel(true) 方法就可以中断线程。\n\n```java\nFuture<?> future = executorService.submit(() -> {\n    // ..\n});\nfuture.cancel(true);\n```\n\n### Future简介\n\nFuture接口用于获取异步计算的结果，可通过get()获取结果、cancel()取消、isDone()判断是否完成等操作。[源码参考](https://blog.csdn.net/codershamo/article/details/51901057)\n方法：\n\n* V get()： 获取结果，若无结果会阻塞至异步计算完成\n* V get(long timeOut, TimeUnit unit)：获取结果，超时返回null\n* boolean isDone()：执行结束（完成/取消/异常）返回true\n* boolean isCancelled()：任务完成前被取消返回true\n* boolean cancel(boolean mayInterruptRunning)：取消任务，未开始或已完成返回false，参数表示是否中断执行中的线程\n\n当cancel()方法参数为false时，只能取消还没有开始的任务，若任务已经开始了，就任由其运行下去\n当创建了Future实例，任务可能有以下三种状态：\n\n* 等待状态。此时调用cancel()方法不管传入true还是false都会标记为取消，任务依然保存在任务队列中，但当轮到此任务运行时会直接跳过。\n* 完成状态。此时cancel()不会起任何作用，因为任务已经完成了。\n* 运行中。此时传入true会中断正在执行的任务，传入false则不会中断。\n  \n### CAS和Unsafe类\n\n[参考](https://blog.csdn.net/javazejian/article/details/72772470)\n\n# 五、互斥同步\n\nJava提供了两种锁机制来控制对共享资源的互斥访问，一个是JVM实现的synchronized，一个是JDK实现的ReentrantLock。\n\n## synchronized\n\n**1. 同步一个代码块**\n\n```java\npublic void test(){\n    //...\n    synchronized(this){\n        //...\n    }\n    //..\n}\n```\n\n只能实现同一对象对代码块的访问互斥。\n**2. 同步一个方法**\n**3. 同步一个类**\n\n```java\npublic void test(){\n    //...\n    synchronized(SynchronizedExample.class)){\n        //...\n    }\n    //...\n}\n```\n\n作用于整个类，也就是说两个线程调用同一个类的不同对象上的这种同步语句，也会进行同步。\n**4. 同步一个静态方法**\n\n```java\npublic synchronized void test(){\n    //...\n}\n```\n\n作用于整个类\n\n### 对象锁（monitor）机制\n\n执行同步代码块后首先要先执行monitorenter指令，退出的时候执行monitorexit指令。使用Synchronized进行同步，其关键就是必须要对对象的监视器monitor进行获取，当线程获取monitor后才能继续往下执行，否则就只能等待。而这个获取的过程是互斥的，即同一时刻只有一个线程能够获取到monitor。Synchronized先天具有重入性。每个对象拥有一个计数器，当线程获取该对象锁后，计数器就会加一，释放锁后就会将计数器减一。\n\n任意一个对象都拥有自己的监视器，当这个对象由同步块或者这个对象的同步方法调用时，执行方法的线程必须先获取该对象的监视器才能进入同步块和同步方法，如果没有获取到监视器的线程将会被阻塞在同步块和同步方法的入口处，进入到BLOCKED状态。\n![对象锁获取](https://note.youdao.com/yws/api/personal/file/72D215D872BC4B48BC9FB226862858EB?method=download&shareKey=11aaa546f8909b020c771afb5a860dd5)\n\n> 引申 [happens-before规则](https://juejin.im/post/5ae6d309518825673123fd0e#heading-3)\n\n### synchronized优化\n\nsynchronized最大的特征就是在同一时刻只有一个线程能够获得对象的监视器（monitor），从而进入到同步代码块或者同步方法之中，即表现为互斥性（排它性）。一次只能一个线程效率低下\n\n#### CAS操作\n\nCAS操作（又称为无锁操作）是一种乐观锁策略，它假设所有线程访问共享资源的时候不会出现冲突，既然不会出现冲突自然而然就不会阻塞其他线程的操作。通过使用compare and swap（比较交换），解决冲突。\n\nCAS比较交换的过程可以通俗的理解为CAS(V,O,N)，包含三个值分别为：V 内存地址存放的实际值；O 预期的值（旧值）；N 更新的新值。如果与O相同就表明没有更改，直接更新为N，如果如O不相等，更新失败。\n\nCAS的实现需要硬件指令集的支撑，在JDK1.5后虚拟机才可以使用处理器提供的CMPXCHG指令实现。\n\n> ABA问题：通过变量值加入版本号解决\n> [参考](https://juejin.im/post/5ae6dc04f265da0ba351d3ff#heading-5)\n\n## ReentrantLock\n\nReentrantLock 是 java.util.concurrent（J.U.C）包中的锁。支持重入性，表示能够对共享资源能够重复加锁，即当前线程获取该锁再次获取不会被阻塞。ReentrantLock还支持公平锁和非公平锁两种方式。\n\n### 1.主要方法\n\n* lock();  获得锁\n* lockInterruptibly();  获得锁，但优先响应中断\n* tryLock();    尝试获得锁，成功返回true,否则false，该方法不等待，立即返回\n* tryLock(long time,TimeUnit unit);   在给定时间内尝试获得锁\n* unlock();     释放锁\n\n### 2.重入性的实现原理\n\n要想支持重入性，就要解决两个问题：1. 在线程获取锁的时候，如果已经获取锁的线程是当前线程的话则直接再次获取成功；2. 由于锁会被获取n次，那么只有锁在被释放同样的n次之后，该锁才算是完全释放成功。\n\n以非公平锁为例，判断当前线程能否获得锁为例，核心方法为nonfairTryAcquire：\n\n```java\nfinal boolean nonfairTryAcquire(int acquires) {\n    final Thread current = Thread.currentThread();\n    int c = getState();\n    if (c == 0) {\n        if (compareAndSetState(0, acquires)) {\n            setExclusiveOwnerThread(current);\n            return true;\n        }\n    }\n    else if (current == getExclusiveOwnerThread()) {\n        int nextc = c + acquires;\n        if (nextc < 0) // overflow\n            throw new Error(\"Maximum lock count exceeded\");\n        setState(nextc);\n        return true;\n    }\n    return false;\n}\n```\n\n分析：如果当前没有线程占用，直接设置当前线程占用。存在线程占用并且占用线程为当前申请锁的线程时，同步状态加1（state+1），返回true。\n\n以非公平锁为例，释放锁，核心方法为tryRelease：\n\n```java\nprotected final boolean tryRelease(int releases) {\n    int c = getState() - releases;\n    if (Thread.currentThread() != getExclusiveOwnerThread())\n        throw new IllegalMonitorStateException();\n    boolean free = false;\n    if (c == 0) {\n        free = true;\n        setExclusiveOwnerThread(null);\n    }\n    setState(c);\n    return free;\n}\n```\n\n分析：重入锁的释放必须得等到同步状态为0时锁才算成功释放，否则锁仍未释放。如果锁被获取n次，释放了n-1次，该锁未完全释放返回false，只有被释放n次才算成功释放，返回true。\n\n### 3.公平锁与非公平锁\n\nReentrantLock支持两种锁：公平锁和非公平锁。何谓公平性，是针对获取锁而言的，如果一个锁是公平的，那么锁的获取顺序就应该符合请求上的绝对时间顺序，满足FIFO（先进先出）。\n\n```java\npublic ReentrantLock(boolean fair) {\n    sync = fair ? new FairSync() : new NonfairSync();\n}\n```\n\n公平锁的tryAcquire方法\n\n```java\nprotected final boolean tryAcquire(int acquires) {\n    final Thread current = Thread.currentThread();\n    int c = getState();\n    if (c == 0) {\n        if (!hasQueuedPredecessors() &&\n            compareAndSetState(0, acquires)) {\n            setExclusiveOwnerThread(current);\n            return true;\n        }\n    }\n    else if (current == getExclusiveOwnerThread()) {\n        int nextc = c + acquires;\n        if (nextc < 0)\n            throw new Error(\"Maximum lock count exceeded\");\n        setState(nextc);\n        return true;\n    }\n    return false;\n}\n```\n\n分析：逻辑与nonfairTryAcquire基本上一直，唯一的不同在于增加了hasQueuedPredecessors的逻辑判断，该方法是用来判断当前节点在同步队列中是否有前驱节点的判断，如果有前驱节点说明有线程比当前线程更早的请求资源，根据公平性，当前线程请求资源失败。如果当前节点没有前驱节点的话，再才有做后面的逻辑判断的必要性。公平锁每次都是从同步队列中的第一个节点获取到锁，而非公平性锁则不一定，有可能刚释放锁的线程能再次获取到锁。\n>比较\n\n* 公平锁每次获取锁为同步队列中的第一个节点，保证请求资源时间上的绝对顺序，而非公平锁不保证这一点，可能造成“饥饿”现象。\n* 公平锁为了保证时间上的绝对顺序，需要频繁的上下文切换，而非公平锁会降低一定的上下文切换，降低性能开销。因此，ReentrantLock默认选择的是非公平锁，则是为了减少一部分上下文切换，保证了系统更大的吞吐量。\n\n> [参考](https://blog.csdn.net/u011521203/article/details/80186741)；[源码阅读参考](https://www.cnblogs.com/zhimingyang/p/5702752.html)\n\n### 4.Condition\n\nLock 替代了 synchronized 方法和语句的使用，Condition（await、signal和signalAll） 替代了 Object（wait、notify 和 notifyAll） 监视器方法的使用。\n\n新建Condition对象，一个ReentrantLock可以绑定多个Condition对象\n\n```java\nCondition condition = lock.newCondition();\n```\n\n* Condition与Object中的wati,notify,notifyAll区别：\n\n    * Object中的这些方法是和同步锁捆绑使用的；而Condition是需要与互斥锁/共享锁捆绑使用的。\n\n    * Condition它更强大的地方在于：能够更加精细的控制多线程的休眠与唤醒。对于同一个锁，我们可以创建多个Condition，在不同的情况下使用不同的Condition。通过Condition，能明确的指定唤醒读线程。\n\n## synchronized与ReentrantLock的比较\n\n1. 锁的实现\n   synchronized是JVM实现的，ReentrantLock是JDK实现的。\n2. 性能\n   新版本 Java 对 synchronized 进行了很多优化，例如自旋锁（就是for循环）等，synchronized 与 ReentrantLock 大致相同。\n3. 等待可中断\n   当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，改为处理其他事情。ReentrantLock 可中断，而 synchronized 不行。\n4. 公平锁\n   synchronized 中的锁是非公平的，ReentrantLock 默认情况下也是非公平的，但是也可以是公平的。\n5. 锁绑定多个条件\n   一个 ReentrantLock 可以同时绑定多个 Condition 对象\n\n## 使用比较\n\n除非使用ReentrantLock的高级功能，否则优先使用synchronized。这是因为 synchronized 是 JVM 实现的一种锁机制，JVM 原生地支持它，而 ReentrantLock 不是所有的 JDK 版本都支持。并且使用 synchronized 不用担心没有释放锁而导致死锁问题，因为 JVM 会确保锁的释放。\n\n# 六、线程之间的协作\n\n多个线程执行任务时，某些线程必须在其他线程执行完成后才能执行，这时候就需要对线程进行协调。\n\n## join()方法\n\n在线程中调用另一个线程的join()方法,会将当前线程挂起，而不是忙等待，直到目标线程执行结束。\n\n## wait(),notify(),notifyAll()\n\n调用 wait() 使得线程等待某个条件满足，线程在等待时会被挂起，当其他线程的运行使得这个条件满足时，其它线程会调用 notify() 或者 notifyAll() 来唤醒挂起的线程。\n\n它们都属于 Object 的一部分，而不属于 Thread。只能用在同步方法或者同步控制块中使用，否则会在运行时抛出 IllegalMonitorStateException。\n\n使用 wait() 挂起期间，线程会释放锁。这是因为，如果没有释放锁，那么其它线程就无法进入对象的同步方法或者同步控制块中，那么就无法执行 notify() 或者 notifyAll() 来唤醒挂起的线程，造成死锁。\n\n### wait()和sleep()的区别\n\n* wait是Object方法，sleep是Thread的静态方法。\n* wait会释放锁，sleep不会。\n\n## await(),signal(),signalAll()\n\njava.util.concurrent 类库中提供了 Condition 类来实现线程之间的协调，可以在 Condition 上调用 await() 方法使线程等待，其它线程调用 signal() 或 signalAll() 方法唤醒等待的线程。\n\n只能用在lock.lock()同步时使用，否则会在运行时抛出 IllegalMonitorStateException。\n\n相比于 wait() 这种等待方式，await() 可以指定等待的条件，因此更加灵活。\n\n# 七、J.U.C - AQS\njava.util.concurrent（J.U.C）大大提高了并发性能，AQS 被认为是 J.U.C 的核心。\n\n## CountDownLatch\n\n用来控制一个线程等待多个线程。维护了一个计数器cnt，每次调用CountDownLatch的实例方法countDown()都会使计数器的值减一，减到0时，那些调用await()方法而等待的线程就会开始执行。\n```java\npublic static void main(String[] args) throws InterruptedException {\n    int count = 5;\n    CountDownLatch countDownLatch = new CountDownLatch(count);\n    ExecutorService cachedThreadPool = Executors.newCachedThreadPool();\n    cachedThreadPool.execute(()->{\n        try {\n            countDownLatch.await();\n            System.out.println(\"end...\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    });\n    cachedThreadPool.execute(()->{\n        for (int i = 0; i < count; i++) {\n            countDownLatch.countDown();\n            System.out.print(\"count : \"+countDownLatch.getCount()+\" \");\n        }\n    });\n    cachedThreadPool.shutdown();\n}\n// 输出 count : 4 count : 3 count : 2 count : 1 count : 0 end...\n// 或者输出 count : 4 count : 3 count : 2 count : 1 end...\n//         count : 0\n```\n## CyclicBarrier\n\n用来控制多个线程互相等待，只有当多个线程都到达时，这些线程才会继续执行。\n\n和 CountdownLatch 相似，都是通过维护计数器来实现的。线程执行 await() 方法之后计数器会减 1，并进行等待，直到计数器为 0，所有调用 await() 方法而在等待的线程才能继续执行。\n\nCyclicBarrier 和 CountdownLatch 的一个区别是，CyclicBarrier 的计数器通过调用 reset() 方法可以循环使用，所以它才叫做循环屏障。\n\nCyclicBarrier 有两个构造函数，其中 parties 指示计数器的初始值，barrierAction 在所有线程都到达屏障的时候会执行一次。\n```java\nprivate static void test1() {\n    int count = 5;\n    CyclicBarrier cyclicBarrier = new CyclicBarrier(count);\n    ExecutorService cachedThreadPool = Executors.newCachedThreadPool();\n    for (int i = 0; i < count; i++) {\n        cachedThreadPool.execute(() -> {\n            try {\n                System.out.print(\"before \");\n                cyclicBarrier.await();\n                System.out.print(\"after \");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            } catch (BrokenBarrierException e) {\n                e.printStackTrace();\n            }\n        });\n    }\n    cachedThreadPool.shutdown();\n}\n//输出 before before before before before after after after after after \n```\n\n```java\n private static void test2() {\n    int count = 5;\n    CyclicBarrier cyclicBarrier = new CyclicBarrier(count,()->{\n        System.out.println(\"ok \");\n    });\n    ExecutorService cachedThreadPool = Executors.newCachedThreadPool();\n    for (int i = 0; i < count; i++) {\n        cachedThreadPool.execute(() -> {\n            try {\n                System.out.print(\"before \");\n                cyclicBarrier.await();\n                System.out.print(\"after \");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            } catch (BrokenBarrierException e) {\n                e.printStackTrace();\n            }\n        });\n    }\n    cachedThreadPool.shutdown();\n}\n//输出 before before before before before ok \n//     after after after after after \n```\n\n## Semaphore\n\nSemaphore 类似于操作系统中的信号量，可以控制对互斥资源的访问线程数。\n\n```java\npublic static void main(String[] args) {\n    int count = 3;\n    int num = 15;\n    Semaphore semaphore = new Semaphore(count);// 另一个参数是否公平标志\n    ExecutorService cachedThreadPool = Executors.newCachedThreadPool();\n    for (int i = 0; i < num; i++) {\n        cachedThreadPool.execute(()->{\n            try {\n                semaphore.acquire(1);\n                System.out.print(semaphore.availablePermits()+\" \");\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }finally {\n                semaphore.release(1);\n            }\n        });\n    }\n    cachedThreadPool.shutdown();\n}\n// 输出 1 1 0 0 0 0 0 0 0 0 1 0 0 0 0 会有多种结果\n```\n### 方法说明\n* Semaphore(int permits):构造方法，创建具有给定许可数的计数信号量并设置为非公平信号量。\n* Semaphore(int permits,boolean fair):构造方法，当fair等于true时，创建具有给定许可数的计数信号量并设置为公平信号量。\n* void acquire():从此信号量获取一个许可前线程将一直阻塞。相当于一辆车占了一个车位。\n* void acquire(int n):从此信号量获取给定数目许可，在提供这些许可前一直将线程阻塞。比如n=2，就相当于一辆车占了两个车位。\n* void release():释放一个许可，将其返回给信号量。就如同车开走返回一个车位。\n* void release(int n):释放n个许可。\n* int availablePermits()：当前可用的许可数。\n\n# J.U.C-其他组件\n\n## FutureTask\n\n## BlockingQueue\n\n[参考](https://www.cnblogs.com/WangHaiMing/p/8798709.html)\n\n### 1.概括\njava.util.concurrent.BlockingQueue 接口有以下阻塞队列的实现：\n![BlockingQueue](https://note.youdao.com/yws/api/personal/file/3F24FAE079A54454AF90B3714A76A688?method=download&shareKey=91221a58b8f2bfe3d860814c9a7677d6)\n* FIFO队列：LinkedBlockingQueue、ArrayBlockingQueue（固定长度）\n* 优先级队列：PriorityBlockingQueue\n\n提供了阻塞的 take() 和 put() 方法：如果队列为空 take() 将阻塞，直到队列中有内容；如果队列为满 put() 将阻塞，直到队列有空闲位置。\n\n### 2.主要方法\n\n* boolean add(E e); 增加一个元索，如果设置成功返回true, 否则返回false。\n* boolean offer(E e); 添加一个元素，如果设置成功返回true, 否则返回false. e的值不能为空，否则抛出空指针异常。\n* void put(E e);  添加一个元素，如果队列满，则**阻塞**。\n* offer(E e, long timeout, TimeUnit unit); 在设定时间内添加一个元素并返回true，如果队列已满，则返回false\n* E take(); 移除并返回队列头部的元素，如果队列为空，则**阻塞**。\n* E poll(long timeout, TimeUnit unit);在给定的时间里，移除并返问队列头部的元6素，时间到了直接调用普通的poll方法，为null则直接返回null。\n* int remainingCapacity(); 获取队列中剩余的空间。\n* boolean remove(Object o); 从队列中移除指定的值。\n* int drainTo(Collection<? super E> c); 将队列中值，全部移除，并发设置到给定的集合中。\n* int drainTo(Collection<? super E> c, int maxElements);指定数量限制将队列中值，全部移除，并发设置到给定的集合中。\n  \n### ArrayBlockingQueue\n\n基于数组的阻塞队列实现，初始化必须指定大小。ArrayBlockingQueue在生产者放入数据和消费者获取数据，都是共用同一个锁对象，由此也意味着两者无法真正并行运行，这点尤其不同于LinkedBlockingQueue；在创建ArrayBlockingQueue时，可以控制对象的内部锁是否采用公平锁，默认采用非公平锁。\n\n```java\npublic class ArrayBlockingQueue<E> extends AbstractQueue<E>\n        implements BlockingQueue<E>, java.io.Serializable {\n    final Object[] items;\n    int takeIndex;//队列尾部在数组的位置\n    int putIndex;//队列头部在数组的位置\n    int count;//队列元素长度\n    final ReentrantLock lock;\n    private final Condition notEmpty;\n    private final Condition notFull;\n    public ArrayBlockingQueue(int capacity, boolean fair) {\n        if (capacity <= 0)\n            throw new IllegalArgumentException();\n        this.items = new Object[capacity];\n        lock = new ReentrantLock(fair);\n        notEmpty = lock.newCondition();\n        notFull =  lock.newCondition();\n    }\n    //...\n}\n```\n\n### LinkedBlockingQueue\n\n基于链表实现的阻塞队列，如果构造一个LinkedBlockingQueue对象，而没有指定其容量大小，LinkedBlockingQueue会默认一个类似无限大小的容量（Integer.MAX_VALUE），这样的话，如果生产者的速度一旦大于消费者的速度，也许还没有等到队列满阻塞产生，系统内存就有可能已被消耗殆尽了。\n\n### DelayQueue\n\nDelayQueue中的元素只有当其指定的延迟时间到了，才能够从队列中获取到该元素。DelayQueue是一个没有大小限制的队列，因此往队列中插入数据的操作（生产者）永远不会被阻塞，而只有获取数据的操作（消费者）才会被阻塞。\n\n使用场景：\n* 缓存系统的设计：可以用DelayQueue保存缓存元素的有效期，使用一个线程循环查询DelayQueue，一旦能从DelayQueue中获取元素时，表示缓存有效期到了。\n* 定时任务调度：使用DelayQueue保存当天将会执行的任务和执行时间，一旦从DelayQueue中获取到任务就开始执行。（Timer就是使用DelayQueue实现的）\n\n```java\nprivate final transient ReentrantLock lock = new ReentrantLock();\nprivate final PriorityQueue<E> q = new PriorityQueue<E>();\nprivate Thread leader = null;\nprivate final Condition available = lock.newCondition();\n```\n以支持优先级的PriorityQueue无界队列作为一个容器，因为元素都必须实现Delayed接口，可以根据元素的过期时间来对元素进行排列，因此，先过期的元素会在队首，每次从队列里取出来都是最先要过期的元素。（不这样排序无法保证最早过期的元素被获取）\n**详细使用见代码BlockingQueueTest.java**\n\n### PriorityBlockingQueue\n\n基于优先级的阻塞队列，默认自然排序，也可以自定义实现compareTo()方法来指定元素排序规则，不会阻塞数据生产者，只会在没有可消费的数据时，阻塞数据的消费者。注意当生产者的速度大于消费者时，可能会耗尽堆内存空间。\n\n### SynchronousQueue\n\n 一个不存储元素的阻塞队列，每一个put操作必须等待take操作，否则不能添加元素。支持公平锁和非公平锁。SynchronousQueue的一个使用场景是在线程池里。Executors.newCachedThreadPool()就使用了SynchronousQueue，这个线程池根据需要（新任务到来时）创建新的线程，如果有空闲线程则会重复使用，线程空闲了60秒后会被回收。\n\n### LinkedTransferQueue\n\n一个由链表结构组成的无界阻塞队列，相当于其它队列，LinkedTransferQueue队列多了transfer和tryTransfer方法。\n\n### LinkedBlockingDeque\n\n一个由链表结构组成的双向阻塞队列。队列头部和尾部都可以添加和移除元素，多线程并发时，可以将锁的竞争最多降到一半。\n\n## ForkJoin\n\n是Java7提供的原生多线程并行处理框架，其基本思想是将大任务分割成小任务，最后将小任务聚合起来得到结果。使用工作窃取（work-stealing）算法，主要用于实现“分而治之”。它非常类似于HADOOP提供的MapReduce框架，只是MapReduce的任务可以针对集群内的所有计算节点，可以充分利用集群的能力完成计算任务。ForkJoin更加类似于单机版的MapReduce。\n\n* ForkJoinTask:要使用ForkJoin框架，必须首先创建一个ForkJoin任务。它提供在任务中执行fork()和join的操作机制，通常不直接继承ForkjoinTask类，只需要直接继承其子类。\n    * RecursiveAction: 用于没有返回值的任务\n    * RecursiveTask: 用于有返回值的任务\n* ForkJoinPool：task要通过ForkJoinPool来执行，分割的子任务也会添加到当前工作线程的双端队列中，进入队列的头部。当一个工作线程中没有任务时，会从其他工作线程的队列尾部获取一个任务。线程数量取决于 CPU 核数。\n\n### 工作窃取（work-stealing）算法\n\nForkJoinPool 实现了工作窃取算法来提高 CPU 的利用率。每个线程都维护了一个双端队列，用来存储需要执行的任务。工作窃取算法允许空闲的线程从其它线程的双端队列中窃取一个任务来执行。窃取的任务必须是最晚的任务，避免和队列所属线程发生竞争。\n\n### 使用ForkJoin\n```java\nstatic class MyRecursiveTask extends RecursiveTask<Long>{\n\n    public static final int threshold = 10000;\n    private Long start;\n    private Long end;\n\n    @Override\n    protected Long compute() {\n        Long length = end - start;\n        if(length < threshold){\n            Long sum = 0L;\n            for (Long i = start;i<=end;i++){\n                sum += i;\n            }\n            return sum;\n        }else {\n            Long middle = (end + start)/2;//计算的两个值的中间值\n            MyRecursiveTask startTask = new MyRecursiveTask(start,middle);\n            MyRecursiveTask endTask = new MyRecursiveTask(middle+1,end);\n            startTask.fork();\n            endTask.fork();\n            return startTask.join()+endTask.join();\n        }\n    }\n\n    public MyRecursiveTask(Long start, Long end) {\n        this.start = start;\n        this.end = end;\n    }\n}\n\npublic static void test1(){\n    Long start = System.currentTimeMillis();\n    MyRecursiveTask myRecursiveTask = new MyRecursiveTask(0L,100000000L);\n    ForkJoinPool forkJoinPool = new ForkJoinPool();\n    ForkJoinTask<Long> submit = forkJoinPool.submit(myRecursiveTask);\n    //Long invoke = forkJoinPool.invoke(myRecursiveTask);\n    Long aLong = null;\n    try {\n        aLong = submit.get();\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    Long end = System.currentTimeMillis();\n    System.out.println(\"test1 = \" + aLong+\"  time: \" + (end - start));\n}\n```\n注意：\nForkJoinPool 使用submit 或 invoke 提交的区别：invoke是同步执行，调用之后需要等待任务完成，才能执行后面的代码；submit是异步执行，只有在Future调用get的时候会阻塞。\n\n# 十、Java内存模型\n\nJava 内存模型试图屏蔽各种硬件和操作系统的内存访问差异，以实现让 Java 程序在各种平台下都能达到一致的内存访问效果。\n\n## 主内存与工作内存\n\n处理器上的寄存器的读写的速度比内存快几个数量级，为了解决这种速度矛盾，在它们之间加入了高速缓存。\n![内存模型](https://note.youdao.com/yws/api/personal/file/338143C994F2409484C0946B9DD30A86?method=download&shareKey=780561d289ee566ee714f4482a8e8262)\n所有的变量都存储在主内存中，每个线程还有自己的工作内存，工作内存存储在高速缓存或者寄存器中，保存了该线程使用的变量的主内存副本拷贝。\n\n线程只能直接操作工作内存中的变量，不同线程之间的变量值传递需要通过主内存来完成。\n\n缓存一致性问题：多个缓存共享同一块主内存区域，那么多个缓存的数据可能会不一致。\n\n## 内存间的交互操作\n\nJava内存模型定义了8个操作完成主内存和工作内存的交互。\n![内存间的交互操作](https://note.youdao.com/yws/api/personal/file/713E11ECE9D846679A34EDFA897A5448?method=download&shareKey=a3be21c07378a44e1d967d55c1554f1e)\n* read：把一个变量值从主内存传输到工作内存中。\n* load：在read之后执行，把read获取的值放到工作内存变量副本中。\n* use：把工作内存中一个变量的值传递给执行引擎。\n* assign：把一个从执行引擎接收到的值赋给工作内存的变量。\n* store：把工作内存的值传送到主内存中。\n* write：在store之后，把store得到的值放入主内存变量中。\n* lock：作用于主内存的变量\n* unlock\n\n## 内存模型三大特性\n\n### 1.原子性\nJava 内存模型保证了 read、load、use、assign、store、write、lock 和 unlock 单独操作具有原子性。但没有被 volatile 修饰的变量load、store、read 和 write 操作可以不具备原子性。\n解决方法：\n1.使用原子类，如AtomicInteger \n2.使用 synchronized 互斥锁来保证操作的原子性\n3.使用lock 和 unlock\n\n### 2.可见性\n\n可见性是指当一个线程修改了变量值时，其他线程能够立即得知这个修改。Java 内存模型是通过在变量修改后将新值同步回主内存，在变量读取前从主内存刷新变量值来实现可见性的。\n\n主要有三种实现可见性的方式：\n* volatile（不能保证原子性）\n* synchronized，对一个变量执行 unlock 操作之前，必须把变量值同步回主内存。\n* final，被 final 关键字修饰的字段在构造器中一旦初始化完成，并且没有发生 this 逃逸（其它线程通过 this 引用访问到初始化了一半的对象），那么其它线程就能看见 final 字段的值。\n\n### 3.有序性\n有序性是指：在本线程内观察，所有操作都是有序的。在一个线程观察另一个线程，所有操作都是无序的，无序是因为发生了指令重排序。在 Java 内存模型中，允许编译器和处理器对指令进行重排序，重排序过程不会影响到单线程程序的执行，却会影响到多线程并发执行的正确性。\n\nvolatile 关键字通过添加内存屏障的方式来禁止指令重排，即重排序时不能把后面的指令放到内存屏障之前。\n\n也可以通过 synchronized 来保证有序性，它保证每个时刻只有一个线程执行同步代码，相当于是让线程顺序执行同步代码。\n\n## 先行发生原则\n\nJVM规定的先行发生原则，让一个操作无需控制就可以先于另一个操作发生。\n\n* 单一线程原则(Single Thread rule)：在一个线程内，在程序前面的操作先行发生于后面的操作。\n* 管程锁定规则(Monitor Lock Rule)：一个 unlock 操作先行发生于后面对同一个锁的 lock 操作。\n* volatile变量规则(Volatile Variable Rule)：对一个 volatile 变量的写操作先行发生于后面对这个变量的读操作。\n* 线程启动规则(Thread Start Rule)：Thread 对象的 start() 方法调用先行发生于此线程的每一个动作。\n* 线程加入规则(Thread Join Rule)：Thread 对象的结束先行发生于 join() 方法返回。\n* 线程中断规则(Thread Interruption Rule)：对线程 interrupt() 方法的调用先行发生于被中断线程的代码检测到中断事件的发生，可以通过 interrupted() 方法检测到是否有中断发生。\n* 对象终结规则()：一个对象的初始化完成（构造函数执行结束）先行发生于它的 finalize(Finalizer Rule)： 方法的开始。\n* 传递性(Transitivity)：如果操作 A 先行发生于操作 B，操作 B 先行发生于操作 C，那么操作 A 先行发生于操作 C。\n\n# 十一、线程安全\n\n多个线程不管以何种方式访问某个类，并且在主调代码中不需要进行同步，都能表现正确的行为。\n\n## 不可变\n\n不可变（Immutable）的对象一定是线程安全的，不需要再采取任何的线程安全保障措施。\n不可变类型：\n* final 关键字修饰的基本数据类型\n* String\n* 枚举类型\n* Number 部分子类，如 Long 和 Double 等数值包装类型，BigInteger 和 BigDecimal 等大数据类型。但同为 Number 的原子类 AtomicInteger 和 AtomicLong 则是可变的。\n* 对于集合类型，可以使用 Collections.unmodifiableXXX() 方法来获取一个不可变的集合。\n```java\nMap<String, Integer> map = new HashMap<>();\nMap<String, Integer> unmodifiableMap = Collections.unmodifiableMap(map);\nunmodifiableMap.put(\"a\", 1);//会抛出异常java.lang.UnsupportedOperationException\n```\n## 互斥同步\n\nsynchronized和ReentrantLock\n\n## 非阻塞同步\n\n互斥同步属于阻塞同步，线程阻塞和唤醒会带来性能问题。\n\n### 1.CAS\n\n硬件支持的原子性操作最典型的是：比较并交换（Compare-and-Swap，CAS）。\n\n### 2.AtomicInteger\n\nJ.U.C 包里面的整数原子类 AtomicInteger 的方法调用了 Unsafe 类的 CAS 操作。\n\n### 3.ABA问题\n\nJ.U.C 包提供了一个带有标记的原子引用类 AtomicStampedReference 来解决这个问题，它可以通过控制变量值的版本来保证 CAS 的正确性。大部分情况下 ABA 问题不会影响程序并发的正确性，如果需要解决 ABA 问题，改用传统的互斥同步可能会比原子类更高效。\n\n## 无同步方案\n要保证线程安全，并不是一定就要进行同步。如果一个方法本来就不涉及共享数据，那它自然就无须任何同步措施去保证正确性。\n\n### 1.栈封闭\n多个线程访问同一个方法的局部变量时，不会出现线程安全问题\n\n### 2.线程本地存储（Thread Local Storage）\n使用 java.lang.ThreadLocal 类来实现线程本地存储功能\n```java\nThreadLocal threadLocal = new ThreadLocal();\nThread thread1 = new Thread(() -> {\n    threadLocal.set(1);\n    try {\n        Thread.sleep(1000);\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n    System.out.println(threadLocal.get());\n    threadLocal.remove();\n});\nThread thread2 = new Thread(() -> {\n    threadLocal.set(2);\n    threadLocal.remove();\n});\nthread1.start();\nthread2.start();\n//输出 1\n```\n每个 Thread 都有一个 ThreadLocal.ThreadLocalMap 对象。当调用一个 ThreadLocal 的 set(T value) 方法时，先得到当前线程的 ThreadLocalMap 对象，然后将 ThreadLocal->value 键值对插入到该 Map 中。\nThreadLockl的set方法\n```java\npublic void set(T value) {\n    Thread t = Thread.currentThread();\n    ThreadLocalMap map = getMap(t);\n    if (map != null)\n        map.set(this, value);\n    else\n        createMap(t, value);\n}\n```\nget()方法类似\n```java\npublic T get() {\n    Thread t = Thread.currentThread();\n    ThreadLocalMap map = getMap(t);\n    if (map != null) {\n        ThreadLocalMap.Entry e = map.getEntry(this);\n        if (e != null) {\n            @SuppressWarnings(\"unchecked\")\n            T result = (T)e.value;\n            return result;\n        }\n    }\n    return setInitialValue();\n}\n```\n### 3.可重入代码(Reentry code)\n\n可重入代码(Reentry code)也叫纯代码(Pure code)是一种允许多个进程同时访问的代码。为了使各进程所执行的代码完全相同，故不允许任何进程对其进行修改。程序在运行过程中可以被打断，并由开始处再次执行，并且在合理的范围内（多次重入，而不造成堆栈溢出等其他问题），程序可以在被打断处继续执行，且执行结果不受影响。\n\n# 十二、锁优化\n\n这里的锁优化主要是指 JVM 对 synchronized 的优化。\n\n## 自旋锁\n\n自旋锁的思想是让一个线程在请求一个共享数据的锁时执行忙循环（自旋）一段时间，如果在这段时间内能获得锁，就可以避免进入阻塞状态。在 JDK 1.6 中引入了自适应的自旋锁。自适应意味着自旋的次数不再固定了，而是由前一次在同一个锁上的自旋次数及锁的拥有者的状态来决定。\n\n## 锁消除\n\n锁消除是指对于被检测出不可能存在竞争的共享数据的锁进行消除。\n\n## 锁粗化\n\n如果虚拟机探测到由有一串零碎的操作都对同一个对象加锁，将会把加锁的范围扩展（粗化）到整个操作序列的外部。\n\n## 轻量级锁\n\nJDK 1.6 引入了偏向锁和轻量级锁，从而让锁拥有了四个状态：无锁状态（unlocked）、偏向锁状态（biasble）、轻量级锁状态（lightweight locked）和重量级锁状态（inflated）。\n\n## 偏向锁\n\n偏向锁的思想是偏向于让第一个获取锁对象的线程，这个线程在之后获取该锁就不再需要进行同步操作，甚至连 CAS 操作也不再需要。\n\n# 十三、多线程开发良好的实践\n\n* 给线程起个有意义的名字，这样可以方便找 Bug。\n缩小同步范围，从而减少锁争用。例如对于 synchronized，应该尽量使用同步块而不是同步方法。\n\n* 多用同步工具少用 wait() 和 notify()。首先，CountDownLatch, CyclicBarrier, Semaphore 和 Exchanger 这些同步类简化了编码操作，而用 wait() 和 notify() 很难实现复杂控制流；其次，这些同步类是由最好的企业编写和维护，在后续的 JDK 中还会不断优化和完善。\n* 使用 BlockingQueue 实现生产者消费者问题。\n多用并发集合少用同步集合，例如应该使用 ConcurrentHashMap 而不是 Hashtable。\n\n* 使用本地变量和不可变类来保证线程安全。\n\n* 使用线程池而不是直接创建线程，这是因为创建线程代价很高，线程池可以有效地利用有限的线程来启动任务。\n\n# 参考资料\n\n- [Java并发](https://github.com/CyC2018/CS-Notes/blob/master/docs/notes/Java%20%E5%B9%B6%E5%8F%91.md)\n\n","source":"_posts/java并发.md","raw":"---\ntitle: java并发\ndate: 2019-04-10 14:46:46\ntype: \"tags\"\ntags:\n  - java\n  - 并发\ncategories: java\n---\n\n# 一、线程状态的转换\n\n![线程转换](https://note.youdao.com/yws/api/personal/file/3782D564310F4EFD9D604DF102DD2897?method=download&shareKey=9986c9632ae622172333d92c9be73583)\n\n## 新建（New）\n\n创建后尚未运行。\n\n## 可运行（Runnable）\n\n可能正在运行，也可能正在等待CPU时间片。  \n包括操作系统线程状态中的Running和Ready。  \nRunning：线程获取CPU权限进行执行。\n\n## 阻塞（Blocking）\n\n等待获取一个排它锁，如果其线程释放了锁就会结束此状态。\n\n## 无限期等待（Waiting）\n\n等待其它线程显式地唤醒，否则不会被分配 CPU 时间片。\n|进入方法|退出方法|\n|---|---|\n|没有设置 Timeout 参数的 Object.wait() 方法|Object.notify() / Object.notifyAll()|\n|没有设置 Timeout 参数的 Thread.join() 方法|被调用的线程执行完毕|\n|LockSupport.park() 方法|LockSupport.unpark(Thread)|\n\n## 期限等待（Timed Waiting）\n\n无需等待其他线程显示地唤醒，在一定时间之后会被系统自动唤醒。\n\n调用 Thread.sleep() 方法使线程进入限期等待状态时，常常用“使一个线程睡眠”进行描述。\n\n调用 Object.wait() 方法使线程进入限期等待或者无限期等待时，常常用“挂起一个线程”进行描述。\n\n睡眠和挂起是用来描述行为，而阻塞和等待用来描述状态。\n\n阻塞和等待的区别在于，阻塞是被动的，它是在等待获取一个排它锁。而等待是主动的，通过调用 Thread.sleep() 和 Object.wait() 等方法进入。\n|进入方法|退出方法|\n|---|---|\n|Thread.sleep() 方法|时间结束|\n|设置了 Timeout 参数的 Object.wait() 方法|时间结束 / Object.notify() / Object.notifyAll()|\n|设置了 Timeout 参数的Thread.join() 方法|时间结束 / 被调用的线程执行完毕|\n|LockSupport.parkNanos() 方法|LockSupport.unpark(Thread)|\n|LockSupport.parkUntil() 方法|LockSupport.unpark(Thread)|\n\n## 死亡（Terminated）\n\n可以是线程结束任务之后自己结束，或者产生了异常而结束。\n\n# 二、使用线程\n\n三种使用线程的方式：\n\n* 实现Runnable接口；\n\n  ```java\n    // 执行\n    MyRunnable myRunnable = new MyRunnable();\n    Thread thread1 = new Thread(myRunnable);\n    thread1.start();\n  ```\n\n* 实现Callable接口（可以有返回值）；\n\n    ```java\n    public static class MyCallable implements Callable<Integer>{\n\n        @Override\n        public Integer call() throws Exception {\n            Integer i = 0;\n            while (i < 3){\n                Thread.sleep(1000);\n                i++;\n            }\n            return i;\n        }\n    }\n    // 执行\n    MyCallable myCallable = new MyCallable();\n    FutureTask<Integer> ft = new FutureTask<>(myCallable);\n    Thread thread2 = new Thread(ft);\n    thread2.start();\n    while (!ft.isDone()){\n        System.out.println(ft.get());\n    }\n    ```\n\n* 继承Thread类。\n\n实现Runnable和Callable接口的类不是真正意义上的线程，还需要通过Thread来调用。可以说任务是通过线程驱动从而执行的。\n\n## 实现接口 VS 继承Thread\n\n实现会更好一些，原因：\n\n* Java不支持多继承，继承Thread不能再去继承别的类，但是可以实现多个接口。\n* 类可能只要求可执行就行，继承整个Thread类开销过大。\n\n# 四、基础线程机制\n\n## Executor\n\n线程池，管理多个线程执行，而无需程序员显式地管理线程的生命周期。\n\n主要有三种Executor：\n\n* CachedThreadPool: 一个任务创建一个线程。\n* FixedThreadPool: 固定大小的线程池。\n* SingleThreadExecutor：相当于大小为 1 的 FixedThreadPool。\n\n```java\nExecutorService cachedThreadPool = Executors.newCachedThreadPool();\nfor (int i = 0; i < 5; i++) {\n    cachedThreadPool.execute(new MyRunnable());\n}\ncachedThreadPool.shutdown();\n```\n\n## Daemon\n\n守护线程是程序运行时在后台提供服务的线程，不属于程序中不可或缺的部分，比如垃圾回收线程。\n\n当所有的非守护线程结束时，程序也就结束了，同时也会杀死进程中的所有守护线程。\nmain() 属于非守护线程。\n\n通过使用Thread对象的setDeamon(true)方法将线程设置为守护线程，注意：\n\n1. thread.setDeamon(true)必须在thread.start()之前设置，否则会抛出IllegalThreadStateException异常。不可以将正在运行的线程设置为守护线程。\n2. 在Deamon线程中产生的线程也是Deamon的。\n3. 守护线程应该永远不去访问固有资源，如文件、数据库，因为它会在任何时候甚至在一个操作的中间发生中断。\n\n## sleep()\n\nThread.sleep(millisec) 方法会休眠当前正在执行的线程，millisec 单位为毫秒。\n\nsleep() 可能会抛出 InterruptedException，因为异常不能跨线程传播回 main() 中，因此必须在本地进行处理。线程中抛出的其它异常也同样需要在本地进行处理。\n\n```java\npublic void run() {\n    try {\n        Thread.sleep(3000);\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n}\n```\n\n## yield()\n\n`Thread.yield();`译为线程让步，让当前线程从运行状态进入就绪状态，它会把CPU执行的时间让掉，让其他或者**自己**线程执行。\n\n# 四、线程的中断\n\n一个线程执行完毕之后会自动结束，如果在运行中发生异常也会提前结束。\n\n## 中断协议\n\n每个线程都有一个与线程是否已中断的相关联的Boolean属性，用于表示线程的中断状态（interrupted status）。中断状态初始时为false；当一个线程A通过调用threadB.interrupt()中断线程B时，会出现以下两种情况之一:\n\n* 如果那个线程B在执行一个低级可中断阻塞方法，例如 Thread.sleep()、 Thread.join() 或 Object.wait()，那么它将取消阻塞并抛出 InterruptedException。但是不能中断 I/O 阻塞和 synchronized 锁阻塞。\n* 否则，interrupt()只是设置线程B的中断状态。 在被中断线程B中运行的代码以后可以轮询中断状态，看看它是否被请求停止正在做的事情。中断状态可以通过 Thread.isInterrupted() 来读取，并且可以通过一个名为 Thread.interrupted() 的操作读取和清除。\n\n## interrupt()\n\n发送中断信号\n对于以下代码，在 main() 中启动一个线程之后再中断它，由于线程中调用了 Thread.sleep() 方法，因此会抛出一个 InterruptedException，从而提前结束线程，不执行之后的语句。\n\n```java\npublic static void main(String[] args) {\n    Thread thread = new Thread(){\n        @Override\n        public void run() {\n            try {\n                Thread.sleep(2000);\n                System.out.println(\"Thread run\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    };\n    thread.start();\n    thread.interrupt();\n}\n/*输出\n//java.lang.InterruptedException: sleep interrupted\nat java.lang.Thread.sleep(Native Method)\nat com.wkk.demo.javaconcurrent.InterruptTest$1.run(InterruptTest.java:15)\n*/\n```\n\n## interrupted()\n\n获取线程是否已经中断。在线程中可以通过循环判断是否发出中断信号，决定当前线程是否停止。\n\n## Executor的中断操作\n\n调用Executor的shutdown()方法会等待线程都执行完毕之后再关闭，但是调用shutdownNow()方法，相当于调用了每个线程的interrupt()方法。\n\n只想中断一个线程，可以通过使用submit()方法提交一个线程，它会返回一个 Future<?> 对象，通过调用该对象的 cancel(true) 方法就可以中断线程。\n\n```java\nFuture<?> future = executorService.submit(() -> {\n    // ..\n});\nfuture.cancel(true);\n```\n\n### Future简介\n\nFuture接口用于获取异步计算的结果，可通过get()获取结果、cancel()取消、isDone()判断是否完成等操作。[源码参考](https://blog.csdn.net/codershamo/article/details/51901057)\n方法：\n\n* V get()： 获取结果，若无结果会阻塞至异步计算完成\n* V get(long timeOut, TimeUnit unit)：获取结果，超时返回null\n* boolean isDone()：执行结束（完成/取消/异常）返回true\n* boolean isCancelled()：任务完成前被取消返回true\n* boolean cancel(boolean mayInterruptRunning)：取消任务，未开始或已完成返回false，参数表示是否中断执行中的线程\n\n当cancel()方法参数为false时，只能取消还没有开始的任务，若任务已经开始了，就任由其运行下去\n当创建了Future实例，任务可能有以下三种状态：\n\n* 等待状态。此时调用cancel()方法不管传入true还是false都会标记为取消，任务依然保存在任务队列中，但当轮到此任务运行时会直接跳过。\n* 完成状态。此时cancel()不会起任何作用，因为任务已经完成了。\n* 运行中。此时传入true会中断正在执行的任务，传入false则不会中断。\n  \n### CAS和Unsafe类\n\n[参考](https://blog.csdn.net/javazejian/article/details/72772470)\n\n# 五、互斥同步\n\nJava提供了两种锁机制来控制对共享资源的互斥访问，一个是JVM实现的synchronized，一个是JDK实现的ReentrantLock。\n\n## synchronized\n\n**1. 同步一个代码块**\n\n```java\npublic void test(){\n    //...\n    synchronized(this){\n        //...\n    }\n    //..\n}\n```\n\n只能实现同一对象对代码块的访问互斥。\n**2. 同步一个方法**\n**3. 同步一个类**\n\n```java\npublic void test(){\n    //...\n    synchronized(SynchronizedExample.class)){\n        //...\n    }\n    //...\n}\n```\n\n作用于整个类，也就是说两个线程调用同一个类的不同对象上的这种同步语句，也会进行同步。\n**4. 同步一个静态方法**\n\n```java\npublic synchronized void test(){\n    //...\n}\n```\n\n作用于整个类\n\n### 对象锁（monitor）机制\n\n执行同步代码块后首先要先执行monitorenter指令，退出的时候执行monitorexit指令。使用Synchronized进行同步，其关键就是必须要对对象的监视器monitor进行获取，当线程获取monitor后才能继续往下执行，否则就只能等待。而这个获取的过程是互斥的，即同一时刻只有一个线程能够获取到monitor。Synchronized先天具有重入性。每个对象拥有一个计数器，当线程获取该对象锁后，计数器就会加一，释放锁后就会将计数器减一。\n\n任意一个对象都拥有自己的监视器，当这个对象由同步块或者这个对象的同步方法调用时，执行方法的线程必须先获取该对象的监视器才能进入同步块和同步方法，如果没有获取到监视器的线程将会被阻塞在同步块和同步方法的入口处，进入到BLOCKED状态。\n![对象锁获取](https://note.youdao.com/yws/api/personal/file/72D215D872BC4B48BC9FB226862858EB?method=download&shareKey=11aaa546f8909b020c771afb5a860dd5)\n\n> 引申 [happens-before规则](https://juejin.im/post/5ae6d309518825673123fd0e#heading-3)\n\n### synchronized优化\n\nsynchronized最大的特征就是在同一时刻只有一个线程能够获得对象的监视器（monitor），从而进入到同步代码块或者同步方法之中，即表现为互斥性（排它性）。一次只能一个线程效率低下\n\n#### CAS操作\n\nCAS操作（又称为无锁操作）是一种乐观锁策略，它假设所有线程访问共享资源的时候不会出现冲突，既然不会出现冲突自然而然就不会阻塞其他线程的操作。通过使用compare and swap（比较交换），解决冲突。\n\nCAS比较交换的过程可以通俗的理解为CAS(V,O,N)，包含三个值分别为：V 内存地址存放的实际值；O 预期的值（旧值）；N 更新的新值。如果与O相同就表明没有更改，直接更新为N，如果如O不相等，更新失败。\n\nCAS的实现需要硬件指令集的支撑，在JDK1.5后虚拟机才可以使用处理器提供的CMPXCHG指令实现。\n\n> ABA问题：通过变量值加入版本号解决\n> [参考](https://juejin.im/post/5ae6dc04f265da0ba351d3ff#heading-5)\n\n## ReentrantLock\n\nReentrantLock 是 java.util.concurrent（J.U.C）包中的锁。支持重入性，表示能够对共享资源能够重复加锁，即当前线程获取该锁再次获取不会被阻塞。ReentrantLock还支持公平锁和非公平锁两种方式。\n\n### 1.主要方法\n\n* lock();  获得锁\n* lockInterruptibly();  获得锁，但优先响应中断\n* tryLock();    尝试获得锁，成功返回true,否则false，该方法不等待，立即返回\n* tryLock(long time,TimeUnit unit);   在给定时间内尝试获得锁\n* unlock();     释放锁\n\n### 2.重入性的实现原理\n\n要想支持重入性，就要解决两个问题：1. 在线程获取锁的时候，如果已经获取锁的线程是当前线程的话则直接再次获取成功；2. 由于锁会被获取n次，那么只有锁在被释放同样的n次之后，该锁才算是完全释放成功。\n\n以非公平锁为例，判断当前线程能否获得锁为例，核心方法为nonfairTryAcquire：\n\n```java\nfinal boolean nonfairTryAcquire(int acquires) {\n    final Thread current = Thread.currentThread();\n    int c = getState();\n    if (c == 0) {\n        if (compareAndSetState(0, acquires)) {\n            setExclusiveOwnerThread(current);\n            return true;\n        }\n    }\n    else if (current == getExclusiveOwnerThread()) {\n        int nextc = c + acquires;\n        if (nextc < 0) // overflow\n            throw new Error(\"Maximum lock count exceeded\");\n        setState(nextc);\n        return true;\n    }\n    return false;\n}\n```\n\n分析：如果当前没有线程占用，直接设置当前线程占用。存在线程占用并且占用线程为当前申请锁的线程时，同步状态加1（state+1），返回true。\n\n以非公平锁为例，释放锁，核心方法为tryRelease：\n\n```java\nprotected final boolean tryRelease(int releases) {\n    int c = getState() - releases;\n    if (Thread.currentThread() != getExclusiveOwnerThread())\n        throw new IllegalMonitorStateException();\n    boolean free = false;\n    if (c == 0) {\n        free = true;\n        setExclusiveOwnerThread(null);\n    }\n    setState(c);\n    return free;\n}\n```\n\n分析：重入锁的释放必须得等到同步状态为0时锁才算成功释放，否则锁仍未释放。如果锁被获取n次，释放了n-1次，该锁未完全释放返回false，只有被释放n次才算成功释放，返回true。\n\n### 3.公平锁与非公平锁\n\nReentrantLock支持两种锁：公平锁和非公平锁。何谓公平性，是针对获取锁而言的，如果一个锁是公平的，那么锁的获取顺序就应该符合请求上的绝对时间顺序，满足FIFO（先进先出）。\n\n```java\npublic ReentrantLock(boolean fair) {\n    sync = fair ? new FairSync() : new NonfairSync();\n}\n```\n\n公平锁的tryAcquire方法\n\n```java\nprotected final boolean tryAcquire(int acquires) {\n    final Thread current = Thread.currentThread();\n    int c = getState();\n    if (c == 0) {\n        if (!hasQueuedPredecessors() &&\n            compareAndSetState(0, acquires)) {\n            setExclusiveOwnerThread(current);\n            return true;\n        }\n    }\n    else if (current == getExclusiveOwnerThread()) {\n        int nextc = c + acquires;\n        if (nextc < 0)\n            throw new Error(\"Maximum lock count exceeded\");\n        setState(nextc);\n        return true;\n    }\n    return false;\n}\n```\n\n分析：逻辑与nonfairTryAcquire基本上一直，唯一的不同在于增加了hasQueuedPredecessors的逻辑判断，该方法是用来判断当前节点在同步队列中是否有前驱节点的判断，如果有前驱节点说明有线程比当前线程更早的请求资源，根据公平性，当前线程请求资源失败。如果当前节点没有前驱节点的话，再才有做后面的逻辑判断的必要性。公平锁每次都是从同步队列中的第一个节点获取到锁，而非公平性锁则不一定，有可能刚释放锁的线程能再次获取到锁。\n>比较\n\n* 公平锁每次获取锁为同步队列中的第一个节点，保证请求资源时间上的绝对顺序，而非公平锁不保证这一点，可能造成“饥饿”现象。\n* 公平锁为了保证时间上的绝对顺序，需要频繁的上下文切换，而非公平锁会降低一定的上下文切换，降低性能开销。因此，ReentrantLock默认选择的是非公平锁，则是为了减少一部分上下文切换，保证了系统更大的吞吐量。\n\n> [参考](https://blog.csdn.net/u011521203/article/details/80186741)；[源码阅读参考](https://www.cnblogs.com/zhimingyang/p/5702752.html)\n\n### 4.Condition\n\nLock 替代了 synchronized 方法和语句的使用，Condition（await、signal和signalAll） 替代了 Object（wait、notify 和 notifyAll） 监视器方法的使用。\n\n新建Condition对象，一个ReentrantLock可以绑定多个Condition对象\n\n```java\nCondition condition = lock.newCondition();\n```\n\n* Condition与Object中的wati,notify,notifyAll区别：\n\n    * Object中的这些方法是和同步锁捆绑使用的；而Condition是需要与互斥锁/共享锁捆绑使用的。\n\n    * Condition它更强大的地方在于：能够更加精细的控制多线程的休眠与唤醒。对于同一个锁，我们可以创建多个Condition，在不同的情况下使用不同的Condition。通过Condition，能明确的指定唤醒读线程。\n\n## synchronized与ReentrantLock的比较\n\n1. 锁的实现\n   synchronized是JVM实现的，ReentrantLock是JDK实现的。\n2. 性能\n   新版本 Java 对 synchronized 进行了很多优化，例如自旋锁（就是for循环）等，synchronized 与 ReentrantLock 大致相同。\n3. 等待可中断\n   当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，改为处理其他事情。ReentrantLock 可中断，而 synchronized 不行。\n4. 公平锁\n   synchronized 中的锁是非公平的，ReentrantLock 默认情况下也是非公平的，但是也可以是公平的。\n5. 锁绑定多个条件\n   一个 ReentrantLock 可以同时绑定多个 Condition 对象\n\n## 使用比较\n\n除非使用ReentrantLock的高级功能，否则优先使用synchronized。这是因为 synchronized 是 JVM 实现的一种锁机制，JVM 原生地支持它，而 ReentrantLock 不是所有的 JDK 版本都支持。并且使用 synchronized 不用担心没有释放锁而导致死锁问题，因为 JVM 会确保锁的释放。\n\n# 六、线程之间的协作\n\n多个线程执行任务时，某些线程必须在其他线程执行完成后才能执行，这时候就需要对线程进行协调。\n\n## join()方法\n\n在线程中调用另一个线程的join()方法,会将当前线程挂起，而不是忙等待，直到目标线程执行结束。\n\n## wait(),notify(),notifyAll()\n\n调用 wait() 使得线程等待某个条件满足，线程在等待时会被挂起，当其他线程的运行使得这个条件满足时，其它线程会调用 notify() 或者 notifyAll() 来唤醒挂起的线程。\n\n它们都属于 Object 的一部分，而不属于 Thread。只能用在同步方法或者同步控制块中使用，否则会在运行时抛出 IllegalMonitorStateException。\n\n使用 wait() 挂起期间，线程会释放锁。这是因为，如果没有释放锁，那么其它线程就无法进入对象的同步方法或者同步控制块中，那么就无法执行 notify() 或者 notifyAll() 来唤醒挂起的线程，造成死锁。\n\n### wait()和sleep()的区别\n\n* wait是Object方法，sleep是Thread的静态方法。\n* wait会释放锁，sleep不会。\n\n## await(),signal(),signalAll()\n\njava.util.concurrent 类库中提供了 Condition 类来实现线程之间的协调，可以在 Condition 上调用 await() 方法使线程等待，其它线程调用 signal() 或 signalAll() 方法唤醒等待的线程。\n\n只能用在lock.lock()同步时使用，否则会在运行时抛出 IllegalMonitorStateException。\n\n相比于 wait() 这种等待方式，await() 可以指定等待的条件，因此更加灵活。\n\n# 七、J.U.C - AQS\njava.util.concurrent（J.U.C）大大提高了并发性能，AQS 被认为是 J.U.C 的核心。\n\n## CountDownLatch\n\n用来控制一个线程等待多个线程。维护了一个计数器cnt，每次调用CountDownLatch的实例方法countDown()都会使计数器的值减一，减到0时，那些调用await()方法而等待的线程就会开始执行。\n```java\npublic static void main(String[] args) throws InterruptedException {\n    int count = 5;\n    CountDownLatch countDownLatch = new CountDownLatch(count);\n    ExecutorService cachedThreadPool = Executors.newCachedThreadPool();\n    cachedThreadPool.execute(()->{\n        try {\n            countDownLatch.await();\n            System.out.println(\"end...\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    });\n    cachedThreadPool.execute(()->{\n        for (int i = 0; i < count; i++) {\n            countDownLatch.countDown();\n            System.out.print(\"count : \"+countDownLatch.getCount()+\" \");\n        }\n    });\n    cachedThreadPool.shutdown();\n}\n// 输出 count : 4 count : 3 count : 2 count : 1 count : 0 end...\n// 或者输出 count : 4 count : 3 count : 2 count : 1 end...\n//         count : 0\n```\n## CyclicBarrier\n\n用来控制多个线程互相等待，只有当多个线程都到达时，这些线程才会继续执行。\n\n和 CountdownLatch 相似，都是通过维护计数器来实现的。线程执行 await() 方法之后计数器会减 1，并进行等待，直到计数器为 0，所有调用 await() 方法而在等待的线程才能继续执行。\n\nCyclicBarrier 和 CountdownLatch 的一个区别是，CyclicBarrier 的计数器通过调用 reset() 方法可以循环使用，所以它才叫做循环屏障。\n\nCyclicBarrier 有两个构造函数，其中 parties 指示计数器的初始值，barrierAction 在所有线程都到达屏障的时候会执行一次。\n```java\nprivate static void test1() {\n    int count = 5;\n    CyclicBarrier cyclicBarrier = new CyclicBarrier(count);\n    ExecutorService cachedThreadPool = Executors.newCachedThreadPool();\n    for (int i = 0; i < count; i++) {\n        cachedThreadPool.execute(() -> {\n            try {\n                System.out.print(\"before \");\n                cyclicBarrier.await();\n                System.out.print(\"after \");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            } catch (BrokenBarrierException e) {\n                e.printStackTrace();\n            }\n        });\n    }\n    cachedThreadPool.shutdown();\n}\n//输出 before before before before before after after after after after \n```\n\n```java\n private static void test2() {\n    int count = 5;\n    CyclicBarrier cyclicBarrier = new CyclicBarrier(count,()->{\n        System.out.println(\"ok \");\n    });\n    ExecutorService cachedThreadPool = Executors.newCachedThreadPool();\n    for (int i = 0; i < count; i++) {\n        cachedThreadPool.execute(() -> {\n            try {\n                System.out.print(\"before \");\n                cyclicBarrier.await();\n                System.out.print(\"after \");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            } catch (BrokenBarrierException e) {\n                e.printStackTrace();\n            }\n        });\n    }\n    cachedThreadPool.shutdown();\n}\n//输出 before before before before before ok \n//     after after after after after \n```\n\n## Semaphore\n\nSemaphore 类似于操作系统中的信号量，可以控制对互斥资源的访问线程数。\n\n```java\npublic static void main(String[] args) {\n    int count = 3;\n    int num = 15;\n    Semaphore semaphore = new Semaphore(count);// 另一个参数是否公平标志\n    ExecutorService cachedThreadPool = Executors.newCachedThreadPool();\n    for (int i = 0; i < num; i++) {\n        cachedThreadPool.execute(()->{\n            try {\n                semaphore.acquire(1);\n                System.out.print(semaphore.availablePermits()+\" \");\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }finally {\n                semaphore.release(1);\n            }\n        });\n    }\n    cachedThreadPool.shutdown();\n}\n// 输出 1 1 0 0 0 0 0 0 0 0 1 0 0 0 0 会有多种结果\n```\n### 方法说明\n* Semaphore(int permits):构造方法，创建具有给定许可数的计数信号量并设置为非公平信号量。\n* Semaphore(int permits,boolean fair):构造方法，当fair等于true时，创建具有给定许可数的计数信号量并设置为公平信号量。\n* void acquire():从此信号量获取一个许可前线程将一直阻塞。相当于一辆车占了一个车位。\n* void acquire(int n):从此信号量获取给定数目许可，在提供这些许可前一直将线程阻塞。比如n=2，就相当于一辆车占了两个车位。\n* void release():释放一个许可，将其返回给信号量。就如同车开走返回一个车位。\n* void release(int n):释放n个许可。\n* int availablePermits()：当前可用的许可数。\n\n# J.U.C-其他组件\n\n## FutureTask\n\n## BlockingQueue\n\n[参考](https://www.cnblogs.com/WangHaiMing/p/8798709.html)\n\n### 1.概括\njava.util.concurrent.BlockingQueue 接口有以下阻塞队列的实现：\n![BlockingQueue](https://note.youdao.com/yws/api/personal/file/3F24FAE079A54454AF90B3714A76A688?method=download&shareKey=91221a58b8f2bfe3d860814c9a7677d6)\n* FIFO队列：LinkedBlockingQueue、ArrayBlockingQueue（固定长度）\n* 优先级队列：PriorityBlockingQueue\n\n提供了阻塞的 take() 和 put() 方法：如果队列为空 take() 将阻塞，直到队列中有内容；如果队列为满 put() 将阻塞，直到队列有空闲位置。\n\n### 2.主要方法\n\n* boolean add(E e); 增加一个元索，如果设置成功返回true, 否则返回false。\n* boolean offer(E e); 添加一个元素，如果设置成功返回true, 否则返回false. e的值不能为空，否则抛出空指针异常。\n* void put(E e);  添加一个元素，如果队列满，则**阻塞**。\n* offer(E e, long timeout, TimeUnit unit); 在设定时间内添加一个元素并返回true，如果队列已满，则返回false\n* E take(); 移除并返回队列头部的元素，如果队列为空，则**阻塞**。\n* E poll(long timeout, TimeUnit unit);在给定的时间里，移除并返问队列头部的元6素，时间到了直接调用普通的poll方法，为null则直接返回null。\n* int remainingCapacity(); 获取队列中剩余的空间。\n* boolean remove(Object o); 从队列中移除指定的值。\n* int drainTo(Collection<? super E> c); 将队列中值，全部移除，并发设置到给定的集合中。\n* int drainTo(Collection<? super E> c, int maxElements);指定数量限制将队列中值，全部移除，并发设置到给定的集合中。\n  \n### ArrayBlockingQueue\n\n基于数组的阻塞队列实现，初始化必须指定大小。ArrayBlockingQueue在生产者放入数据和消费者获取数据，都是共用同一个锁对象，由此也意味着两者无法真正并行运行，这点尤其不同于LinkedBlockingQueue；在创建ArrayBlockingQueue时，可以控制对象的内部锁是否采用公平锁，默认采用非公平锁。\n\n```java\npublic class ArrayBlockingQueue<E> extends AbstractQueue<E>\n        implements BlockingQueue<E>, java.io.Serializable {\n    final Object[] items;\n    int takeIndex;//队列尾部在数组的位置\n    int putIndex;//队列头部在数组的位置\n    int count;//队列元素长度\n    final ReentrantLock lock;\n    private final Condition notEmpty;\n    private final Condition notFull;\n    public ArrayBlockingQueue(int capacity, boolean fair) {\n        if (capacity <= 0)\n            throw new IllegalArgumentException();\n        this.items = new Object[capacity];\n        lock = new ReentrantLock(fair);\n        notEmpty = lock.newCondition();\n        notFull =  lock.newCondition();\n    }\n    //...\n}\n```\n\n### LinkedBlockingQueue\n\n基于链表实现的阻塞队列，如果构造一个LinkedBlockingQueue对象，而没有指定其容量大小，LinkedBlockingQueue会默认一个类似无限大小的容量（Integer.MAX_VALUE），这样的话，如果生产者的速度一旦大于消费者的速度，也许还没有等到队列满阻塞产生，系统内存就有可能已被消耗殆尽了。\n\n### DelayQueue\n\nDelayQueue中的元素只有当其指定的延迟时间到了，才能够从队列中获取到该元素。DelayQueue是一个没有大小限制的队列，因此往队列中插入数据的操作（生产者）永远不会被阻塞，而只有获取数据的操作（消费者）才会被阻塞。\n\n使用场景：\n* 缓存系统的设计：可以用DelayQueue保存缓存元素的有效期，使用一个线程循环查询DelayQueue，一旦能从DelayQueue中获取元素时，表示缓存有效期到了。\n* 定时任务调度：使用DelayQueue保存当天将会执行的任务和执行时间，一旦从DelayQueue中获取到任务就开始执行。（Timer就是使用DelayQueue实现的）\n\n```java\nprivate final transient ReentrantLock lock = new ReentrantLock();\nprivate final PriorityQueue<E> q = new PriorityQueue<E>();\nprivate Thread leader = null;\nprivate final Condition available = lock.newCondition();\n```\n以支持优先级的PriorityQueue无界队列作为一个容器，因为元素都必须实现Delayed接口，可以根据元素的过期时间来对元素进行排列，因此，先过期的元素会在队首，每次从队列里取出来都是最先要过期的元素。（不这样排序无法保证最早过期的元素被获取）\n**详细使用见代码BlockingQueueTest.java**\n\n### PriorityBlockingQueue\n\n基于优先级的阻塞队列，默认自然排序，也可以自定义实现compareTo()方法来指定元素排序规则，不会阻塞数据生产者，只会在没有可消费的数据时，阻塞数据的消费者。注意当生产者的速度大于消费者时，可能会耗尽堆内存空间。\n\n### SynchronousQueue\n\n 一个不存储元素的阻塞队列，每一个put操作必须等待take操作，否则不能添加元素。支持公平锁和非公平锁。SynchronousQueue的一个使用场景是在线程池里。Executors.newCachedThreadPool()就使用了SynchronousQueue，这个线程池根据需要（新任务到来时）创建新的线程，如果有空闲线程则会重复使用，线程空闲了60秒后会被回收。\n\n### LinkedTransferQueue\n\n一个由链表结构组成的无界阻塞队列，相当于其它队列，LinkedTransferQueue队列多了transfer和tryTransfer方法。\n\n### LinkedBlockingDeque\n\n一个由链表结构组成的双向阻塞队列。队列头部和尾部都可以添加和移除元素，多线程并发时，可以将锁的竞争最多降到一半。\n\n## ForkJoin\n\n是Java7提供的原生多线程并行处理框架，其基本思想是将大任务分割成小任务，最后将小任务聚合起来得到结果。使用工作窃取（work-stealing）算法，主要用于实现“分而治之”。它非常类似于HADOOP提供的MapReduce框架，只是MapReduce的任务可以针对集群内的所有计算节点，可以充分利用集群的能力完成计算任务。ForkJoin更加类似于单机版的MapReduce。\n\n* ForkJoinTask:要使用ForkJoin框架，必须首先创建一个ForkJoin任务。它提供在任务中执行fork()和join的操作机制，通常不直接继承ForkjoinTask类，只需要直接继承其子类。\n    * RecursiveAction: 用于没有返回值的任务\n    * RecursiveTask: 用于有返回值的任务\n* ForkJoinPool：task要通过ForkJoinPool来执行，分割的子任务也会添加到当前工作线程的双端队列中，进入队列的头部。当一个工作线程中没有任务时，会从其他工作线程的队列尾部获取一个任务。线程数量取决于 CPU 核数。\n\n### 工作窃取（work-stealing）算法\n\nForkJoinPool 实现了工作窃取算法来提高 CPU 的利用率。每个线程都维护了一个双端队列，用来存储需要执行的任务。工作窃取算法允许空闲的线程从其它线程的双端队列中窃取一个任务来执行。窃取的任务必须是最晚的任务，避免和队列所属线程发生竞争。\n\n### 使用ForkJoin\n```java\nstatic class MyRecursiveTask extends RecursiveTask<Long>{\n\n    public static final int threshold = 10000;\n    private Long start;\n    private Long end;\n\n    @Override\n    protected Long compute() {\n        Long length = end - start;\n        if(length < threshold){\n            Long sum = 0L;\n            for (Long i = start;i<=end;i++){\n                sum += i;\n            }\n            return sum;\n        }else {\n            Long middle = (end + start)/2;//计算的两个值的中间值\n            MyRecursiveTask startTask = new MyRecursiveTask(start,middle);\n            MyRecursiveTask endTask = new MyRecursiveTask(middle+1,end);\n            startTask.fork();\n            endTask.fork();\n            return startTask.join()+endTask.join();\n        }\n    }\n\n    public MyRecursiveTask(Long start, Long end) {\n        this.start = start;\n        this.end = end;\n    }\n}\n\npublic static void test1(){\n    Long start = System.currentTimeMillis();\n    MyRecursiveTask myRecursiveTask = new MyRecursiveTask(0L,100000000L);\n    ForkJoinPool forkJoinPool = new ForkJoinPool();\n    ForkJoinTask<Long> submit = forkJoinPool.submit(myRecursiveTask);\n    //Long invoke = forkJoinPool.invoke(myRecursiveTask);\n    Long aLong = null;\n    try {\n        aLong = submit.get();\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    Long end = System.currentTimeMillis();\n    System.out.println(\"test1 = \" + aLong+\"  time: \" + (end - start));\n}\n```\n注意：\nForkJoinPool 使用submit 或 invoke 提交的区别：invoke是同步执行，调用之后需要等待任务完成，才能执行后面的代码；submit是异步执行，只有在Future调用get的时候会阻塞。\n\n# 十、Java内存模型\n\nJava 内存模型试图屏蔽各种硬件和操作系统的内存访问差异，以实现让 Java 程序在各种平台下都能达到一致的内存访问效果。\n\n## 主内存与工作内存\n\n处理器上的寄存器的读写的速度比内存快几个数量级，为了解决这种速度矛盾，在它们之间加入了高速缓存。\n![内存模型](https://note.youdao.com/yws/api/personal/file/338143C994F2409484C0946B9DD30A86?method=download&shareKey=780561d289ee566ee714f4482a8e8262)\n所有的变量都存储在主内存中，每个线程还有自己的工作内存，工作内存存储在高速缓存或者寄存器中，保存了该线程使用的变量的主内存副本拷贝。\n\n线程只能直接操作工作内存中的变量，不同线程之间的变量值传递需要通过主内存来完成。\n\n缓存一致性问题：多个缓存共享同一块主内存区域，那么多个缓存的数据可能会不一致。\n\n## 内存间的交互操作\n\nJava内存模型定义了8个操作完成主内存和工作内存的交互。\n![内存间的交互操作](https://note.youdao.com/yws/api/personal/file/713E11ECE9D846679A34EDFA897A5448?method=download&shareKey=a3be21c07378a44e1d967d55c1554f1e)\n* read：把一个变量值从主内存传输到工作内存中。\n* load：在read之后执行，把read获取的值放到工作内存变量副本中。\n* use：把工作内存中一个变量的值传递给执行引擎。\n* assign：把一个从执行引擎接收到的值赋给工作内存的变量。\n* store：把工作内存的值传送到主内存中。\n* write：在store之后，把store得到的值放入主内存变量中。\n* lock：作用于主内存的变量\n* unlock\n\n## 内存模型三大特性\n\n### 1.原子性\nJava 内存模型保证了 read、load、use、assign、store、write、lock 和 unlock 单独操作具有原子性。但没有被 volatile 修饰的变量load、store、read 和 write 操作可以不具备原子性。\n解决方法：\n1.使用原子类，如AtomicInteger \n2.使用 synchronized 互斥锁来保证操作的原子性\n3.使用lock 和 unlock\n\n### 2.可见性\n\n可见性是指当一个线程修改了变量值时，其他线程能够立即得知这个修改。Java 内存模型是通过在变量修改后将新值同步回主内存，在变量读取前从主内存刷新变量值来实现可见性的。\n\n主要有三种实现可见性的方式：\n* volatile（不能保证原子性）\n* synchronized，对一个变量执行 unlock 操作之前，必须把变量值同步回主内存。\n* final，被 final 关键字修饰的字段在构造器中一旦初始化完成，并且没有发生 this 逃逸（其它线程通过 this 引用访问到初始化了一半的对象），那么其它线程就能看见 final 字段的值。\n\n### 3.有序性\n有序性是指：在本线程内观察，所有操作都是有序的。在一个线程观察另一个线程，所有操作都是无序的，无序是因为发生了指令重排序。在 Java 内存模型中，允许编译器和处理器对指令进行重排序，重排序过程不会影响到单线程程序的执行，却会影响到多线程并发执行的正确性。\n\nvolatile 关键字通过添加内存屏障的方式来禁止指令重排，即重排序时不能把后面的指令放到内存屏障之前。\n\n也可以通过 synchronized 来保证有序性，它保证每个时刻只有一个线程执行同步代码，相当于是让线程顺序执行同步代码。\n\n## 先行发生原则\n\nJVM规定的先行发生原则，让一个操作无需控制就可以先于另一个操作发生。\n\n* 单一线程原则(Single Thread rule)：在一个线程内，在程序前面的操作先行发生于后面的操作。\n* 管程锁定规则(Monitor Lock Rule)：一个 unlock 操作先行发生于后面对同一个锁的 lock 操作。\n* volatile变量规则(Volatile Variable Rule)：对一个 volatile 变量的写操作先行发生于后面对这个变量的读操作。\n* 线程启动规则(Thread Start Rule)：Thread 对象的 start() 方法调用先行发生于此线程的每一个动作。\n* 线程加入规则(Thread Join Rule)：Thread 对象的结束先行发生于 join() 方法返回。\n* 线程中断规则(Thread Interruption Rule)：对线程 interrupt() 方法的调用先行发生于被中断线程的代码检测到中断事件的发生，可以通过 interrupted() 方法检测到是否有中断发生。\n* 对象终结规则()：一个对象的初始化完成（构造函数执行结束）先行发生于它的 finalize(Finalizer Rule)： 方法的开始。\n* 传递性(Transitivity)：如果操作 A 先行发生于操作 B，操作 B 先行发生于操作 C，那么操作 A 先行发生于操作 C。\n\n# 十一、线程安全\n\n多个线程不管以何种方式访问某个类，并且在主调代码中不需要进行同步，都能表现正确的行为。\n\n## 不可变\n\n不可变（Immutable）的对象一定是线程安全的，不需要再采取任何的线程安全保障措施。\n不可变类型：\n* final 关键字修饰的基本数据类型\n* String\n* 枚举类型\n* Number 部分子类，如 Long 和 Double 等数值包装类型，BigInteger 和 BigDecimal 等大数据类型。但同为 Number 的原子类 AtomicInteger 和 AtomicLong 则是可变的。\n* 对于集合类型，可以使用 Collections.unmodifiableXXX() 方法来获取一个不可变的集合。\n```java\nMap<String, Integer> map = new HashMap<>();\nMap<String, Integer> unmodifiableMap = Collections.unmodifiableMap(map);\nunmodifiableMap.put(\"a\", 1);//会抛出异常java.lang.UnsupportedOperationException\n```\n## 互斥同步\n\nsynchronized和ReentrantLock\n\n## 非阻塞同步\n\n互斥同步属于阻塞同步，线程阻塞和唤醒会带来性能问题。\n\n### 1.CAS\n\n硬件支持的原子性操作最典型的是：比较并交换（Compare-and-Swap，CAS）。\n\n### 2.AtomicInteger\n\nJ.U.C 包里面的整数原子类 AtomicInteger 的方法调用了 Unsafe 类的 CAS 操作。\n\n### 3.ABA问题\n\nJ.U.C 包提供了一个带有标记的原子引用类 AtomicStampedReference 来解决这个问题，它可以通过控制变量值的版本来保证 CAS 的正确性。大部分情况下 ABA 问题不会影响程序并发的正确性，如果需要解决 ABA 问题，改用传统的互斥同步可能会比原子类更高效。\n\n## 无同步方案\n要保证线程安全，并不是一定就要进行同步。如果一个方法本来就不涉及共享数据，那它自然就无须任何同步措施去保证正确性。\n\n### 1.栈封闭\n多个线程访问同一个方法的局部变量时，不会出现线程安全问题\n\n### 2.线程本地存储（Thread Local Storage）\n使用 java.lang.ThreadLocal 类来实现线程本地存储功能\n```java\nThreadLocal threadLocal = new ThreadLocal();\nThread thread1 = new Thread(() -> {\n    threadLocal.set(1);\n    try {\n        Thread.sleep(1000);\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n    System.out.println(threadLocal.get());\n    threadLocal.remove();\n});\nThread thread2 = new Thread(() -> {\n    threadLocal.set(2);\n    threadLocal.remove();\n});\nthread1.start();\nthread2.start();\n//输出 1\n```\n每个 Thread 都有一个 ThreadLocal.ThreadLocalMap 对象。当调用一个 ThreadLocal 的 set(T value) 方法时，先得到当前线程的 ThreadLocalMap 对象，然后将 ThreadLocal->value 键值对插入到该 Map 中。\nThreadLockl的set方法\n```java\npublic void set(T value) {\n    Thread t = Thread.currentThread();\n    ThreadLocalMap map = getMap(t);\n    if (map != null)\n        map.set(this, value);\n    else\n        createMap(t, value);\n}\n```\nget()方法类似\n```java\npublic T get() {\n    Thread t = Thread.currentThread();\n    ThreadLocalMap map = getMap(t);\n    if (map != null) {\n        ThreadLocalMap.Entry e = map.getEntry(this);\n        if (e != null) {\n            @SuppressWarnings(\"unchecked\")\n            T result = (T)e.value;\n            return result;\n        }\n    }\n    return setInitialValue();\n}\n```\n### 3.可重入代码(Reentry code)\n\n可重入代码(Reentry code)也叫纯代码(Pure code)是一种允许多个进程同时访问的代码。为了使各进程所执行的代码完全相同，故不允许任何进程对其进行修改。程序在运行过程中可以被打断，并由开始处再次执行，并且在合理的范围内（多次重入，而不造成堆栈溢出等其他问题），程序可以在被打断处继续执行，且执行结果不受影响。\n\n# 十二、锁优化\n\n这里的锁优化主要是指 JVM 对 synchronized 的优化。\n\n## 自旋锁\n\n自旋锁的思想是让一个线程在请求一个共享数据的锁时执行忙循环（自旋）一段时间，如果在这段时间内能获得锁，就可以避免进入阻塞状态。在 JDK 1.6 中引入了自适应的自旋锁。自适应意味着自旋的次数不再固定了，而是由前一次在同一个锁上的自旋次数及锁的拥有者的状态来决定。\n\n## 锁消除\n\n锁消除是指对于被检测出不可能存在竞争的共享数据的锁进行消除。\n\n## 锁粗化\n\n如果虚拟机探测到由有一串零碎的操作都对同一个对象加锁，将会把加锁的范围扩展（粗化）到整个操作序列的外部。\n\n## 轻量级锁\n\nJDK 1.6 引入了偏向锁和轻量级锁，从而让锁拥有了四个状态：无锁状态（unlocked）、偏向锁状态（biasble）、轻量级锁状态（lightweight locked）和重量级锁状态（inflated）。\n\n## 偏向锁\n\n偏向锁的思想是偏向于让第一个获取锁对象的线程，这个线程在之后获取该锁就不再需要进行同步操作，甚至连 CAS 操作也不再需要。\n\n# 十三、多线程开发良好的实践\n\n* 给线程起个有意义的名字，这样可以方便找 Bug。\n缩小同步范围，从而减少锁争用。例如对于 synchronized，应该尽量使用同步块而不是同步方法。\n\n* 多用同步工具少用 wait() 和 notify()。首先，CountDownLatch, CyclicBarrier, Semaphore 和 Exchanger 这些同步类简化了编码操作，而用 wait() 和 notify() 很难实现复杂控制流；其次，这些同步类是由最好的企业编写和维护，在后续的 JDK 中还会不断优化和完善。\n* 使用 BlockingQueue 实现生产者消费者问题。\n多用并发集合少用同步集合，例如应该使用 ConcurrentHashMap 而不是 Hashtable。\n\n* 使用本地变量和不可变类来保证线程安全。\n\n* 使用线程池而不是直接创建线程，这是因为创建线程代价很高，线程池可以有效地利用有限的线程来启动任务。\n\n# 参考资料\n\n- [Java并发](https://github.com/CyC2018/CS-Notes/blob/master/docs/notes/Java%20%E5%B9%B6%E5%8F%91.md)\n\n","slug":"java并发","published":1,"updated":"2019-04-11T01:37:39.471Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuc90mc70002v4uo0fnl6fna","content":"<h1 id=\"一、线程状态的转换\"><a href=\"#一、线程状态的转换\" class=\"headerlink\" title=\"一、线程状态的转换\"></a>一、线程状态的转换</h1><p><img src=\"https://note.youdao.com/yws/api/personal/file/3782D564310F4EFD9D604DF102DD2897?method=download&amp;shareKey=9986c9632ae622172333d92c9be73583\" alt=\"线程转换\"></p>\n<h2 id=\"新建（New）\"><a href=\"#新建（New）\" class=\"headerlink\" title=\"新建（New）\"></a>新建（New）</h2><p>创建后尚未运行。</p>\n<h2 id=\"可运行（Runnable）\"><a href=\"#可运行（Runnable）\" class=\"headerlink\" title=\"可运行（Runnable）\"></a>可运行（Runnable）</h2><p>可能正在运行，也可能正在等待CPU时间片。<br>包括操作系统线程状态中的Running和Ready。<br>Running：线程获取CPU权限进行执行。</p>\n<h2 id=\"阻塞（Blocking）\"><a href=\"#阻塞（Blocking）\" class=\"headerlink\" title=\"阻塞（Blocking）\"></a>阻塞（Blocking）</h2><p>等待获取一个排它锁，如果其线程释放了锁就会结束此状态。</p>\n<h2 id=\"无限期等待（Waiting）\"><a href=\"#无限期等待（Waiting）\" class=\"headerlink\" title=\"无限期等待（Waiting）\"></a>无限期等待（Waiting）</h2><p>等待其它线程显式地唤醒，否则不会被分配 CPU 时间片。<br>|进入方法|退出方法|<br>|—|—|<br>|没有设置 Timeout 参数的 Object.wait() 方法|Object.notify() / Object.notifyAll()|<br>|没有设置 Timeout 参数的 Thread.join() 方法|被调用的线程执行完毕|<br>|LockSupport.park() 方法|LockSupport.unpark(Thread)|</p>\n<h2 id=\"期限等待（Timed-Waiting）\"><a href=\"#期限等待（Timed-Waiting）\" class=\"headerlink\" title=\"期限等待（Timed Waiting）\"></a>期限等待（Timed Waiting）</h2><p>无需等待其他线程显示地唤醒，在一定时间之后会被系统自动唤醒。</p>\n<p>调用 Thread.sleep() 方法使线程进入限期等待状态时，常常用“使一个线程睡眠”进行描述。</p>\n<p>调用 Object.wait() 方法使线程进入限期等待或者无限期等待时，常常用“挂起一个线程”进行描述。</p>\n<p>睡眠和挂起是用来描述行为，而阻塞和等待用来描述状态。</p>\n<p>阻塞和等待的区别在于，阻塞是被动的，它是在等待获取一个排它锁。而等待是主动的，通过调用 Thread.sleep() 和 Object.wait() 等方法进入。<br>|进入方法|退出方法|<br>|—|—|<br>|Thread.sleep() 方法|时间结束|<br>|设置了 Timeout 参数的 Object.wait() 方法|时间结束 / Object.notify() / Object.notifyAll()|<br>|设置了 Timeout 参数的Thread.join() 方法|时间结束 / 被调用的线程执行完毕|<br>|LockSupport.parkNanos() 方法|LockSupport.unpark(Thread)|<br>|LockSupport.parkUntil() 方法|LockSupport.unpark(Thread)|</p>\n<h2 id=\"死亡（Terminated）\"><a href=\"#死亡（Terminated）\" class=\"headerlink\" title=\"死亡（Terminated）\"></a>死亡（Terminated）</h2><p>可以是线程结束任务之后自己结束，或者产生了异常而结束。</p>\n<h1 id=\"二、使用线程\"><a href=\"#二、使用线程\" class=\"headerlink\" title=\"二、使用线程\"></a>二、使用线程</h1><p>三种使用线程的方式：</p>\n<ul>\n<li><p>实现Runnable接口；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行</span></span><br><span class=\"line\">MyRunnable myRunnable = <span class=\"keyword\">new</span> MyRunnable();</span><br><span class=\"line\">Thread thread1 = <span class=\"keyword\">new</span> Thread(myRunnable);</span><br><span class=\"line\">thread1.start();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>实现Callable接口（可以有返回值）；</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyCallable</span> <span class=\"keyword\">implements</span> <span class=\"title\">Callable</span>&lt;<span class=\"title\">Integer</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Integer i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 执行</span></span><br><span class=\"line\">MyCallable myCallable = <span class=\"keyword\">new</span> MyCallable();</span><br><span class=\"line\">FutureTask&lt;Integer&gt; ft = <span class=\"keyword\">new</span> FutureTask&lt;&gt;(myCallable);</span><br><span class=\"line\">Thread thread2 = <span class=\"keyword\">new</span> Thread(ft);</span><br><span class=\"line\">thread2.start();</span><br><span class=\"line\"><span class=\"keyword\">while</span> (!ft.isDone())&#123;</span><br><span class=\"line\">    System.out.println(ft.get());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>继承Thread类。</p>\n</li>\n</ul>\n<p>实现Runnable和Callable接口的类不是真正意义上的线程，还需要通过Thread来调用。可以说任务是通过线程驱动从而执行的。</p>\n<h2 id=\"实现接口-VS-继承Thread\"><a href=\"#实现接口-VS-继承Thread\" class=\"headerlink\" title=\"实现接口 VS 继承Thread\"></a>实现接口 VS 继承Thread</h2><p>实现会更好一些，原因：</p>\n<ul>\n<li>Java不支持多继承，继承Thread不能再去继承别的类，但是可以实现多个接口。</li>\n<li>类可能只要求可执行就行，继承整个Thread类开销过大。</li>\n</ul>\n<h1 id=\"四、基础线程机制\"><a href=\"#四、基础线程机制\" class=\"headerlink\" title=\"四、基础线程机制\"></a>四、基础线程机制</h1><h2 id=\"Executor\"><a href=\"#Executor\" class=\"headerlink\" title=\"Executor\"></a>Executor</h2><p>线程池，管理多个线程执行，而无需程序员显式地管理线程的生命周期。</p>\n<p>主要有三种Executor：</p>\n<ul>\n<li>CachedThreadPool: 一个任务创建一个线程。</li>\n<li>FixedThreadPool: 固定大小的线程池。</li>\n<li>SingleThreadExecutor：相当于大小为 1 的 FixedThreadPool。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService cachedThreadPool = Executors.newCachedThreadPool();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    cachedThreadPool.execute(<span class=\"keyword\">new</span> MyRunnable());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">cachedThreadPool.shutdown();</span><br></pre></td></tr></table></figure>\n<h2 id=\"Daemon\"><a href=\"#Daemon\" class=\"headerlink\" title=\"Daemon\"></a>Daemon</h2><p>守护线程是程序运行时在后台提供服务的线程，不属于程序中不可或缺的部分，比如垃圾回收线程。</p>\n<p>当所有的非守护线程结束时，程序也就结束了，同时也会杀死进程中的所有守护线程。<br>main() 属于非守护线程。</p>\n<p>通过使用Thread对象的setDeamon(true)方法将线程设置为守护线程，注意：</p>\n<ol>\n<li>thread.setDeamon(true)必须在thread.start()之前设置，否则会抛出IllegalThreadStateException异常。不可以将正在运行的线程设置为守护线程。</li>\n<li>在Deamon线程中产生的线程也是Deamon的。</li>\n<li>守护线程应该永远不去访问固有资源，如文件、数据库，因为它会在任何时候甚至在一个操作的中间发生中断。</li>\n</ol>\n<h2 id=\"sleep\"><a href=\"#sleep\" class=\"headerlink\" title=\"sleep()\"></a>sleep()</h2><p>Thread.sleep(millisec) 方法会休眠当前正在执行的线程，millisec 单位为毫秒。</p>\n<p>sleep() 可能会抛出 InterruptedException，因为异常不能跨线程传播回 main() 中，因此必须在本地进行处理。线程中抛出的其它异常也同样需要在本地进行处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"yield\"><a href=\"#yield\" class=\"headerlink\" title=\"yield()\"></a>yield()</h2><p><code>Thread.yield();</code>译为线程让步，让当前线程从运行状态进入就绪状态，它会把CPU执行的时间让掉，让其他或者<strong>自己</strong>线程执行。</p>\n<h1 id=\"四、线程的中断\"><a href=\"#四、线程的中断\" class=\"headerlink\" title=\"四、线程的中断\"></a>四、线程的中断</h1><p>一个线程执行完毕之后会自动结束，如果在运行中发生异常也会提前结束。</p>\n<h2 id=\"中断协议\"><a href=\"#中断协议\" class=\"headerlink\" title=\"中断协议\"></a>中断协议</h2><p>每个线程都有一个与线程是否已中断的相关联的Boolean属性，用于表示线程的中断状态（interrupted status）。中断状态初始时为false；当一个线程A通过调用threadB.interrupt()中断线程B时，会出现以下两种情况之一:</p>\n<ul>\n<li>如果那个线程B在执行一个低级可中断阻塞方法，例如 Thread.sleep()、 Thread.join() 或 Object.wait()，那么它将取消阻塞并抛出 InterruptedException。但是不能中断 I/O 阻塞和 synchronized 锁阻塞。</li>\n<li>否则，interrupt()只是设置线程B的中断状态。 在被中断线程B中运行的代码以后可以轮询中断状态，看看它是否被请求停止正在做的事情。中断状态可以通过 Thread.isInterrupted() 来读取，并且可以通过一个名为 Thread.interrupted() 的操作读取和清除。</li>\n</ul>\n<h2 id=\"interrupt\"><a href=\"#interrupt\" class=\"headerlink\" title=\"interrupt()\"></a>interrupt()</h2><p>发送中断信号<br>对于以下代码，在 main() 中启动一个线程之后再中断它，由于线程中调用了 Thread.sleep() 方法，因此会抛出一个 InterruptedException，从而提前结束线程，不执行之后的语句。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Thread thread = <span class=\"keyword\">new</span> Thread()&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"Thread run\"</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    thread.start();</span><br><span class=\"line\">    thread.interrupt();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*输出</span></span><br><span class=\"line\"><span class=\"comment\">//java.lang.InterruptedException: sleep interrupted</span></span><br><span class=\"line\"><span class=\"comment\">at java.lang.Thread.sleep(Native Method)</span></span><br><span class=\"line\"><span class=\"comment\">at com.wkk.demo.javaconcurrent.InterruptTest$1.run(InterruptTest.java:15)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"interrupted\"><a href=\"#interrupted\" class=\"headerlink\" title=\"interrupted()\"></a>interrupted()</h2><p>获取线程是否已经中断。在线程中可以通过循环判断是否发出中断信号，决定当前线程是否停止。</p>\n<h2 id=\"Executor的中断操作\"><a href=\"#Executor的中断操作\" class=\"headerlink\" title=\"Executor的中断操作\"></a>Executor的中断操作</h2><p>调用Executor的shutdown()方法会等待线程都执行完毕之后再关闭，但是调用shutdownNow()方法，相当于调用了每个线程的interrupt()方法。</p>\n<p>只想中断一个线程，可以通过使用submit()方法提交一个线程，它会返回一个 Future&lt;?&gt; 对象，通过调用该对象的 cancel(true) 方法就可以中断线程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Future&lt;?&gt; future = executorService.submit(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ..</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">future.cancel(<span class=\"keyword\">true</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Future简介\"><a href=\"#Future简介\" class=\"headerlink\" title=\"Future简介\"></a>Future简介</h3><p>Future接口用于获取异步计算的结果，可通过get()获取结果、cancel()取消、isDone()判断是否完成等操作。<a href=\"https://blog.csdn.net/codershamo/article/details/51901057\" target=\"_blank\" rel=\"noopener\">源码参考</a><br>方法：</p>\n<ul>\n<li>V get()： 获取结果，若无结果会阻塞至异步计算完成</li>\n<li>V get(long timeOut, TimeUnit unit)：获取结果，超时返回null</li>\n<li>boolean isDone()：执行结束（完成/取消/异常）返回true</li>\n<li>boolean isCancelled()：任务完成前被取消返回true</li>\n<li>boolean cancel(boolean mayInterruptRunning)：取消任务，未开始或已完成返回false，参数表示是否中断执行中的线程</li>\n</ul>\n<p>当cancel()方法参数为false时，只能取消还没有开始的任务，若任务已经开始了，就任由其运行下去<br>当创建了Future实例，任务可能有以下三种状态：</p>\n<ul>\n<li>等待状态。此时调用cancel()方法不管传入true还是false都会标记为取消，任务依然保存在任务队列中，但当轮到此任务运行时会直接跳过。</li>\n<li>完成状态。此时cancel()不会起任何作用，因为任务已经完成了。</li>\n<li>运行中。此时传入true会中断正在执行的任务，传入false则不会中断。</li>\n</ul>\n<h3 id=\"CAS和Unsafe类\"><a href=\"#CAS和Unsafe类\" class=\"headerlink\" title=\"CAS和Unsafe类\"></a>CAS和Unsafe类</h3><p><a href=\"https://blog.csdn.net/javazejian/article/details/72772470\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n<h1 id=\"五、互斥同步\"><a href=\"#五、互斥同步\" class=\"headerlink\" title=\"五、互斥同步\"></a>五、互斥同步</h1><p>Java提供了两种锁机制来控制对共享资源的互斥访问，一个是JVM实现的synchronized，一个是JDK实现的ReentrantLock。</p>\n<h2 id=\"synchronized\"><a href=\"#synchronized\" class=\"headerlink\" title=\"synchronized\"></a>synchronized</h2><p><strong>1. 同步一个代码块</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//..</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>只能实现同一对象对代码块的访问互斥。<br><strong>2. 同步一个方法</strong><br><strong>3. 同步一个类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(SynchronizedExample.class))&#123;</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>作用于整个类，也就是说两个线程调用同一个类的不同对象上的这种同步语句，也会进行同步。<br><strong>4. 同步一个静态方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>作用于整个类</p>\n<h3 id=\"对象锁（monitor）机制\"><a href=\"#对象锁（monitor）机制\" class=\"headerlink\" title=\"对象锁（monitor）机制\"></a>对象锁（monitor）机制</h3><p>执行同步代码块后首先要先执行monitorenter指令，退出的时候执行monitorexit指令。使用Synchronized进行同步，其关键就是必须要对对象的监视器monitor进行获取，当线程获取monitor后才能继续往下执行，否则就只能等待。而这个获取的过程是互斥的，即同一时刻只有一个线程能够获取到monitor。Synchronized先天具有重入性。每个对象拥有一个计数器，当线程获取该对象锁后，计数器就会加一，释放锁后就会将计数器减一。</p>\n<p>任意一个对象都拥有自己的监视器，当这个对象由同步块或者这个对象的同步方法调用时，执行方法的线程必须先获取该对象的监视器才能进入同步块和同步方法，如果没有获取到监视器的线程将会被阻塞在同步块和同步方法的入口处，进入到BLOCKED状态。<br><img src=\"https://note.youdao.com/yws/api/personal/file/72D215D872BC4B48BC9FB226862858EB?method=download&amp;shareKey=11aaa546f8909b020c771afb5a860dd5\" alt=\"对象锁获取\"></p>\n<blockquote>\n<p>引申 <a href=\"https://juejin.im/post/5ae6d309518825673123fd0e#heading-3\" target=\"_blank\" rel=\"noopener\">happens-before规则</a></p>\n</blockquote>\n<h3 id=\"synchronized优化\"><a href=\"#synchronized优化\" class=\"headerlink\" title=\"synchronized优化\"></a>synchronized优化</h3><p>synchronized最大的特征就是在同一时刻只有一个线程能够获得对象的监视器（monitor），从而进入到同步代码块或者同步方法之中，即表现为互斥性（排它性）。一次只能一个线程效率低下</p>\n<h4 id=\"CAS操作\"><a href=\"#CAS操作\" class=\"headerlink\" title=\"CAS操作\"></a>CAS操作</h4><p>CAS操作（又称为无锁操作）是一种乐观锁策略，它假设所有线程访问共享资源的时候不会出现冲突，既然不会出现冲突自然而然就不会阻塞其他线程的操作。通过使用compare and swap（比较交换），解决冲突。</p>\n<p>CAS比较交换的过程可以通俗的理解为CAS(V,O,N)，包含三个值分别为：V 内存地址存放的实际值；O 预期的值（旧值）；N 更新的新值。如果与O相同就表明没有更改，直接更新为N，如果如O不相等，更新失败。</p>\n<p>CAS的实现需要硬件指令集的支撑，在JDK1.5后虚拟机才可以使用处理器提供的CMPXCHG指令实现。</p>\n<blockquote>\n<p>ABA问题：通过变量值加入版本号解决<br><a href=\"https://juejin.im/post/5ae6dc04f265da0ba351d3ff#heading-5\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n</blockquote>\n<h2 id=\"ReentrantLock\"><a href=\"#ReentrantLock\" class=\"headerlink\" title=\"ReentrantLock\"></a>ReentrantLock</h2><p>ReentrantLock 是 java.util.concurrent（J.U.C）包中的锁。支持重入性，表示能够对共享资源能够重复加锁，即当前线程获取该锁再次获取不会被阻塞。ReentrantLock还支持公平锁和非公平锁两种方式。</p>\n<h3 id=\"1-主要方法\"><a href=\"#1-主要方法\" class=\"headerlink\" title=\"1.主要方法\"></a>1.主要方法</h3><ul>\n<li>lock();  获得锁</li>\n<li>lockInterruptibly();  获得锁，但优先响应中断</li>\n<li>tryLock();    尝试获得锁，成功返回true,否则false，该方法不等待，立即返回</li>\n<li>tryLock(long time,TimeUnit unit);   在给定时间内尝试获得锁</li>\n<li>unlock();     释放锁</li>\n</ul>\n<h3 id=\"2-重入性的实现原理\"><a href=\"#2-重入性的实现原理\" class=\"headerlink\" title=\"2.重入性的实现原理\"></a>2.重入性的实现原理</h3><p>要想支持重入性，就要解决两个问题：1. 在线程获取锁的时候，如果已经获取锁的线程是当前线程的话则直接再次获取成功；2. 由于锁会被获取n次，那么只有锁在被释放同样的n次之后，该锁才算是完全释放成功。</p>\n<p>以非公平锁为例，判断当前线程能否获得锁为例，核心方法为nonfairTryAcquire：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">nonfairTryAcquire</span><span class=\"params\">(<span class=\"keyword\">int</span> acquires)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Thread current = Thread.currentThread();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = getState();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (compareAndSetState(<span class=\"number\">0</span>, acquires)) &#123;</span><br><span class=\"line\">            setExclusiveOwnerThread(current);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> nextc = c + acquires;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextc &lt; <span class=\"number\">0</span>) <span class=\"comment\">// overflow</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(<span class=\"string\">\"Maximum lock count exceeded\"</span>);</span><br><span class=\"line\">        setState(nextc);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：如果当前没有线程占用，直接设置当前线程占用。存在线程占用并且占用线程为当前申请锁的线程时，同步状态加1（state+1），返回true。</p>\n<p>以非公平锁为例，释放锁，核心方法为tryRelease：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryRelease</span><span class=\"params\">(<span class=\"keyword\">int</span> releases)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = getState() - releases;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Thread.currentThread() != getExclusiveOwnerThread())</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalMonitorStateException();</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> free = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        free = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        setExclusiveOwnerThread(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setState(c);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> free;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：重入锁的释放必须得等到同步状态为0时锁才算成功释放，否则锁仍未释放。如果锁被获取n次，释放了n-1次，该锁未完全释放返回false，只有被释放n次才算成功释放，返回true。</p>\n<h3 id=\"3-公平锁与非公平锁\"><a href=\"#3-公平锁与非公平锁\" class=\"headerlink\" title=\"3.公平锁与非公平锁\"></a>3.公平锁与非公平锁</h3><p>ReentrantLock支持两种锁：公平锁和非公平锁。何谓公平性，是针对获取锁而言的，如果一个锁是公平的，那么锁的获取顺序就应该符合请求上的绝对时间顺序，满足FIFO（先进先出）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ReentrantLock</span><span class=\"params\">(<span class=\"keyword\">boolean</span> fair)</span> </span>&#123;</span><br><span class=\"line\">    sync = fair ? <span class=\"keyword\">new</span> FairSync() : <span class=\"keyword\">new</span> NonfairSync();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>公平锁的tryAcquire方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryAcquire</span><span class=\"params\">(<span class=\"keyword\">int</span> acquires)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Thread current = Thread.currentThread();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = getState();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!hasQueuedPredecessors() &amp;&amp;</span><br><span class=\"line\">            compareAndSetState(<span class=\"number\">0</span>, acquires)) &#123;</span><br><span class=\"line\">            setExclusiveOwnerThread(current);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> nextc = c + acquires;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextc &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(<span class=\"string\">\"Maximum lock count exceeded\"</span>);</span><br><span class=\"line\">        setState(nextc);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：逻辑与nonfairTryAcquire基本上一直，唯一的不同在于增加了hasQueuedPredecessors的逻辑判断，该方法是用来判断当前节点在同步队列中是否有前驱节点的判断，如果有前驱节点说明有线程比当前线程更早的请求资源，根据公平性，当前线程请求资源失败。如果当前节点没有前驱节点的话，再才有做后面的逻辑判断的必要性。公平锁每次都是从同步队列中的第一个节点获取到锁，而非公平性锁则不一定，有可能刚释放锁的线程能再次获取到锁。</p>\n<blockquote>\n<p>比较</p>\n</blockquote>\n<ul>\n<li>公平锁每次获取锁为同步队列中的第一个节点，保证请求资源时间上的绝对顺序，而非公平锁不保证这一点，可能造成“饥饿”现象。</li>\n<li>公平锁为了保证时间上的绝对顺序，需要频繁的上下文切换，而非公平锁会降低一定的上下文切换，降低性能开销。因此，ReentrantLock默认选择的是非公平锁，则是为了减少一部分上下文切换，保证了系统更大的吞吐量。</li>\n</ul>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/u011521203/article/details/80186741\" target=\"_blank\" rel=\"noopener\">参考</a>；<a href=\"https://www.cnblogs.com/zhimingyang/p/5702752.html\" target=\"_blank\" rel=\"noopener\">源码阅读参考</a></p>\n</blockquote>\n<h3 id=\"4-Condition\"><a href=\"#4-Condition\" class=\"headerlink\" title=\"4.Condition\"></a>4.Condition</h3><p>Lock 替代了 synchronized 方法和语句的使用，Condition（await、signal和signalAll） 替代了 Object（wait、notify 和 notifyAll） 监视器方法的使用。</p>\n<p>新建Condition对象，一个ReentrantLock可以绑定多个Condition对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Condition condition = lock.newCondition();</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>Condition与Object中的wati,notify,notifyAll区别：</p>\n<ul>\n<li><p>Object中的这些方法是和同步锁捆绑使用的；而Condition是需要与互斥锁/共享锁捆绑使用的。</p>\n</li>\n<li><p>Condition它更强大的地方在于：能够更加精细的控制多线程的休眠与唤醒。对于同一个锁，我们可以创建多个Condition，在不同的情况下使用不同的Condition。通过Condition，能明确的指定唤醒读线程。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"synchronized与ReentrantLock的比较\"><a href=\"#synchronized与ReentrantLock的比较\" class=\"headerlink\" title=\"synchronized与ReentrantLock的比较\"></a>synchronized与ReentrantLock的比较</h2><ol>\n<li>锁的实现<br>synchronized是JVM实现的，ReentrantLock是JDK实现的。</li>\n<li>性能<br>新版本 Java 对 synchronized 进行了很多优化，例如自旋锁（就是for循环）等，synchronized 与 ReentrantLock 大致相同。</li>\n<li>等待可中断<br>当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，改为处理其他事情。ReentrantLock 可中断，而 synchronized 不行。</li>\n<li>公平锁<br>synchronized 中的锁是非公平的，ReentrantLock 默认情况下也是非公平的，但是也可以是公平的。</li>\n<li>锁绑定多个条件<br>一个 ReentrantLock 可以同时绑定多个 Condition 对象</li>\n</ol>\n<h2 id=\"使用比较\"><a href=\"#使用比较\" class=\"headerlink\" title=\"使用比较\"></a>使用比较</h2><p>除非使用ReentrantLock的高级功能，否则优先使用synchronized。这是因为 synchronized 是 JVM 实现的一种锁机制，JVM 原生地支持它，而 ReentrantLock 不是所有的 JDK 版本都支持。并且使用 synchronized 不用担心没有释放锁而导致死锁问题，因为 JVM 会确保锁的释放。</p>\n<h1 id=\"六、线程之间的协作\"><a href=\"#六、线程之间的协作\" class=\"headerlink\" title=\"六、线程之间的协作\"></a>六、线程之间的协作</h1><p>多个线程执行任务时，某些线程必须在其他线程执行完成后才能执行，这时候就需要对线程进行协调。</p>\n<h2 id=\"join-方法\"><a href=\"#join-方法\" class=\"headerlink\" title=\"join()方法\"></a>join()方法</h2><p>在线程中调用另一个线程的join()方法,会将当前线程挂起，而不是忙等待，直到目标线程执行结束。</p>\n<h2 id=\"wait-notify-notifyAll\"><a href=\"#wait-notify-notifyAll\" class=\"headerlink\" title=\"wait(),notify(),notifyAll()\"></a>wait(),notify(),notifyAll()</h2><p>调用 wait() 使得线程等待某个条件满足，线程在等待时会被挂起，当其他线程的运行使得这个条件满足时，其它线程会调用 notify() 或者 notifyAll() 来唤醒挂起的线程。</p>\n<p>它们都属于 Object 的一部分，而不属于 Thread。只能用在同步方法或者同步控制块中使用，否则会在运行时抛出 IllegalMonitorStateException。</p>\n<p>使用 wait() 挂起期间，线程会释放锁。这是因为，如果没有释放锁，那么其它线程就无法进入对象的同步方法或者同步控制块中，那么就无法执行 notify() 或者 notifyAll() 来唤醒挂起的线程，造成死锁。</p>\n<h3 id=\"wait-和sleep-的区别\"><a href=\"#wait-和sleep-的区别\" class=\"headerlink\" title=\"wait()和sleep()的区别\"></a>wait()和sleep()的区别</h3><ul>\n<li>wait是Object方法，sleep是Thread的静态方法。</li>\n<li>wait会释放锁，sleep不会。</li>\n</ul>\n<h2 id=\"await-signal-signalAll\"><a href=\"#await-signal-signalAll\" class=\"headerlink\" title=\"await(),signal(),signalAll()\"></a>await(),signal(),signalAll()</h2><p>java.util.concurrent 类库中提供了 Condition 类来实现线程之间的协调，可以在 Condition 上调用 await() 方法使线程等待，其它线程调用 signal() 或 signalAll() 方法唤醒等待的线程。</p>\n<p>只能用在lock.lock()同步时使用，否则会在运行时抛出 IllegalMonitorStateException。</p>\n<p>相比于 wait() 这种等待方式，await() 可以指定等待的条件，因此更加灵活。</p>\n<h1 id=\"七、J-U-C-AQS\"><a href=\"#七、J-U-C-AQS\" class=\"headerlink\" title=\"七、J.U.C - AQS\"></a>七、J.U.C - AQS</h1><p>java.util.concurrent（J.U.C）大大提高了并发性能，AQS 被认为是 J.U.C 的核心。</p>\n<h2 id=\"CountDownLatch\"><a href=\"#CountDownLatch\" class=\"headerlink\" title=\"CountDownLatch\"></a>CountDownLatch</h2><p>用来控制一个线程等待多个线程。维护了一个计数器cnt，每次调用CountDownLatch的实例方法countDown()都会使计数器的值减一，减到0时，那些调用await()方法而等待的线程就会开始执行。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">5</span>;</span><br><span class=\"line\">    CountDownLatch countDownLatch = <span class=\"keyword\">new</span> CountDownLatch(count);</span><br><span class=\"line\">    ExecutorService cachedThreadPool = Executors.newCachedThreadPool();</span><br><span class=\"line\">    cachedThreadPool.execute(()-&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            countDownLatch.await();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"end...\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    cachedThreadPool.execute(()-&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">            countDownLatch.countDown();</span><br><span class=\"line\">            System.out.print(<span class=\"string\">\"count : \"</span>+countDownLatch.getCount()+<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    cachedThreadPool.shutdown();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出 count : 4 count : 3 count : 2 count : 1 count : 0 end...</span></span><br><span class=\"line\"><span class=\"comment\">// 或者输出 count : 4 count : 3 count : 2 count : 1 end...</span></span><br><span class=\"line\"><span class=\"comment\">//         count : 0</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"CyclicBarrier\"><a href=\"#CyclicBarrier\" class=\"headerlink\" title=\"CyclicBarrier\"></a>CyclicBarrier</h2><p>用来控制多个线程互相等待，只有当多个线程都到达时，这些线程才会继续执行。</p>\n<p>和 CountdownLatch 相似，都是通过维护计数器来实现的。线程执行 await() 方法之后计数器会减 1，并进行等待，直到计数器为 0，所有调用 await() 方法而在等待的线程才能继续执行。</p>\n<p>CyclicBarrier 和 CountdownLatch 的一个区别是，CyclicBarrier 的计数器通过调用 reset() 方法可以循环使用，所以它才叫做循环屏障。</p>\n<p>CyclicBarrier 有两个构造函数，其中 parties 指示计数器的初始值，barrierAction 在所有线程都到达屏障的时候会执行一次。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">5</span>;</span><br><span class=\"line\">    CyclicBarrier cyclicBarrier = <span class=\"keyword\">new</span> CyclicBarrier(count);</span><br><span class=\"line\">    ExecutorService cachedThreadPool = Executors.newCachedThreadPool();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">        cachedThreadPool.execute(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                System.out.print(<span class=\"string\">\"before \"</span>);</span><br><span class=\"line\">                cyclicBarrier.await();</span><br><span class=\"line\">                System.out.print(<span class=\"string\">\"after \"</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (BrokenBarrierException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cachedThreadPool.shutdown();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出 before before before before before after after after after after</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">5</span>;</span><br><span class=\"line\">    CyclicBarrier cyclicBarrier = <span class=\"keyword\">new</span> CyclicBarrier(count,()-&gt;&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"ok \"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    ExecutorService cachedThreadPool = Executors.newCachedThreadPool();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">        cachedThreadPool.execute(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                System.out.print(<span class=\"string\">\"before \"</span>);</span><br><span class=\"line\">                cyclicBarrier.await();</span><br><span class=\"line\">                System.out.print(<span class=\"string\">\"after \"</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (BrokenBarrierException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cachedThreadPool.shutdown();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出 before before before before before ok </span></span><br><span class=\"line\"><span class=\"comment\">//     after after after after after</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Semaphore\"><a href=\"#Semaphore\" class=\"headerlink\" title=\"Semaphore\"></a>Semaphore</h2><p>Semaphore 类似于操作系统中的信号量，可以控制对互斥资源的访问线程数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num = <span class=\"number\">15</span>;</span><br><span class=\"line\">    Semaphore semaphore = <span class=\"keyword\">new</span> Semaphore(count);<span class=\"comment\">// 另一个参数是否公平标志</span></span><br><span class=\"line\">    ExecutorService cachedThreadPool = Executors.newCachedThreadPool();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; num; i++) &#123;</span><br><span class=\"line\">        cachedThreadPool.execute(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                semaphore.acquire(<span class=\"number\">1</span>);</span><br><span class=\"line\">                System.out.print(semaphore.availablePermits()+<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                semaphore.release(<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cachedThreadPool.shutdown();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出 1 1 0 0 0 0 0 0 0 0 1 0 0 0 0 会有多种结果</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"方法说明\"><a href=\"#方法说明\" class=\"headerlink\" title=\"方法说明\"></a>方法说明</h3><ul>\n<li>Semaphore(int permits):构造方法，创建具有给定许可数的计数信号量并设置为非公平信号量。</li>\n<li>Semaphore(int permits,boolean fair):构造方法，当fair等于true时，创建具有给定许可数的计数信号量并设置为公平信号量。</li>\n<li>void acquire():从此信号量获取一个许可前线程将一直阻塞。相当于一辆车占了一个车位。</li>\n<li>void acquire(int n):从此信号量获取给定数目许可，在提供这些许可前一直将线程阻塞。比如n=2，就相当于一辆车占了两个车位。</li>\n<li>void release():释放一个许可，将其返回给信号量。就如同车开走返回一个车位。</li>\n<li>void release(int n):释放n个许可。</li>\n<li>int availablePermits()：当前可用的许可数。</li>\n</ul>\n<h1 id=\"J-U-C-其他组件\"><a href=\"#J-U-C-其他组件\" class=\"headerlink\" title=\"J.U.C-其他组件\"></a>J.U.C-其他组件</h1><h2 id=\"FutureTask\"><a href=\"#FutureTask\" class=\"headerlink\" title=\"FutureTask\"></a>FutureTask</h2><h2 id=\"BlockingQueue\"><a href=\"#BlockingQueue\" class=\"headerlink\" title=\"BlockingQueue\"></a>BlockingQueue</h2><p><a href=\"https://www.cnblogs.com/WangHaiMing/p/8798709.html\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n<h3 id=\"1-概括\"><a href=\"#1-概括\" class=\"headerlink\" title=\"1.概括\"></a>1.概括</h3><p>java.util.concurrent.BlockingQueue 接口有以下阻塞队列的实现：<br><img src=\"https://note.youdao.com/yws/api/personal/file/3F24FAE079A54454AF90B3714A76A688?method=download&amp;shareKey=91221a58b8f2bfe3d860814c9a7677d6\" alt=\"BlockingQueue\"></p>\n<ul>\n<li>FIFO队列：LinkedBlockingQueue、ArrayBlockingQueue（固定长度）</li>\n<li>优先级队列：PriorityBlockingQueue</li>\n</ul>\n<p>提供了阻塞的 take() 和 put() 方法：如果队列为空 take() 将阻塞，直到队列中有内容；如果队列为满 put() 将阻塞，直到队列有空闲位置。</p>\n<h3 id=\"2-主要方法\"><a href=\"#2-主要方法\" class=\"headerlink\" title=\"2.主要方法\"></a>2.主要方法</h3><ul>\n<li>boolean add(E e); 增加一个元索，如果设置成功返回true, 否则返回false。</li>\n<li>boolean offer(E e); 添加一个元素，如果设置成功返回true, 否则返回false. e的值不能为空，否则抛出空指针异常。</li>\n<li>void put(E e);  添加一个元素，如果队列满，则<strong>阻塞</strong>。</li>\n<li>offer(E e, long timeout, TimeUnit unit); 在设定时间内添加一个元素并返回true，如果队列已满，则返回false</li>\n<li>E take(); 移除并返回队列头部的元素，如果队列为空，则<strong>阻塞</strong>。</li>\n<li>E poll(long timeout, TimeUnit unit);在给定的时间里，移除并返问队列头部的元6素，时间到了直接调用普通的poll方法，为null则直接返回null。</li>\n<li>int remainingCapacity(); 获取队列中剩余的空间。</li>\n<li>boolean remove(Object o); 从队列中移除指定的值。</li>\n<li>int drainTo(Collection&lt;? super E&gt; c); 将队列中值，全部移除，并发设置到给定的集合中。</li>\n<li>int drainTo(Collection&lt;? super E&gt; c, int maxElements);指定数量限制将队列中值，全部移除，并发设置到给定的集合中。</li>\n</ul>\n<h3 id=\"ArrayBlockingQueue\"><a href=\"#ArrayBlockingQueue\" class=\"headerlink\" title=\"ArrayBlockingQueue\"></a>ArrayBlockingQueue</h3><p>基于数组的阻塞队列实现，初始化必须指定大小。ArrayBlockingQueue在生产者放入数据和消费者获取数据，都是共用同一个锁对象，由此也意味着两者无法真正并行运行，这点尤其不同于LinkedBlockingQueue；在创建ArrayBlockingQueue时，可以控制对象的内部锁是否采用公平锁，默认采用非公平锁。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayBlockingQueue</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractQueue</span>&lt;<span class=\"title\">E</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"keyword\">implements</span> <span class=\"title\">BlockingQueue</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Object[] items;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> takeIndex;<span class=\"comment\">//队列尾部在数组的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> putIndex;<span class=\"comment\">//队列头部在数组的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> count;<span class=\"comment\">//队列元素长度</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> ReentrantLock lock;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Condition notEmpty;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Condition notFull;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayBlockingQueue</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity, <span class=\"keyword\">boolean</span> fair)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (capacity &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.items = <span class=\"keyword\">new</span> Object[capacity];</span><br><span class=\"line\">        lock = <span class=\"keyword\">new</span> ReentrantLock(fair);</span><br><span class=\"line\">        notEmpty = lock.newCondition();</span><br><span class=\"line\">        notFull =  lock.newCondition();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"LinkedBlockingQueue\"><a href=\"#LinkedBlockingQueue\" class=\"headerlink\" title=\"LinkedBlockingQueue\"></a>LinkedBlockingQueue</h3><p>基于链表实现的阻塞队列，如果构造一个LinkedBlockingQueue对象，而没有指定其容量大小，LinkedBlockingQueue会默认一个类似无限大小的容量（Integer.MAX_VALUE），这样的话，如果生产者的速度一旦大于消费者的速度，也许还没有等到队列满阻塞产生，系统内存就有可能已被消耗殆尽了。</p>\n<h3 id=\"DelayQueue\"><a href=\"#DelayQueue\" class=\"headerlink\" title=\"DelayQueue\"></a>DelayQueue</h3><p>DelayQueue中的元素只有当其指定的延迟时间到了，才能够从队列中获取到该元素。DelayQueue是一个没有大小限制的队列，因此往队列中插入数据的操作（生产者）永远不会被阻塞，而只有获取数据的操作（消费者）才会被阻塞。</p>\n<p>使用场景：</p>\n<ul>\n<li>缓存系统的设计：可以用DelayQueue保存缓存元素的有效期，使用一个线程循环查询DelayQueue，一旦能从DelayQueue中获取元素时，表示缓存有效期到了。</li>\n<li>定时任务调度：使用DelayQueue保存当天将会执行的任务和执行时间，一旦从DelayQueue中获取到任务就开始执行。（Timer就是使用DelayQueue实现的）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">transient</span> ReentrantLock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> PriorityQueue&lt;E&gt; q = <span class=\"keyword\">new</span> PriorityQueue&lt;E&gt;();</span><br><span class=\"line\"><span class=\"keyword\">private</span> Thread leader = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Condition available = lock.newCondition();</span><br></pre></td></tr></table></figure>\n<p>以支持优先级的PriorityQueue无界队列作为一个容器，因为元素都必须实现Delayed接口，可以根据元素的过期时间来对元素进行排列，因此，先过期的元素会在队首，每次从队列里取出来都是最先要过期的元素。（不这样排序无法保证最早过期的元素被获取）<br><strong>详细使用见代码BlockingQueueTest.java</strong></p>\n<h3 id=\"PriorityBlockingQueue\"><a href=\"#PriorityBlockingQueue\" class=\"headerlink\" title=\"PriorityBlockingQueue\"></a>PriorityBlockingQueue</h3><p>基于优先级的阻塞队列，默认自然排序，也可以自定义实现compareTo()方法来指定元素排序规则，不会阻塞数据生产者，只会在没有可消费的数据时，阻塞数据的消费者。注意当生产者的速度大于消费者时，可能会耗尽堆内存空间。</p>\n<h3 id=\"SynchronousQueue\"><a href=\"#SynchronousQueue\" class=\"headerlink\" title=\"SynchronousQueue\"></a>SynchronousQueue</h3><p> 一个不存储元素的阻塞队列，每一个put操作必须等待take操作，否则不能添加元素。支持公平锁和非公平锁。SynchronousQueue的一个使用场景是在线程池里。Executors.newCachedThreadPool()就使用了SynchronousQueue，这个线程池根据需要（新任务到来时）创建新的线程，如果有空闲线程则会重复使用，线程空闲了60秒后会被回收。</p>\n<h3 id=\"LinkedTransferQueue\"><a href=\"#LinkedTransferQueue\" class=\"headerlink\" title=\"LinkedTransferQueue\"></a>LinkedTransferQueue</h3><p>一个由链表结构组成的无界阻塞队列，相当于其它队列，LinkedTransferQueue队列多了transfer和tryTransfer方法。</p>\n<h3 id=\"LinkedBlockingDeque\"><a href=\"#LinkedBlockingDeque\" class=\"headerlink\" title=\"LinkedBlockingDeque\"></a>LinkedBlockingDeque</h3><p>一个由链表结构组成的双向阻塞队列。队列头部和尾部都可以添加和移除元素，多线程并发时，可以将锁的竞争最多降到一半。</p>\n<h2 id=\"ForkJoin\"><a href=\"#ForkJoin\" class=\"headerlink\" title=\"ForkJoin\"></a>ForkJoin</h2><p>是Java7提供的原生多线程并行处理框架，其基本思想是将大任务分割成小任务，最后将小任务聚合起来得到结果。使用工作窃取（work-stealing）算法，主要用于实现“分而治之”。它非常类似于HADOOP提供的MapReduce框架，只是MapReduce的任务可以针对集群内的所有计算节点，可以充分利用集群的能力完成计算任务。ForkJoin更加类似于单机版的MapReduce。</p>\n<ul>\n<li>ForkJoinTask:要使用ForkJoin框架，必须首先创建一个ForkJoin任务。它提供在任务中执行fork()和join的操作机制，通常不直接继承ForkjoinTask类，只需要直接继承其子类。<ul>\n<li>RecursiveAction: 用于没有返回值的任务</li>\n<li>RecursiveTask: 用于有返回值的任务</li>\n</ul>\n</li>\n<li>ForkJoinPool：task要通过ForkJoinPool来执行，分割的子任务也会添加到当前工作线程的双端队列中，进入队列的头部。当一个工作线程中没有任务时，会从其他工作线程的队列尾部获取一个任务。线程数量取决于 CPU 核数。</li>\n</ul>\n<h3 id=\"工作窃取（work-stealing）算法\"><a href=\"#工作窃取（work-stealing）算法\" class=\"headerlink\" title=\"工作窃取（work-stealing）算法\"></a>工作窃取（work-stealing）算法</h3><p>ForkJoinPool 实现了工作窃取算法来提高 CPU 的利用率。每个线程都维护了一个双端队列，用来存储需要执行的任务。工作窃取算法允许空闲的线程从其它线程的双端队列中窃取一个任务来执行。窃取的任务必须是最晚的任务，避免和队列所属线程发生竞争。</p>\n<h3 id=\"使用ForkJoin\"><a href=\"#使用ForkJoin\" class=\"headerlink\" title=\"使用ForkJoin\"></a>使用ForkJoin</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyRecursiveTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecursiveTask</span>&lt;<span class=\"title\">Long</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> threshold = <span class=\"number\">10000</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long start;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long end;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Long <span class=\"title\">compute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Long length = end - start;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(length &lt; threshold)&#123;</span><br><span class=\"line\">            Long sum = <span class=\"number\">0L</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Long i = start;i&lt;=end;i++)&#123;</span><br><span class=\"line\">                sum += i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Long middle = (end + start)/<span class=\"number\">2</span>;<span class=\"comment\">//计算的两个值的中间值</span></span><br><span class=\"line\">            MyRecursiveTask startTask = <span class=\"keyword\">new</span> MyRecursiveTask(start,middle);</span><br><span class=\"line\">            MyRecursiveTask endTask = <span class=\"keyword\">new</span> MyRecursiveTask(middle+<span class=\"number\">1</span>,end);</span><br><span class=\"line\">            startTask.fork();</span><br><span class=\"line\">            endTask.fork();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> startTask.join()+endTask.join();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyRecursiveTask</span><span class=\"params\">(Long start, Long end)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.start = start;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.end = end;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Long start = System.currentTimeMillis();</span><br><span class=\"line\">    MyRecursiveTask myRecursiveTask = <span class=\"keyword\">new</span> MyRecursiveTask(<span class=\"number\">0L</span>,<span class=\"number\">100000000L</span>);</span><br><span class=\"line\">    ForkJoinPool forkJoinPool = <span class=\"keyword\">new</span> ForkJoinPool();</span><br><span class=\"line\">    ForkJoinTask&lt;Long&gt; submit = forkJoinPool.submit(myRecursiveTask);</span><br><span class=\"line\">    <span class=\"comment\">//Long invoke = forkJoinPool.invoke(myRecursiveTask);</span></span><br><span class=\"line\">    Long aLong = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        aLong = submit.get();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Long end = System.currentTimeMillis();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"test1 = \"</span> + aLong+<span class=\"string\">\"  time: \"</span> + (end - start));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意：<br>ForkJoinPool 使用submit 或 invoke 提交的区别：invoke是同步执行，调用之后需要等待任务完成，才能执行后面的代码；submit是异步执行，只有在Future调用get的时候会阻塞。</p>\n<h1 id=\"十、Java内存模型\"><a href=\"#十、Java内存模型\" class=\"headerlink\" title=\"十、Java内存模型\"></a>十、Java内存模型</h1><p>Java 内存模型试图屏蔽各种硬件和操作系统的内存访问差异，以实现让 Java 程序在各种平台下都能达到一致的内存访问效果。</p>\n<h2 id=\"主内存与工作内存\"><a href=\"#主内存与工作内存\" class=\"headerlink\" title=\"主内存与工作内存\"></a>主内存与工作内存</h2><p>处理器上的寄存器的读写的速度比内存快几个数量级，为了解决这种速度矛盾，在它们之间加入了高速缓存。<br><img src=\"https://note.youdao.com/yws/api/personal/file/338143C994F2409484C0946B9DD30A86?method=download&amp;shareKey=780561d289ee566ee714f4482a8e8262\" alt=\"内存模型\"><br>所有的变量都存储在主内存中，每个线程还有自己的工作内存，工作内存存储在高速缓存或者寄存器中，保存了该线程使用的变量的主内存副本拷贝。</p>\n<p>线程只能直接操作工作内存中的变量，不同线程之间的变量值传递需要通过主内存来完成。</p>\n<p>缓存一致性问题：多个缓存共享同一块主内存区域，那么多个缓存的数据可能会不一致。</p>\n<h2 id=\"内存间的交互操作\"><a href=\"#内存间的交互操作\" class=\"headerlink\" title=\"内存间的交互操作\"></a>内存间的交互操作</h2><p>Java内存模型定义了8个操作完成主内存和工作内存的交互。<br><img src=\"https://note.youdao.com/yws/api/personal/file/713E11ECE9D846679A34EDFA897A5448?method=download&amp;shareKey=a3be21c07378a44e1d967d55c1554f1e\" alt=\"内存间的交互操作\"></p>\n<ul>\n<li>read：把一个变量值从主内存传输到工作内存中。</li>\n<li>load：在read之后执行，把read获取的值放到工作内存变量副本中。</li>\n<li>use：把工作内存中一个变量的值传递给执行引擎。</li>\n<li>assign：把一个从执行引擎接收到的值赋给工作内存的变量。</li>\n<li>store：把工作内存的值传送到主内存中。</li>\n<li>write：在store之后，把store得到的值放入主内存变量中。</li>\n<li>lock：作用于主内存的变量</li>\n<li>unlock</li>\n</ul>\n<h2 id=\"内存模型三大特性\"><a href=\"#内存模型三大特性\" class=\"headerlink\" title=\"内存模型三大特性\"></a>内存模型三大特性</h2><h3 id=\"1-原子性\"><a href=\"#1-原子性\" class=\"headerlink\" title=\"1.原子性\"></a>1.原子性</h3><p>Java 内存模型保证了 read、load、use、assign、store、write、lock 和 unlock 单独操作具有原子性。但没有被 volatile 修饰的变量load、store、read 和 write 操作可以不具备原子性。<br>解决方法：<br>1.使用原子类，如AtomicInteger<br>2.使用 synchronized 互斥锁来保证操作的原子性<br>3.使用lock 和 unlock</p>\n<h3 id=\"2-可见性\"><a href=\"#2-可见性\" class=\"headerlink\" title=\"2.可见性\"></a>2.可见性</h3><p>可见性是指当一个线程修改了变量值时，其他线程能够立即得知这个修改。Java 内存模型是通过在变量修改后将新值同步回主内存，在变量读取前从主内存刷新变量值来实现可见性的。</p>\n<p>主要有三种实现可见性的方式：</p>\n<ul>\n<li>volatile（不能保证原子性）</li>\n<li>synchronized，对一个变量执行 unlock 操作之前，必须把变量值同步回主内存。</li>\n<li>final，被 final 关键字修饰的字段在构造器中一旦初始化完成，并且没有发生 this 逃逸（其它线程通过 this 引用访问到初始化了一半的对象），那么其它线程就能看见 final 字段的值。</li>\n</ul>\n<h3 id=\"3-有序性\"><a href=\"#3-有序性\" class=\"headerlink\" title=\"3.有序性\"></a>3.有序性</h3><p>有序性是指：在本线程内观察，所有操作都是有序的。在一个线程观察另一个线程，所有操作都是无序的，无序是因为发生了指令重排序。在 Java 内存模型中，允许编译器和处理器对指令进行重排序，重排序过程不会影响到单线程程序的执行，却会影响到多线程并发执行的正确性。</p>\n<p>volatile 关键字通过添加内存屏障的方式来禁止指令重排，即重排序时不能把后面的指令放到内存屏障之前。</p>\n<p>也可以通过 synchronized 来保证有序性，它保证每个时刻只有一个线程执行同步代码，相当于是让线程顺序执行同步代码。</p>\n<h2 id=\"先行发生原则\"><a href=\"#先行发生原则\" class=\"headerlink\" title=\"先行发生原则\"></a>先行发生原则</h2><p>JVM规定的先行发生原则，让一个操作无需控制就可以先于另一个操作发生。</p>\n<ul>\n<li>单一线程原则(Single Thread rule)：在一个线程内，在程序前面的操作先行发生于后面的操作。</li>\n<li>管程锁定规则(Monitor Lock Rule)：一个 unlock 操作先行发生于后面对同一个锁的 lock 操作。</li>\n<li>volatile变量规则(Volatile Variable Rule)：对一个 volatile 变量的写操作先行发生于后面对这个变量的读操作。</li>\n<li>线程启动规则(Thread Start Rule)：Thread 对象的 start() 方法调用先行发生于此线程的每一个动作。</li>\n<li>线程加入规则(Thread Join Rule)：Thread 对象的结束先行发生于 join() 方法返回。</li>\n<li>线程中断规则(Thread Interruption Rule)：对线程 interrupt() 方法的调用先行发生于被中断线程的代码检测到中断事件的发生，可以通过 interrupted() 方法检测到是否有中断发生。</li>\n<li>对象终结规则()：一个对象的初始化完成（构造函数执行结束）先行发生于它的 finalize(Finalizer Rule)： 方法的开始。</li>\n<li>传递性(Transitivity)：如果操作 A 先行发生于操作 B，操作 B 先行发生于操作 C，那么操作 A 先行发生于操作 C。</li>\n</ul>\n<h1 id=\"十一、线程安全\"><a href=\"#十一、线程安全\" class=\"headerlink\" title=\"十一、线程安全\"></a>十一、线程安全</h1><p>多个线程不管以何种方式访问某个类，并且在主调代码中不需要进行同步，都能表现正确的行为。</p>\n<h2 id=\"不可变\"><a href=\"#不可变\" class=\"headerlink\" title=\"不可变\"></a>不可变</h2><p>不可变（Immutable）的对象一定是线程安全的，不需要再采取任何的线程安全保障措施。<br>不可变类型：</p>\n<ul>\n<li>final 关键字修饰的基本数据类型</li>\n<li>String</li>\n<li>枚举类型</li>\n<li>Number 部分子类，如 Long 和 Double 等数值包装类型，BigInteger 和 BigDecimal 等大数据类型。但同为 Number 的原子类 AtomicInteger 和 AtomicLong 则是可变的。</li>\n<li>对于集合类型，可以使用 Collections.unmodifiableXXX() 方法来获取一个不可变的集合。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">Map&lt;String, Integer&gt; unmodifiableMap = Collections.unmodifiableMap(map);</span><br><span class=\"line\">unmodifiableMap.put(<span class=\"string\">\"a\"</span>, <span class=\"number\">1</span>);<span class=\"comment\">//会抛出异常java.lang.UnsupportedOperationException</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"互斥同步\"><a href=\"#互斥同步\" class=\"headerlink\" title=\"互斥同步\"></a>互斥同步</h2><p>synchronized和ReentrantLock</p>\n<h2 id=\"非阻塞同步\"><a href=\"#非阻塞同步\" class=\"headerlink\" title=\"非阻塞同步\"></a>非阻塞同步</h2><p>互斥同步属于阻塞同步，线程阻塞和唤醒会带来性能问题。</p>\n<h3 id=\"1-CAS\"><a href=\"#1-CAS\" class=\"headerlink\" title=\"1.CAS\"></a>1.CAS</h3><p>硬件支持的原子性操作最典型的是：比较并交换（Compare-and-Swap，CAS）。</p>\n<h3 id=\"2-AtomicInteger\"><a href=\"#2-AtomicInteger\" class=\"headerlink\" title=\"2.AtomicInteger\"></a>2.AtomicInteger</h3><p>J.U.C 包里面的整数原子类 AtomicInteger 的方法调用了 Unsafe 类的 CAS 操作。</p>\n<h3 id=\"3-ABA问题\"><a href=\"#3-ABA问题\" class=\"headerlink\" title=\"3.ABA问题\"></a>3.ABA问题</h3><p>J.U.C 包提供了一个带有标记的原子引用类 AtomicStampedReference 来解决这个问题，它可以通过控制变量值的版本来保证 CAS 的正确性。大部分情况下 ABA 问题不会影响程序并发的正确性，如果需要解决 ABA 问题，改用传统的互斥同步可能会比原子类更高效。</p>\n<h2 id=\"无同步方案\"><a href=\"#无同步方案\" class=\"headerlink\" title=\"无同步方案\"></a>无同步方案</h2><p>要保证线程安全，并不是一定就要进行同步。如果一个方法本来就不涉及共享数据，那它自然就无须任何同步措施去保证正确性。</p>\n<h3 id=\"1-栈封闭\"><a href=\"#1-栈封闭\" class=\"headerlink\" title=\"1.栈封闭\"></a>1.栈封闭</h3><p>多个线程访问同一个方法的局部变量时，不会出现线程安全问题</p>\n<h3 id=\"2-线程本地存储（Thread-Local-Storage）\"><a href=\"#2-线程本地存储（Thread-Local-Storage）\" class=\"headerlink\" title=\"2.线程本地存储（Thread Local Storage）\"></a>2.线程本地存储（Thread Local Storage）</h3><p>使用 java.lang.ThreadLocal 类来实现线程本地存储功能<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ThreadLocal threadLocal = <span class=\"keyword\">new</span> ThreadLocal();</span><br><span class=\"line\">Thread thread1 = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">    threadLocal.set(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(threadLocal.get());</span><br><span class=\"line\">    threadLocal.remove();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">Thread thread2 = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">    threadLocal.set(<span class=\"number\">2</span>);</span><br><span class=\"line\">    threadLocal.remove();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">thread1.start();</span><br><span class=\"line\">thread2.start();</span><br><span class=\"line\"><span class=\"comment\">//输出 1</span></span><br></pre></td></tr></table></figure></p>\n<p>每个 Thread 都有一个 ThreadLocal.ThreadLocalMap 对象。当调用一个 ThreadLocal 的 set(T value) 方法时，先得到当前线程的 ThreadLocalMap 对象，然后将 ThreadLocal-&gt;value 键值对插入到该 Map 中。<br>ThreadLockl的set方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">    Thread t = Thread.currentThread();</span><br><span class=\"line\">    ThreadLocalMap map = getMap(t);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (map != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        map.set(<span class=\"keyword\">this</span>, value);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        createMap(t, value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>get()方法类似<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Thread t = Thread.currentThread();</span><br><span class=\"line\">    ThreadLocalMap map = getMap(t);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (map != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        ThreadLocalMap.Entry e = map.getEntry(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">            T result = (T)e.value;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> setInitialValue();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-可重入代码-Reentry-code\"><a href=\"#3-可重入代码-Reentry-code\" class=\"headerlink\" title=\"3.可重入代码(Reentry code)\"></a>3.可重入代码(Reentry code)</h3><p>可重入代码(Reentry code)也叫纯代码(Pure code)是一种允许多个进程同时访问的代码。为了使各进程所执行的代码完全相同，故不允许任何进程对其进行修改。程序在运行过程中可以被打断，并由开始处再次执行，并且在合理的范围内（多次重入，而不造成堆栈溢出等其他问题），程序可以在被打断处继续执行，且执行结果不受影响。</p>\n<h1 id=\"十二、锁优化\"><a href=\"#十二、锁优化\" class=\"headerlink\" title=\"十二、锁优化\"></a>十二、锁优化</h1><p>这里的锁优化主要是指 JVM 对 synchronized 的优化。</p>\n<h2 id=\"自旋锁\"><a href=\"#自旋锁\" class=\"headerlink\" title=\"自旋锁\"></a>自旋锁</h2><p>自旋锁的思想是让一个线程在请求一个共享数据的锁时执行忙循环（自旋）一段时间，如果在这段时间内能获得锁，就可以避免进入阻塞状态。在 JDK 1.6 中引入了自适应的自旋锁。自适应意味着自旋的次数不再固定了，而是由前一次在同一个锁上的自旋次数及锁的拥有者的状态来决定。</p>\n<h2 id=\"锁消除\"><a href=\"#锁消除\" class=\"headerlink\" title=\"锁消除\"></a>锁消除</h2><p>锁消除是指对于被检测出不可能存在竞争的共享数据的锁进行消除。</p>\n<h2 id=\"锁粗化\"><a href=\"#锁粗化\" class=\"headerlink\" title=\"锁粗化\"></a>锁粗化</h2><p>如果虚拟机探测到由有一串零碎的操作都对同一个对象加锁，将会把加锁的范围扩展（粗化）到整个操作序列的外部。</p>\n<h2 id=\"轻量级锁\"><a href=\"#轻量级锁\" class=\"headerlink\" title=\"轻量级锁\"></a>轻量级锁</h2><p>JDK 1.6 引入了偏向锁和轻量级锁，从而让锁拥有了四个状态：无锁状态（unlocked）、偏向锁状态（biasble）、轻量级锁状态（lightweight locked）和重量级锁状态（inflated）。</p>\n<h2 id=\"偏向锁\"><a href=\"#偏向锁\" class=\"headerlink\" title=\"偏向锁\"></a>偏向锁</h2><p>偏向锁的思想是偏向于让第一个获取锁对象的线程，这个线程在之后获取该锁就不再需要进行同步操作，甚至连 CAS 操作也不再需要。</p>\n<h1 id=\"十三、多线程开发良好的实践\"><a href=\"#十三、多线程开发良好的实践\" class=\"headerlink\" title=\"十三、多线程开发良好的实践\"></a>十三、多线程开发良好的实践</h1><ul>\n<li><p>给线程起个有意义的名字，这样可以方便找 Bug。<br>缩小同步范围，从而减少锁争用。例如对于 synchronized，应该尽量使用同步块而不是同步方法。</p>\n</li>\n<li><p>多用同步工具少用 wait() 和 notify()。首先，CountDownLatch, CyclicBarrier, Semaphore 和 Exchanger 这些同步类简化了编码操作，而用 wait() 和 notify() 很难实现复杂控制流；其次，这些同步类是由最好的企业编写和维护，在后续的 JDK 中还会不断优化和完善。</p>\n</li>\n<li><p>使用 BlockingQueue 实现生产者消费者问题。<br>多用并发集合少用同步集合，例如应该使用 ConcurrentHashMap 而不是 Hashtable。</p>\n</li>\n<li><p>使用本地变量和不可变类来保证线程安全。</p>\n</li>\n<li><p>使用线程池而不是直接创建线程，这是因为创建线程代价很高，线程池可以有效地利用有限的线程来启动任务。</p>\n</li>\n</ul>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"https://github.com/CyC2018/CS-Notes/blob/master/docs/notes/Java%20%E5%B9%B6%E5%8F%91.md\" target=\"_blank\" rel=\"noopener\">Java并发</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一、线程状态的转换\"><a href=\"#一、线程状态的转换\" class=\"headerlink\" title=\"一、线程状态的转换\"></a>一、线程状态的转换</h1><p><img src=\"https://note.youdao.com/yws/api/personal/file/3782D564310F4EFD9D604DF102DD2897?method=download&amp;shareKey=9986c9632ae622172333d92c9be73583\" alt=\"线程转换\"></p>\n<h2 id=\"新建（New）\"><a href=\"#新建（New）\" class=\"headerlink\" title=\"新建（New）\"></a>新建（New）</h2><p>创建后尚未运行。</p>\n<h2 id=\"可运行（Runnable）\"><a href=\"#可运行（Runnable）\" class=\"headerlink\" title=\"可运行（Runnable）\"></a>可运行（Runnable）</h2><p>可能正在运行，也可能正在等待CPU时间片。<br>包括操作系统线程状态中的Running和Ready。<br>Running：线程获取CPU权限进行执行。</p>\n<h2 id=\"阻塞（Blocking）\"><a href=\"#阻塞（Blocking）\" class=\"headerlink\" title=\"阻塞（Blocking）\"></a>阻塞（Blocking）</h2><p>等待获取一个排它锁，如果其线程释放了锁就会结束此状态。</p>\n<h2 id=\"无限期等待（Waiting）\"><a href=\"#无限期等待（Waiting）\" class=\"headerlink\" title=\"无限期等待（Waiting）\"></a>无限期等待（Waiting）</h2><p>等待其它线程显式地唤醒，否则不会被分配 CPU 时间片。<br>|进入方法|退出方法|<br>|—|—|<br>|没有设置 Timeout 参数的 Object.wait() 方法|Object.notify() / Object.notifyAll()|<br>|没有设置 Timeout 参数的 Thread.join() 方法|被调用的线程执行完毕|<br>|LockSupport.park() 方法|LockSupport.unpark(Thread)|</p>\n<h2 id=\"期限等待（Timed-Waiting）\"><a href=\"#期限等待（Timed-Waiting）\" class=\"headerlink\" title=\"期限等待（Timed Waiting）\"></a>期限等待（Timed Waiting）</h2><p>无需等待其他线程显示地唤醒，在一定时间之后会被系统自动唤醒。</p>\n<p>调用 Thread.sleep() 方法使线程进入限期等待状态时，常常用“使一个线程睡眠”进行描述。</p>\n<p>调用 Object.wait() 方法使线程进入限期等待或者无限期等待时，常常用“挂起一个线程”进行描述。</p>\n<p>睡眠和挂起是用来描述行为，而阻塞和等待用来描述状态。</p>\n<p>阻塞和等待的区别在于，阻塞是被动的，它是在等待获取一个排它锁。而等待是主动的，通过调用 Thread.sleep() 和 Object.wait() 等方法进入。<br>|进入方法|退出方法|<br>|—|—|<br>|Thread.sleep() 方法|时间结束|<br>|设置了 Timeout 参数的 Object.wait() 方法|时间结束 / Object.notify() / Object.notifyAll()|<br>|设置了 Timeout 参数的Thread.join() 方法|时间结束 / 被调用的线程执行完毕|<br>|LockSupport.parkNanos() 方法|LockSupport.unpark(Thread)|<br>|LockSupport.parkUntil() 方法|LockSupport.unpark(Thread)|</p>\n<h2 id=\"死亡（Terminated）\"><a href=\"#死亡（Terminated）\" class=\"headerlink\" title=\"死亡（Terminated）\"></a>死亡（Terminated）</h2><p>可以是线程结束任务之后自己结束，或者产生了异常而结束。</p>\n<h1 id=\"二、使用线程\"><a href=\"#二、使用线程\" class=\"headerlink\" title=\"二、使用线程\"></a>二、使用线程</h1><p>三种使用线程的方式：</p>\n<ul>\n<li><p>实现Runnable接口；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行</span></span><br><span class=\"line\">MyRunnable myRunnable = <span class=\"keyword\">new</span> MyRunnable();</span><br><span class=\"line\">Thread thread1 = <span class=\"keyword\">new</span> Thread(myRunnable);</span><br><span class=\"line\">thread1.start();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>实现Callable接口（可以有返回值）；</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyCallable</span> <span class=\"keyword\">implements</span> <span class=\"title\">Callable</span>&lt;<span class=\"title\">Integer</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Integer i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 执行</span></span><br><span class=\"line\">MyCallable myCallable = <span class=\"keyword\">new</span> MyCallable();</span><br><span class=\"line\">FutureTask&lt;Integer&gt; ft = <span class=\"keyword\">new</span> FutureTask&lt;&gt;(myCallable);</span><br><span class=\"line\">Thread thread2 = <span class=\"keyword\">new</span> Thread(ft);</span><br><span class=\"line\">thread2.start();</span><br><span class=\"line\"><span class=\"keyword\">while</span> (!ft.isDone())&#123;</span><br><span class=\"line\">    System.out.println(ft.get());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>继承Thread类。</p>\n</li>\n</ul>\n<p>实现Runnable和Callable接口的类不是真正意义上的线程，还需要通过Thread来调用。可以说任务是通过线程驱动从而执行的。</p>\n<h2 id=\"实现接口-VS-继承Thread\"><a href=\"#实现接口-VS-继承Thread\" class=\"headerlink\" title=\"实现接口 VS 继承Thread\"></a>实现接口 VS 继承Thread</h2><p>实现会更好一些，原因：</p>\n<ul>\n<li>Java不支持多继承，继承Thread不能再去继承别的类，但是可以实现多个接口。</li>\n<li>类可能只要求可执行就行，继承整个Thread类开销过大。</li>\n</ul>\n<h1 id=\"四、基础线程机制\"><a href=\"#四、基础线程机制\" class=\"headerlink\" title=\"四、基础线程机制\"></a>四、基础线程机制</h1><h2 id=\"Executor\"><a href=\"#Executor\" class=\"headerlink\" title=\"Executor\"></a>Executor</h2><p>线程池，管理多个线程执行，而无需程序员显式地管理线程的生命周期。</p>\n<p>主要有三种Executor：</p>\n<ul>\n<li>CachedThreadPool: 一个任务创建一个线程。</li>\n<li>FixedThreadPool: 固定大小的线程池。</li>\n<li>SingleThreadExecutor：相当于大小为 1 的 FixedThreadPool。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService cachedThreadPool = Executors.newCachedThreadPool();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    cachedThreadPool.execute(<span class=\"keyword\">new</span> MyRunnable());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">cachedThreadPool.shutdown();</span><br></pre></td></tr></table></figure>\n<h2 id=\"Daemon\"><a href=\"#Daemon\" class=\"headerlink\" title=\"Daemon\"></a>Daemon</h2><p>守护线程是程序运行时在后台提供服务的线程，不属于程序中不可或缺的部分，比如垃圾回收线程。</p>\n<p>当所有的非守护线程结束时，程序也就结束了，同时也会杀死进程中的所有守护线程。<br>main() 属于非守护线程。</p>\n<p>通过使用Thread对象的setDeamon(true)方法将线程设置为守护线程，注意：</p>\n<ol>\n<li>thread.setDeamon(true)必须在thread.start()之前设置，否则会抛出IllegalThreadStateException异常。不可以将正在运行的线程设置为守护线程。</li>\n<li>在Deamon线程中产生的线程也是Deamon的。</li>\n<li>守护线程应该永远不去访问固有资源，如文件、数据库，因为它会在任何时候甚至在一个操作的中间发生中断。</li>\n</ol>\n<h2 id=\"sleep\"><a href=\"#sleep\" class=\"headerlink\" title=\"sleep()\"></a>sleep()</h2><p>Thread.sleep(millisec) 方法会休眠当前正在执行的线程，millisec 单位为毫秒。</p>\n<p>sleep() 可能会抛出 InterruptedException，因为异常不能跨线程传播回 main() 中，因此必须在本地进行处理。线程中抛出的其它异常也同样需要在本地进行处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"yield\"><a href=\"#yield\" class=\"headerlink\" title=\"yield()\"></a>yield()</h2><p><code>Thread.yield();</code>译为线程让步，让当前线程从运行状态进入就绪状态，它会把CPU执行的时间让掉，让其他或者<strong>自己</strong>线程执行。</p>\n<h1 id=\"四、线程的中断\"><a href=\"#四、线程的中断\" class=\"headerlink\" title=\"四、线程的中断\"></a>四、线程的中断</h1><p>一个线程执行完毕之后会自动结束，如果在运行中发生异常也会提前结束。</p>\n<h2 id=\"中断协议\"><a href=\"#中断协议\" class=\"headerlink\" title=\"中断协议\"></a>中断协议</h2><p>每个线程都有一个与线程是否已中断的相关联的Boolean属性，用于表示线程的中断状态（interrupted status）。中断状态初始时为false；当一个线程A通过调用threadB.interrupt()中断线程B时，会出现以下两种情况之一:</p>\n<ul>\n<li>如果那个线程B在执行一个低级可中断阻塞方法，例如 Thread.sleep()、 Thread.join() 或 Object.wait()，那么它将取消阻塞并抛出 InterruptedException。但是不能中断 I/O 阻塞和 synchronized 锁阻塞。</li>\n<li>否则，interrupt()只是设置线程B的中断状态。 在被中断线程B中运行的代码以后可以轮询中断状态，看看它是否被请求停止正在做的事情。中断状态可以通过 Thread.isInterrupted() 来读取，并且可以通过一个名为 Thread.interrupted() 的操作读取和清除。</li>\n</ul>\n<h2 id=\"interrupt\"><a href=\"#interrupt\" class=\"headerlink\" title=\"interrupt()\"></a>interrupt()</h2><p>发送中断信号<br>对于以下代码，在 main() 中启动一个线程之后再中断它，由于线程中调用了 Thread.sleep() 方法，因此会抛出一个 InterruptedException，从而提前结束线程，不执行之后的语句。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Thread thread = <span class=\"keyword\">new</span> Thread()&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"Thread run\"</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    thread.start();</span><br><span class=\"line\">    thread.interrupt();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*输出</span></span><br><span class=\"line\"><span class=\"comment\">//java.lang.InterruptedException: sleep interrupted</span></span><br><span class=\"line\"><span class=\"comment\">at java.lang.Thread.sleep(Native Method)</span></span><br><span class=\"line\"><span class=\"comment\">at com.wkk.demo.javaconcurrent.InterruptTest$1.run(InterruptTest.java:15)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"interrupted\"><a href=\"#interrupted\" class=\"headerlink\" title=\"interrupted()\"></a>interrupted()</h2><p>获取线程是否已经中断。在线程中可以通过循环判断是否发出中断信号，决定当前线程是否停止。</p>\n<h2 id=\"Executor的中断操作\"><a href=\"#Executor的中断操作\" class=\"headerlink\" title=\"Executor的中断操作\"></a>Executor的中断操作</h2><p>调用Executor的shutdown()方法会等待线程都执行完毕之后再关闭，但是调用shutdownNow()方法，相当于调用了每个线程的interrupt()方法。</p>\n<p>只想中断一个线程，可以通过使用submit()方法提交一个线程，它会返回一个 Future&lt;?&gt; 对象，通过调用该对象的 cancel(true) 方法就可以中断线程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Future&lt;?&gt; future = executorService.submit(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ..</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">future.cancel(<span class=\"keyword\">true</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Future简介\"><a href=\"#Future简介\" class=\"headerlink\" title=\"Future简介\"></a>Future简介</h3><p>Future接口用于获取异步计算的结果，可通过get()获取结果、cancel()取消、isDone()判断是否完成等操作。<a href=\"https://blog.csdn.net/codershamo/article/details/51901057\" target=\"_blank\" rel=\"noopener\">源码参考</a><br>方法：</p>\n<ul>\n<li>V get()： 获取结果，若无结果会阻塞至异步计算完成</li>\n<li>V get(long timeOut, TimeUnit unit)：获取结果，超时返回null</li>\n<li>boolean isDone()：执行结束（完成/取消/异常）返回true</li>\n<li>boolean isCancelled()：任务完成前被取消返回true</li>\n<li>boolean cancel(boolean mayInterruptRunning)：取消任务，未开始或已完成返回false，参数表示是否中断执行中的线程</li>\n</ul>\n<p>当cancel()方法参数为false时，只能取消还没有开始的任务，若任务已经开始了，就任由其运行下去<br>当创建了Future实例，任务可能有以下三种状态：</p>\n<ul>\n<li>等待状态。此时调用cancel()方法不管传入true还是false都会标记为取消，任务依然保存在任务队列中，但当轮到此任务运行时会直接跳过。</li>\n<li>完成状态。此时cancel()不会起任何作用，因为任务已经完成了。</li>\n<li>运行中。此时传入true会中断正在执行的任务，传入false则不会中断。</li>\n</ul>\n<h3 id=\"CAS和Unsafe类\"><a href=\"#CAS和Unsafe类\" class=\"headerlink\" title=\"CAS和Unsafe类\"></a>CAS和Unsafe类</h3><p><a href=\"https://blog.csdn.net/javazejian/article/details/72772470\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n<h1 id=\"五、互斥同步\"><a href=\"#五、互斥同步\" class=\"headerlink\" title=\"五、互斥同步\"></a>五、互斥同步</h1><p>Java提供了两种锁机制来控制对共享资源的互斥访问，一个是JVM实现的synchronized，一个是JDK实现的ReentrantLock。</p>\n<h2 id=\"synchronized\"><a href=\"#synchronized\" class=\"headerlink\" title=\"synchronized\"></a>synchronized</h2><p><strong>1. 同步一个代码块</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//..</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>只能实现同一对象对代码块的访问互斥。<br><strong>2. 同步一个方法</strong><br><strong>3. 同步一个类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(SynchronizedExample.class))&#123;</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>作用于整个类，也就是说两个线程调用同一个类的不同对象上的这种同步语句，也会进行同步。<br><strong>4. 同步一个静态方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>作用于整个类</p>\n<h3 id=\"对象锁（monitor）机制\"><a href=\"#对象锁（monitor）机制\" class=\"headerlink\" title=\"对象锁（monitor）机制\"></a>对象锁（monitor）机制</h3><p>执行同步代码块后首先要先执行monitorenter指令，退出的时候执行monitorexit指令。使用Synchronized进行同步，其关键就是必须要对对象的监视器monitor进行获取，当线程获取monitor后才能继续往下执行，否则就只能等待。而这个获取的过程是互斥的，即同一时刻只有一个线程能够获取到monitor。Synchronized先天具有重入性。每个对象拥有一个计数器，当线程获取该对象锁后，计数器就会加一，释放锁后就会将计数器减一。</p>\n<p>任意一个对象都拥有自己的监视器，当这个对象由同步块或者这个对象的同步方法调用时，执行方法的线程必须先获取该对象的监视器才能进入同步块和同步方法，如果没有获取到监视器的线程将会被阻塞在同步块和同步方法的入口处，进入到BLOCKED状态。<br><img src=\"https://note.youdao.com/yws/api/personal/file/72D215D872BC4B48BC9FB226862858EB?method=download&amp;shareKey=11aaa546f8909b020c771afb5a860dd5\" alt=\"对象锁获取\"></p>\n<blockquote>\n<p>引申 <a href=\"https://juejin.im/post/5ae6d309518825673123fd0e#heading-3\" target=\"_blank\" rel=\"noopener\">happens-before规则</a></p>\n</blockquote>\n<h3 id=\"synchronized优化\"><a href=\"#synchronized优化\" class=\"headerlink\" title=\"synchronized优化\"></a>synchronized优化</h3><p>synchronized最大的特征就是在同一时刻只有一个线程能够获得对象的监视器（monitor），从而进入到同步代码块或者同步方法之中，即表现为互斥性（排它性）。一次只能一个线程效率低下</p>\n<h4 id=\"CAS操作\"><a href=\"#CAS操作\" class=\"headerlink\" title=\"CAS操作\"></a>CAS操作</h4><p>CAS操作（又称为无锁操作）是一种乐观锁策略，它假设所有线程访问共享资源的时候不会出现冲突，既然不会出现冲突自然而然就不会阻塞其他线程的操作。通过使用compare and swap（比较交换），解决冲突。</p>\n<p>CAS比较交换的过程可以通俗的理解为CAS(V,O,N)，包含三个值分别为：V 内存地址存放的实际值；O 预期的值（旧值）；N 更新的新值。如果与O相同就表明没有更改，直接更新为N，如果如O不相等，更新失败。</p>\n<p>CAS的实现需要硬件指令集的支撑，在JDK1.5后虚拟机才可以使用处理器提供的CMPXCHG指令实现。</p>\n<blockquote>\n<p>ABA问题：通过变量值加入版本号解决<br><a href=\"https://juejin.im/post/5ae6dc04f265da0ba351d3ff#heading-5\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n</blockquote>\n<h2 id=\"ReentrantLock\"><a href=\"#ReentrantLock\" class=\"headerlink\" title=\"ReentrantLock\"></a>ReentrantLock</h2><p>ReentrantLock 是 java.util.concurrent（J.U.C）包中的锁。支持重入性，表示能够对共享资源能够重复加锁，即当前线程获取该锁再次获取不会被阻塞。ReentrantLock还支持公平锁和非公平锁两种方式。</p>\n<h3 id=\"1-主要方法\"><a href=\"#1-主要方法\" class=\"headerlink\" title=\"1.主要方法\"></a>1.主要方法</h3><ul>\n<li>lock();  获得锁</li>\n<li>lockInterruptibly();  获得锁，但优先响应中断</li>\n<li>tryLock();    尝试获得锁，成功返回true,否则false，该方法不等待，立即返回</li>\n<li>tryLock(long time,TimeUnit unit);   在给定时间内尝试获得锁</li>\n<li>unlock();     释放锁</li>\n</ul>\n<h3 id=\"2-重入性的实现原理\"><a href=\"#2-重入性的实现原理\" class=\"headerlink\" title=\"2.重入性的实现原理\"></a>2.重入性的实现原理</h3><p>要想支持重入性，就要解决两个问题：1. 在线程获取锁的时候，如果已经获取锁的线程是当前线程的话则直接再次获取成功；2. 由于锁会被获取n次，那么只有锁在被释放同样的n次之后，该锁才算是完全释放成功。</p>\n<p>以非公平锁为例，判断当前线程能否获得锁为例，核心方法为nonfairTryAcquire：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">nonfairTryAcquire</span><span class=\"params\">(<span class=\"keyword\">int</span> acquires)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Thread current = Thread.currentThread();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = getState();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (compareAndSetState(<span class=\"number\">0</span>, acquires)) &#123;</span><br><span class=\"line\">            setExclusiveOwnerThread(current);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> nextc = c + acquires;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextc &lt; <span class=\"number\">0</span>) <span class=\"comment\">// overflow</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(<span class=\"string\">\"Maximum lock count exceeded\"</span>);</span><br><span class=\"line\">        setState(nextc);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：如果当前没有线程占用，直接设置当前线程占用。存在线程占用并且占用线程为当前申请锁的线程时，同步状态加1（state+1），返回true。</p>\n<p>以非公平锁为例，释放锁，核心方法为tryRelease：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryRelease</span><span class=\"params\">(<span class=\"keyword\">int</span> releases)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = getState() - releases;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Thread.currentThread() != getExclusiveOwnerThread())</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalMonitorStateException();</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> free = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        free = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        setExclusiveOwnerThread(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setState(c);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> free;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：重入锁的释放必须得等到同步状态为0时锁才算成功释放，否则锁仍未释放。如果锁被获取n次，释放了n-1次，该锁未完全释放返回false，只有被释放n次才算成功释放，返回true。</p>\n<h3 id=\"3-公平锁与非公平锁\"><a href=\"#3-公平锁与非公平锁\" class=\"headerlink\" title=\"3.公平锁与非公平锁\"></a>3.公平锁与非公平锁</h3><p>ReentrantLock支持两种锁：公平锁和非公平锁。何谓公平性，是针对获取锁而言的，如果一个锁是公平的，那么锁的获取顺序就应该符合请求上的绝对时间顺序，满足FIFO（先进先出）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ReentrantLock</span><span class=\"params\">(<span class=\"keyword\">boolean</span> fair)</span> </span>&#123;</span><br><span class=\"line\">    sync = fair ? <span class=\"keyword\">new</span> FairSync() : <span class=\"keyword\">new</span> NonfairSync();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>公平锁的tryAcquire方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryAcquire</span><span class=\"params\">(<span class=\"keyword\">int</span> acquires)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Thread current = Thread.currentThread();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = getState();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!hasQueuedPredecessors() &amp;&amp;</span><br><span class=\"line\">            compareAndSetState(<span class=\"number\">0</span>, acquires)) &#123;</span><br><span class=\"line\">            setExclusiveOwnerThread(current);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> nextc = c + acquires;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextc &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(<span class=\"string\">\"Maximum lock count exceeded\"</span>);</span><br><span class=\"line\">        setState(nextc);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析：逻辑与nonfairTryAcquire基本上一直，唯一的不同在于增加了hasQueuedPredecessors的逻辑判断，该方法是用来判断当前节点在同步队列中是否有前驱节点的判断，如果有前驱节点说明有线程比当前线程更早的请求资源，根据公平性，当前线程请求资源失败。如果当前节点没有前驱节点的话，再才有做后面的逻辑判断的必要性。公平锁每次都是从同步队列中的第一个节点获取到锁，而非公平性锁则不一定，有可能刚释放锁的线程能再次获取到锁。</p>\n<blockquote>\n<p>比较</p>\n</blockquote>\n<ul>\n<li>公平锁每次获取锁为同步队列中的第一个节点，保证请求资源时间上的绝对顺序，而非公平锁不保证这一点，可能造成“饥饿”现象。</li>\n<li>公平锁为了保证时间上的绝对顺序，需要频繁的上下文切换，而非公平锁会降低一定的上下文切换，降低性能开销。因此，ReentrantLock默认选择的是非公平锁，则是为了减少一部分上下文切换，保证了系统更大的吞吐量。</li>\n</ul>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/u011521203/article/details/80186741\" target=\"_blank\" rel=\"noopener\">参考</a>；<a href=\"https://www.cnblogs.com/zhimingyang/p/5702752.html\" target=\"_blank\" rel=\"noopener\">源码阅读参考</a></p>\n</blockquote>\n<h3 id=\"4-Condition\"><a href=\"#4-Condition\" class=\"headerlink\" title=\"4.Condition\"></a>4.Condition</h3><p>Lock 替代了 synchronized 方法和语句的使用，Condition（await、signal和signalAll） 替代了 Object（wait、notify 和 notifyAll） 监视器方法的使用。</p>\n<p>新建Condition对象，一个ReentrantLock可以绑定多个Condition对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Condition condition = lock.newCondition();</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>Condition与Object中的wati,notify,notifyAll区别：</p>\n<ul>\n<li><p>Object中的这些方法是和同步锁捆绑使用的；而Condition是需要与互斥锁/共享锁捆绑使用的。</p>\n</li>\n<li><p>Condition它更强大的地方在于：能够更加精细的控制多线程的休眠与唤醒。对于同一个锁，我们可以创建多个Condition，在不同的情况下使用不同的Condition。通过Condition，能明确的指定唤醒读线程。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"synchronized与ReentrantLock的比较\"><a href=\"#synchronized与ReentrantLock的比较\" class=\"headerlink\" title=\"synchronized与ReentrantLock的比较\"></a>synchronized与ReentrantLock的比较</h2><ol>\n<li>锁的实现<br>synchronized是JVM实现的，ReentrantLock是JDK实现的。</li>\n<li>性能<br>新版本 Java 对 synchronized 进行了很多优化，例如自旋锁（就是for循环）等，synchronized 与 ReentrantLock 大致相同。</li>\n<li>等待可中断<br>当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，改为处理其他事情。ReentrantLock 可中断，而 synchronized 不行。</li>\n<li>公平锁<br>synchronized 中的锁是非公平的，ReentrantLock 默认情况下也是非公平的，但是也可以是公平的。</li>\n<li>锁绑定多个条件<br>一个 ReentrantLock 可以同时绑定多个 Condition 对象</li>\n</ol>\n<h2 id=\"使用比较\"><a href=\"#使用比较\" class=\"headerlink\" title=\"使用比较\"></a>使用比较</h2><p>除非使用ReentrantLock的高级功能，否则优先使用synchronized。这是因为 synchronized 是 JVM 实现的一种锁机制，JVM 原生地支持它，而 ReentrantLock 不是所有的 JDK 版本都支持。并且使用 synchronized 不用担心没有释放锁而导致死锁问题，因为 JVM 会确保锁的释放。</p>\n<h1 id=\"六、线程之间的协作\"><a href=\"#六、线程之间的协作\" class=\"headerlink\" title=\"六、线程之间的协作\"></a>六、线程之间的协作</h1><p>多个线程执行任务时，某些线程必须在其他线程执行完成后才能执行，这时候就需要对线程进行协调。</p>\n<h2 id=\"join-方法\"><a href=\"#join-方法\" class=\"headerlink\" title=\"join()方法\"></a>join()方法</h2><p>在线程中调用另一个线程的join()方法,会将当前线程挂起，而不是忙等待，直到目标线程执行结束。</p>\n<h2 id=\"wait-notify-notifyAll\"><a href=\"#wait-notify-notifyAll\" class=\"headerlink\" title=\"wait(),notify(),notifyAll()\"></a>wait(),notify(),notifyAll()</h2><p>调用 wait() 使得线程等待某个条件满足，线程在等待时会被挂起，当其他线程的运行使得这个条件满足时，其它线程会调用 notify() 或者 notifyAll() 来唤醒挂起的线程。</p>\n<p>它们都属于 Object 的一部分，而不属于 Thread。只能用在同步方法或者同步控制块中使用，否则会在运行时抛出 IllegalMonitorStateException。</p>\n<p>使用 wait() 挂起期间，线程会释放锁。这是因为，如果没有释放锁，那么其它线程就无法进入对象的同步方法或者同步控制块中，那么就无法执行 notify() 或者 notifyAll() 来唤醒挂起的线程，造成死锁。</p>\n<h3 id=\"wait-和sleep-的区别\"><a href=\"#wait-和sleep-的区别\" class=\"headerlink\" title=\"wait()和sleep()的区别\"></a>wait()和sleep()的区别</h3><ul>\n<li>wait是Object方法，sleep是Thread的静态方法。</li>\n<li>wait会释放锁，sleep不会。</li>\n</ul>\n<h2 id=\"await-signal-signalAll\"><a href=\"#await-signal-signalAll\" class=\"headerlink\" title=\"await(),signal(),signalAll()\"></a>await(),signal(),signalAll()</h2><p>java.util.concurrent 类库中提供了 Condition 类来实现线程之间的协调，可以在 Condition 上调用 await() 方法使线程等待，其它线程调用 signal() 或 signalAll() 方法唤醒等待的线程。</p>\n<p>只能用在lock.lock()同步时使用，否则会在运行时抛出 IllegalMonitorStateException。</p>\n<p>相比于 wait() 这种等待方式，await() 可以指定等待的条件，因此更加灵活。</p>\n<h1 id=\"七、J-U-C-AQS\"><a href=\"#七、J-U-C-AQS\" class=\"headerlink\" title=\"七、J.U.C - AQS\"></a>七、J.U.C - AQS</h1><p>java.util.concurrent（J.U.C）大大提高了并发性能，AQS 被认为是 J.U.C 的核心。</p>\n<h2 id=\"CountDownLatch\"><a href=\"#CountDownLatch\" class=\"headerlink\" title=\"CountDownLatch\"></a>CountDownLatch</h2><p>用来控制一个线程等待多个线程。维护了一个计数器cnt，每次调用CountDownLatch的实例方法countDown()都会使计数器的值减一，减到0时，那些调用await()方法而等待的线程就会开始执行。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">5</span>;</span><br><span class=\"line\">    CountDownLatch countDownLatch = <span class=\"keyword\">new</span> CountDownLatch(count);</span><br><span class=\"line\">    ExecutorService cachedThreadPool = Executors.newCachedThreadPool();</span><br><span class=\"line\">    cachedThreadPool.execute(()-&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            countDownLatch.await();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"end...\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    cachedThreadPool.execute(()-&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">            countDownLatch.countDown();</span><br><span class=\"line\">            System.out.print(<span class=\"string\">\"count : \"</span>+countDownLatch.getCount()+<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    cachedThreadPool.shutdown();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出 count : 4 count : 3 count : 2 count : 1 count : 0 end...</span></span><br><span class=\"line\"><span class=\"comment\">// 或者输出 count : 4 count : 3 count : 2 count : 1 end...</span></span><br><span class=\"line\"><span class=\"comment\">//         count : 0</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"CyclicBarrier\"><a href=\"#CyclicBarrier\" class=\"headerlink\" title=\"CyclicBarrier\"></a>CyclicBarrier</h2><p>用来控制多个线程互相等待，只有当多个线程都到达时，这些线程才会继续执行。</p>\n<p>和 CountdownLatch 相似，都是通过维护计数器来实现的。线程执行 await() 方法之后计数器会减 1，并进行等待，直到计数器为 0，所有调用 await() 方法而在等待的线程才能继续执行。</p>\n<p>CyclicBarrier 和 CountdownLatch 的一个区别是，CyclicBarrier 的计数器通过调用 reset() 方法可以循环使用，所以它才叫做循环屏障。</p>\n<p>CyclicBarrier 有两个构造函数，其中 parties 指示计数器的初始值，barrierAction 在所有线程都到达屏障的时候会执行一次。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">5</span>;</span><br><span class=\"line\">    CyclicBarrier cyclicBarrier = <span class=\"keyword\">new</span> CyclicBarrier(count);</span><br><span class=\"line\">    ExecutorService cachedThreadPool = Executors.newCachedThreadPool();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">        cachedThreadPool.execute(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                System.out.print(<span class=\"string\">\"before \"</span>);</span><br><span class=\"line\">                cyclicBarrier.await();</span><br><span class=\"line\">                System.out.print(<span class=\"string\">\"after \"</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (BrokenBarrierException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cachedThreadPool.shutdown();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出 before before before before before after after after after after</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">5</span>;</span><br><span class=\"line\">    CyclicBarrier cyclicBarrier = <span class=\"keyword\">new</span> CyclicBarrier(count,()-&gt;&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"ok \"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    ExecutorService cachedThreadPool = Executors.newCachedThreadPool();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">        cachedThreadPool.execute(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                System.out.print(<span class=\"string\">\"before \"</span>);</span><br><span class=\"line\">                cyclicBarrier.await();</span><br><span class=\"line\">                System.out.print(<span class=\"string\">\"after \"</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (BrokenBarrierException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cachedThreadPool.shutdown();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出 before before before before before ok </span></span><br><span class=\"line\"><span class=\"comment\">//     after after after after after</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Semaphore\"><a href=\"#Semaphore\" class=\"headerlink\" title=\"Semaphore\"></a>Semaphore</h2><p>Semaphore 类似于操作系统中的信号量，可以控制对互斥资源的访问线程数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num = <span class=\"number\">15</span>;</span><br><span class=\"line\">    Semaphore semaphore = <span class=\"keyword\">new</span> Semaphore(count);<span class=\"comment\">// 另一个参数是否公平标志</span></span><br><span class=\"line\">    ExecutorService cachedThreadPool = Executors.newCachedThreadPool();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; num; i++) &#123;</span><br><span class=\"line\">        cachedThreadPool.execute(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                semaphore.acquire(<span class=\"number\">1</span>);</span><br><span class=\"line\">                System.out.print(semaphore.availablePermits()+<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                semaphore.release(<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cachedThreadPool.shutdown();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出 1 1 0 0 0 0 0 0 0 0 1 0 0 0 0 会有多种结果</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"方法说明\"><a href=\"#方法说明\" class=\"headerlink\" title=\"方法说明\"></a>方法说明</h3><ul>\n<li>Semaphore(int permits):构造方法，创建具有给定许可数的计数信号量并设置为非公平信号量。</li>\n<li>Semaphore(int permits,boolean fair):构造方法，当fair等于true时，创建具有给定许可数的计数信号量并设置为公平信号量。</li>\n<li>void acquire():从此信号量获取一个许可前线程将一直阻塞。相当于一辆车占了一个车位。</li>\n<li>void acquire(int n):从此信号量获取给定数目许可，在提供这些许可前一直将线程阻塞。比如n=2，就相当于一辆车占了两个车位。</li>\n<li>void release():释放一个许可，将其返回给信号量。就如同车开走返回一个车位。</li>\n<li>void release(int n):释放n个许可。</li>\n<li>int availablePermits()：当前可用的许可数。</li>\n</ul>\n<h1 id=\"J-U-C-其他组件\"><a href=\"#J-U-C-其他组件\" class=\"headerlink\" title=\"J.U.C-其他组件\"></a>J.U.C-其他组件</h1><h2 id=\"FutureTask\"><a href=\"#FutureTask\" class=\"headerlink\" title=\"FutureTask\"></a>FutureTask</h2><h2 id=\"BlockingQueue\"><a href=\"#BlockingQueue\" class=\"headerlink\" title=\"BlockingQueue\"></a>BlockingQueue</h2><p><a href=\"https://www.cnblogs.com/WangHaiMing/p/8798709.html\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n<h3 id=\"1-概括\"><a href=\"#1-概括\" class=\"headerlink\" title=\"1.概括\"></a>1.概括</h3><p>java.util.concurrent.BlockingQueue 接口有以下阻塞队列的实现：<br><img src=\"https://note.youdao.com/yws/api/personal/file/3F24FAE079A54454AF90B3714A76A688?method=download&amp;shareKey=91221a58b8f2bfe3d860814c9a7677d6\" alt=\"BlockingQueue\"></p>\n<ul>\n<li>FIFO队列：LinkedBlockingQueue、ArrayBlockingQueue（固定长度）</li>\n<li>优先级队列：PriorityBlockingQueue</li>\n</ul>\n<p>提供了阻塞的 take() 和 put() 方法：如果队列为空 take() 将阻塞，直到队列中有内容；如果队列为满 put() 将阻塞，直到队列有空闲位置。</p>\n<h3 id=\"2-主要方法\"><a href=\"#2-主要方法\" class=\"headerlink\" title=\"2.主要方法\"></a>2.主要方法</h3><ul>\n<li>boolean add(E e); 增加一个元索，如果设置成功返回true, 否则返回false。</li>\n<li>boolean offer(E e); 添加一个元素，如果设置成功返回true, 否则返回false. e的值不能为空，否则抛出空指针异常。</li>\n<li>void put(E e);  添加一个元素，如果队列满，则<strong>阻塞</strong>。</li>\n<li>offer(E e, long timeout, TimeUnit unit); 在设定时间内添加一个元素并返回true，如果队列已满，则返回false</li>\n<li>E take(); 移除并返回队列头部的元素，如果队列为空，则<strong>阻塞</strong>。</li>\n<li>E poll(long timeout, TimeUnit unit);在给定的时间里，移除并返问队列头部的元6素，时间到了直接调用普通的poll方法，为null则直接返回null。</li>\n<li>int remainingCapacity(); 获取队列中剩余的空间。</li>\n<li>boolean remove(Object o); 从队列中移除指定的值。</li>\n<li>int drainTo(Collection&lt;? super E&gt; c); 将队列中值，全部移除，并发设置到给定的集合中。</li>\n<li>int drainTo(Collection&lt;? super E&gt; c, int maxElements);指定数量限制将队列中值，全部移除，并发设置到给定的集合中。</li>\n</ul>\n<h3 id=\"ArrayBlockingQueue\"><a href=\"#ArrayBlockingQueue\" class=\"headerlink\" title=\"ArrayBlockingQueue\"></a>ArrayBlockingQueue</h3><p>基于数组的阻塞队列实现，初始化必须指定大小。ArrayBlockingQueue在生产者放入数据和消费者获取数据，都是共用同一个锁对象，由此也意味着两者无法真正并行运行，这点尤其不同于LinkedBlockingQueue；在创建ArrayBlockingQueue时，可以控制对象的内部锁是否采用公平锁，默认采用非公平锁。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayBlockingQueue</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractQueue</span>&lt;<span class=\"title\">E</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"keyword\">implements</span> <span class=\"title\">BlockingQueue</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Object[] items;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> takeIndex;<span class=\"comment\">//队列尾部在数组的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> putIndex;<span class=\"comment\">//队列头部在数组的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> count;<span class=\"comment\">//队列元素长度</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> ReentrantLock lock;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Condition notEmpty;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Condition notFull;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayBlockingQueue</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity, <span class=\"keyword\">boolean</span> fair)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (capacity &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.items = <span class=\"keyword\">new</span> Object[capacity];</span><br><span class=\"line\">        lock = <span class=\"keyword\">new</span> ReentrantLock(fair);</span><br><span class=\"line\">        notEmpty = lock.newCondition();</span><br><span class=\"line\">        notFull =  lock.newCondition();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"LinkedBlockingQueue\"><a href=\"#LinkedBlockingQueue\" class=\"headerlink\" title=\"LinkedBlockingQueue\"></a>LinkedBlockingQueue</h3><p>基于链表实现的阻塞队列，如果构造一个LinkedBlockingQueue对象，而没有指定其容量大小，LinkedBlockingQueue会默认一个类似无限大小的容量（Integer.MAX_VALUE），这样的话，如果生产者的速度一旦大于消费者的速度，也许还没有等到队列满阻塞产生，系统内存就有可能已被消耗殆尽了。</p>\n<h3 id=\"DelayQueue\"><a href=\"#DelayQueue\" class=\"headerlink\" title=\"DelayQueue\"></a>DelayQueue</h3><p>DelayQueue中的元素只有当其指定的延迟时间到了，才能够从队列中获取到该元素。DelayQueue是一个没有大小限制的队列，因此往队列中插入数据的操作（生产者）永远不会被阻塞，而只有获取数据的操作（消费者）才会被阻塞。</p>\n<p>使用场景：</p>\n<ul>\n<li>缓存系统的设计：可以用DelayQueue保存缓存元素的有效期，使用一个线程循环查询DelayQueue，一旦能从DelayQueue中获取元素时，表示缓存有效期到了。</li>\n<li>定时任务调度：使用DelayQueue保存当天将会执行的任务和执行时间，一旦从DelayQueue中获取到任务就开始执行。（Timer就是使用DelayQueue实现的）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">transient</span> ReentrantLock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> PriorityQueue&lt;E&gt; q = <span class=\"keyword\">new</span> PriorityQueue&lt;E&gt;();</span><br><span class=\"line\"><span class=\"keyword\">private</span> Thread leader = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Condition available = lock.newCondition();</span><br></pre></td></tr></table></figure>\n<p>以支持优先级的PriorityQueue无界队列作为一个容器，因为元素都必须实现Delayed接口，可以根据元素的过期时间来对元素进行排列，因此，先过期的元素会在队首，每次从队列里取出来都是最先要过期的元素。（不这样排序无法保证最早过期的元素被获取）<br><strong>详细使用见代码BlockingQueueTest.java</strong></p>\n<h3 id=\"PriorityBlockingQueue\"><a href=\"#PriorityBlockingQueue\" class=\"headerlink\" title=\"PriorityBlockingQueue\"></a>PriorityBlockingQueue</h3><p>基于优先级的阻塞队列，默认自然排序，也可以自定义实现compareTo()方法来指定元素排序规则，不会阻塞数据生产者，只会在没有可消费的数据时，阻塞数据的消费者。注意当生产者的速度大于消费者时，可能会耗尽堆内存空间。</p>\n<h3 id=\"SynchronousQueue\"><a href=\"#SynchronousQueue\" class=\"headerlink\" title=\"SynchronousQueue\"></a>SynchronousQueue</h3><p> 一个不存储元素的阻塞队列，每一个put操作必须等待take操作，否则不能添加元素。支持公平锁和非公平锁。SynchronousQueue的一个使用场景是在线程池里。Executors.newCachedThreadPool()就使用了SynchronousQueue，这个线程池根据需要（新任务到来时）创建新的线程，如果有空闲线程则会重复使用，线程空闲了60秒后会被回收。</p>\n<h3 id=\"LinkedTransferQueue\"><a href=\"#LinkedTransferQueue\" class=\"headerlink\" title=\"LinkedTransferQueue\"></a>LinkedTransferQueue</h3><p>一个由链表结构组成的无界阻塞队列，相当于其它队列，LinkedTransferQueue队列多了transfer和tryTransfer方法。</p>\n<h3 id=\"LinkedBlockingDeque\"><a href=\"#LinkedBlockingDeque\" class=\"headerlink\" title=\"LinkedBlockingDeque\"></a>LinkedBlockingDeque</h3><p>一个由链表结构组成的双向阻塞队列。队列头部和尾部都可以添加和移除元素，多线程并发时，可以将锁的竞争最多降到一半。</p>\n<h2 id=\"ForkJoin\"><a href=\"#ForkJoin\" class=\"headerlink\" title=\"ForkJoin\"></a>ForkJoin</h2><p>是Java7提供的原生多线程并行处理框架，其基本思想是将大任务分割成小任务，最后将小任务聚合起来得到结果。使用工作窃取（work-stealing）算法，主要用于实现“分而治之”。它非常类似于HADOOP提供的MapReduce框架，只是MapReduce的任务可以针对集群内的所有计算节点，可以充分利用集群的能力完成计算任务。ForkJoin更加类似于单机版的MapReduce。</p>\n<ul>\n<li>ForkJoinTask:要使用ForkJoin框架，必须首先创建一个ForkJoin任务。它提供在任务中执行fork()和join的操作机制，通常不直接继承ForkjoinTask类，只需要直接继承其子类。<ul>\n<li>RecursiveAction: 用于没有返回值的任务</li>\n<li>RecursiveTask: 用于有返回值的任务</li>\n</ul>\n</li>\n<li>ForkJoinPool：task要通过ForkJoinPool来执行，分割的子任务也会添加到当前工作线程的双端队列中，进入队列的头部。当一个工作线程中没有任务时，会从其他工作线程的队列尾部获取一个任务。线程数量取决于 CPU 核数。</li>\n</ul>\n<h3 id=\"工作窃取（work-stealing）算法\"><a href=\"#工作窃取（work-stealing）算法\" class=\"headerlink\" title=\"工作窃取（work-stealing）算法\"></a>工作窃取（work-stealing）算法</h3><p>ForkJoinPool 实现了工作窃取算法来提高 CPU 的利用率。每个线程都维护了一个双端队列，用来存储需要执行的任务。工作窃取算法允许空闲的线程从其它线程的双端队列中窃取一个任务来执行。窃取的任务必须是最晚的任务，避免和队列所属线程发生竞争。</p>\n<h3 id=\"使用ForkJoin\"><a href=\"#使用ForkJoin\" class=\"headerlink\" title=\"使用ForkJoin\"></a>使用ForkJoin</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyRecursiveTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecursiveTask</span>&lt;<span class=\"title\">Long</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> threshold = <span class=\"number\">10000</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long start;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long end;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Long <span class=\"title\">compute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Long length = end - start;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(length &lt; threshold)&#123;</span><br><span class=\"line\">            Long sum = <span class=\"number\">0L</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Long i = start;i&lt;=end;i++)&#123;</span><br><span class=\"line\">                sum += i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Long middle = (end + start)/<span class=\"number\">2</span>;<span class=\"comment\">//计算的两个值的中间值</span></span><br><span class=\"line\">            MyRecursiveTask startTask = <span class=\"keyword\">new</span> MyRecursiveTask(start,middle);</span><br><span class=\"line\">            MyRecursiveTask endTask = <span class=\"keyword\">new</span> MyRecursiveTask(middle+<span class=\"number\">1</span>,end);</span><br><span class=\"line\">            startTask.fork();</span><br><span class=\"line\">            endTask.fork();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> startTask.join()+endTask.join();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyRecursiveTask</span><span class=\"params\">(Long start, Long end)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.start = start;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.end = end;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Long start = System.currentTimeMillis();</span><br><span class=\"line\">    MyRecursiveTask myRecursiveTask = <span class=\"keyword\">new</span> MyRecursiveTask(<span class=\"number\">0L</span>,<span class=\"number\">100000000L</span>);</span><br><span class=\"line\">    ForkJoinPool forkJoinPool = <span class=\"keyword\">new</span> ForkJoinPool();</span><br><span class=\"line\">    ForkJoinTask&lt;Long&gt; submit = forkJoinPool.submit(myRecursiveTask);</span><br><span class=\"line\">    <span class=\"comment\">//Long invoke = forkJoinPool.invoke(myRecursiveTask);</span></span><br><span class=\"line\">    Long aLong = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        aLong = submit.get();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Long end = System.currentTimeMillis();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"test1 = \"</span> + aLong+<span class=\"string\">\"  time: \"</span> + (end - start));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意：<br>ForkJoinPool 使用submit 或 invoke 提交的区别：invoke是同步执行，调用之后需要等待任务完成，才能执行后面的代码；submit是异步执行，只有在Future调用get的时候会阻塞。</p>\n<h1 id=\"十、Java内存模型\"><a href=\"#十、Java内存模型\" class=\"headerlink\" title=\"十、Java内存模型\"></a>十、Java内存模型</h1><p>Java 内存模型试图屏蔽各种硬件和操作系统的内存访问差异，以实现让 Java 程序在各种平台下都能达到一致的内存访问效果。</p>\n<h2 id=\"主内存与工作内存\"><a href=\"#主内存与工作内存\" class=\"headerlink\" title=\"主内存与工作内存\"></a>主内存与工作内存</h2><p>处理器上的寄存器的读写的速度比内存快几个数量级，为了解决这种速度矛盾，在它们之间加入了高速缓存。<br><img src=\"https://note.youdao.com/yws/api/personal/file/338143C994F2409484C0946B9DD30A86?method=download&amp;shareKey=780561d289ee566ee714f4482a8e8262\" alt=\"内存模型\"><br>所有的变量都存储在主内存中，每个线程还有自己的工作内存，工作内存存储在高速缓存或者寄存器中，保存了该线程使用的变量的主内存副本拷贝。</p>\n<p>线程只能直接操作工作内存中的变量，不同线程之间的变量值传递需要通过主内存来完成。</p>\n<p>缓存一致性问题：多个缓存共享同一块主内存区域，那么多个缓存的数据可能会不一致。</p>\n<h2 id=\"内存间的交互操作\"><a href=\"#内存间的交互操作\" class=\"headerlink\" title=\"内存间的交互操作\"></a>内存间的交互操作</h2><p>Java内存模型定义了8个操作完成主内存和工作内存的交互。<br><img src=\"https://note.youdao.com/yws/api/personal/file/713E11ECE9D846679A34EDFA897A5448?method=download&amp;shareKey=a3be21c07378a44e1d967d55c1554f1e\" alt=\"内存间的交互操作\"></p>\n<ul>\n<li>read：把一个变量值从主内存传输到工作内存中。</li>\n<li>load：在read之后执行，把read获取的值放到工作内存变量副本中。</li>\n<li>use：把工作内存中一个变量的值传递给执行引擎。</li>\n<li>assign：把一个从执行引擎接收到的值赋给工作内存的变量。</li>\n<li>store：把工作内存的值传送到主内存中。</li>\n<li>write：在store之后，把store得到的值放入主内存变量中。</li>\n<li>lock：作用于主内存的变量</li>\n<li>unlock</li>\n</ul>\n<h2 id=\"内存模型三大特性\"><a href=\"#内存模型三大特性\" class=\"headerlink\" title=\"内存模型三大特性\"></a>内存模型三大特性</h2><h3 id=\"1-原子性\"><a href=\"#1-原子性\" class=\"headerlink\" title=\"1.原子性\"></a>1.原子性</h3><p>Java 内存模型保证了 read、load、use、assign、store、write、lock 和 unlock 单独操作具有原子性。但没有被 volatile 修饰的变量load、store、read 和 write 操作可以不具备原子性。<br>解决方法：<br>1.使用原子类，如AtomicInteger<br>2.使用 synchronized 互斥锁来保证操作的原子性<br>3.使用lock 和 unlock</p>\n<h3 id=\"2-可见性\"><a href=\"#2-可见性\" class=\"headerlink\" title=\"2.可见性\"></a>2.可见性</h3><p>可见性是指当一个线程修改了变量值时，其他线程能够立即得知这个修改。Java 内存模型是通过在变量修改后将新值同步回主内存，在变量读取前从主内存刷新变量值来实现可见性的。</p>\n<p>主要有三种实现可见性的方式：</p>\n<ul>\n<li>volatile（不能保证原子性）</li>\n<li>synchronized，对一个变量执行 unlock 操作之前，必须把变量值同步回主内存。</li>\n<li>final，被 final 关键字修饰的字段在构造器中一旦初始化完成，并且没有发生 this 逃逸（其它线程通过 this 引用访问到初始化了一半的对象），那么其它线程就能看见 final 字段的值。</li>\n</ul>\n<h3 id=\"3-有序性\"><a href=\"#3-有序性\" class=\"headerlink\" title=\"3.有序性\"></a>3.有序性</h3><p>有序性是指：在本线程内观察，所有操作都是有序的。在一个线程观察另一个线程，所有操作都是无序的，无序是因为发生了指令重排序。在 Java 内存模型中，允许编译器和处理器对指令进行重排序，重排序过程不会影响到单线程程序的执行，却会影响到多线程并发执行的正确性。</p>\n<p>volatile 关键字通过添加内存屏障的方式来禁止指令重排，即重排序时不能把后面的指令放到内存屏障之前。</p>\n<p>也可以通过 synchronized 来保证有序性，它保证每个时刻只有一个线程执行同步代码，相当于是让线程顺序执行同步代码。</p>\n<h2 id=\"先行发生原则\"><a href=\"#先行发生原则\" class=\"headerlink\" title=\"先行发生原则\"></a>先行发生原则</h2><p>JVM规定的先行发生原则，让一个操作无需控制就可以先于另一个操作发生。</p>\n<ul>\n<li>单一线程原则(Single Thread rule)：在一个线程内，在程序前面的操作先行发生于后面的操作。</li>\n<li>管程锁定规则(Monitor Lock Rule)：一个 unlock 操作先行发生于后面对同一个锁的 lock 操作。</li>\n<li>volatile变量规则(Volatile Variable Rule)：对一个 volatile 变量的写操作先行发生于后面对这个变量的读操作。</li>\n<li>线程启动规则(Thread Start Rule)：Thread 对象的 start() 方法调用先行发生于此线程的每一个动作。</li>\n<li>线程加入规则(Thread Join Rule)：Thread 对象的结束先行发生于 join() 方法返回。</li>\n<li>线程中断规则(Thread Interruption Rule)：对线程 interrupt() 方法的调用先行发生于被中断线程的代码检测到中断事件的发生，可以通过 interrupted() 方法检测到是否有中断发生。</li>\n<li>对象终结规则()：一个对象的初始化完成（构造函数执行结束）先行发生于它的 finalize(Finalizer Rule)： 方法的开始。</li>\n<li>传递性(Transitivity)：如果操作 A 先行发生于操作 B，操作 B 先行发生于操作 C，那么操作 A 先行发生于操作 C。</li>\n</ul>\n<h1 id=\"十一、线程安全\"><a href=\"#十一、线程安全\" class=\"headerlink\" title=\"十一、线程安全\"></a>十一、线程安全</h1><p>多个线程不管以何种方式访问某个类，并且在主调代码中不需要进行同步，都能表现正确的行为。</p>\n<h2 id=\"不可变\"><a href=\"#不可变\" class=\"headerlink\" title=\"不可变\"></a>不可变</h2><p>不可变（Immutable）的对象一定是线程安全的，不需要再采取任何的线程安全保障措施。<br>不可变类型：</p>\n<ul>\n<li>final 关键字修饰的基本数据类型</li>\n<li>String</li>\n<li>枚举类型</li>\n<li>Number 部分子类，如 Long 和 Double 等数值包装类型，BigInteger 和 BigDecimal 等大数据类型。但同为 Number 的原子类 AtomicInteger 和 AtomicLong 则是可变的。</li>\n<li>对于集合类型，可以使用 Collections.unmodifiableXXX() 方法来获取一个不可变的集合。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">Map&lt;String, Integer&gt; unmodifiableMap = Collections.unmodifiableMap(map);</span><br><span class=\"line\">unmodifiableMap.put(<span class=\"string\">\"a\"</span>, <span class=\"number\">1</span>);<span class=\"comment\">//会抛出异常java.lang.UnsupportedOperationException</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"互斥同步\"><a href=\"#互斥同步\" class=\"headerlink\" title=\"互斥同步\"></a>互斥同步</h2><p>synchronized和ReentrantLock</p>\n<h2 id=\"非阻塞同步\"><a href=\"#非阻塞同步\" class=\"headerlink\" title=\"非阻塞同步\"></a>非阻塞同步</h2><p>互斥同步属于阻塞同步，线程阻塞和唤醒会带来性能问题。</p>\n<h3 id=\"1-CAS\"><a href=\"#1-CAS\" class=\"headerlink\" title=\"1.CAS\"></a>1.CAS</h3><p>硬件支持的原子性操作最典型的是：比较并交换（Compare-and-Swap，CAS）。</p>\n<h3 id=\"2-AtomicInteger\"><a href=\"#2-AtomicInteger\" class=\"headerlink\" title=\"2.AtomicInteger\"></a>2.AtomicInteger</h3><p>J.U.C 包里面的整数原子类 AtomicInteger 的方法调用了 Unsafe 类的 CAS 操作。</p>\n<h3 id=\"3-ABA问题\"><a href=\"#3-ABA问题\" class=\"headerlink\" title=\"3.ABA问题\"></a>3.ABA问题</h3><p>J.U.C 包提供了一个带有标记的原子引用类 AtomicStampedReference 来解决这个问题，它可以通过控制变量值的版本来保证 CAS 的正确性。大部分情况下 ABA 问题不会影响程序并发的正确性，如果需要解决 ABA 问题，改用传统的互斥同步可能会比原子类更高效。</p>\n<h2 id=\"无同步方案\"><a href=\"#无同步方案\" class=\"headerlink\" title=\"无同步方案\"></a>无同步方案</h2><p>要保证线程安全，并不是一定就要进行同步。如果一个方法本来就不涉及共享数据，那它自然就无须任何同步措施去保证正确性。</p>\n<h3 id=\"1-栈封闭\"><a href=\"#1-栈封闭\" class=\"headerlink\" title=\"1.栈封闭\"></a>1.栈封闭</h3><p>多个线程访问同一个方法的局部变量时，不会出现线程安全问题</p>\n<h3 id=\"2-线程本地存储（Thread-Local-Storage）\"><a href=\"#2-线程本地存储（Thread-Local-Storage）\" class=\"headerlink\" title=\"2.线程本地存储（Thread Local Storage）\"></a>2.线程本地存储（Thread Local Storage）</h3><p>使用 java.lang.ThreadLocal 类来实现线程本地存储功能<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ThreadLocal threadLocal = <span class=\"keyword\">new</span> ThreadLocal();</span><br><span class=\"line\">Thread thread1 = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">    threadLocal.set(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(threadLocal.get());</span><br><span class=\"line\">    threadLocal.remove();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">Thread thread2 = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">    threadLocal.set(<span class=\"number\">2</span>);</span><br><span class=\"line\">    threadLocal.remove();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">thread1.start();</span><br><span class=\"line\">thread2.start();</span><br><span class=\"line\"><span class=\"comment\">//输出 1</span></span><br></pre></td></tr></table></figure></p>\n<p>每个 Thread 都有一个 ThreadLocal.ThreadLocalMap 对象。当调用一个 ThreadLocal 的 set(T value) 方法时，先得到当前线程的 ThreadLocalMap 对象，然后将 ThreadLocal-&gt;value 键值对插入到该 Map 中。<br>ThreadLockl的set方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">    Thread t = Thread.currentThread();</span><br><span class=\"line\">    ThreadLocalMap map = getMap(t);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (map != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        map.set(<span class=\"keyword\">this</span>, value);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        createMap(t, value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>get()方法类似<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Thread t = Thread.currentThread();</span><br><span class=\"line\">    ThreadLocalMap map = getMap(t);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (map != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        ThreadLocalMap.Entry e = map.getEntry(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">            T result = (T)e.value;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> setInitialValue();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-可重入代码-Reentry-code\"><a href=\"#3-可重入代码-Reentry-code\" class=\"headerlink\" title=\"3.可重入代码(Reentry code)\"></a>3.可重入代码(Reentry code)</h3><p>可重入代码(Reentry code)也叫纯代码(Pure code)是一种允许多个进程同时访问的代码。为了使各进程所执行的代码完全相同，故不允许任何进程对其进行修改。程序在运行过程中可以被打断，并由开始处再次执行，并且在合理的范围内（多次重入，而不造成堆栈溢出等其他问题），程序可以在被打断处继续执行，且执行结果不受影响。</p>\n<h1 id=\"十二、锁优化\"><a href=\"#十二、锁优化\" class=\"headerlink\" title=\"十二、锁优化\"></a>十二、锁优化</h1><p>这里的锁优化主要是指 JVM 对 synchronized 的优化。</p>\n<h2 id=\"自旋锁\"><a href=\"#自旋锁\" class=\"headerlink\" title=\"自旋锁\"></a>自旋锁</h2><p>自旋锁的思想是让一个线程在请求一个共享数据的锁时执行忙循环（自旋）一段时间，如果在这段时间内能获得锁，就可以避免进入阻塞状态。在 JDK 1.6 中引入了自适应的自旋锁。自适应意味着自旋的次数不再固定了，而是由前一次在同一个锁上的自旋次数及锁的拥有者的状态来决定。</p>\n<h2 id=\"锁消除\"><a href=\"#锁消除\" class=\"headerlink\" title=\"锁消除\"></a>锁消除</h2><p>锁消除是指对于被检测出不可能存在竞争的共享数据的锁进行消除。</p>\n<h2 id=\"锁粗化\"><a href=\"#锁粗化\" class=\"headerlink\" title=\"锁粗化\"></a>锁粗化</h2><p>如果虚拟机探测到由有一串零碎的操作都对同一个对象加锁，将会把加锁的范围扩展（粗化）到整个操作序列的外部。</p>\n<h2 id=\"轻量级锁\"><a href=\"#轻量级锁\" class=\"headerlink\" title=\"轻量级锁\"></a>轻量级锁</h2><p>JDK 1.6 引入了偏向锁和轻量级锁，从而让锁拥有了四个状态：无锁状态（unlocked）、偏向锁状态（biasble）、轻量级锁状态（lightweight locked）和重量级锁状态（inflated）。</p>\n<h2 id=\"偏向锁\"><a href=\"#偏向锁\" class=\"headerlink\" title=\"偏向锁\"></a>偏向锁</h2><p>偏向锁的思想是偏向于让第一个获取锁对象的线程，这个线程在之后获取该锁就不再需要进行同步操作，甚至连 CAS 操作也不再需要。</p>\n<h1 id=\"十三、多线程开发良好的实践\"><a href=\"#十三、多线程开发良好的实践\" class=\"headerlink\" title=\"十三、多线程开发良好的实践\"></a>十三、多线程开发良好的实践</h1><ul>\n<li><p>给线程起个有意义的名字，这样可以方便找 Bug。<br>缩小同步范围，从而减少锁争用。例如对于 synchronized，应该尽量使用同步块而不是同步方法。</p>\n</li>\n<li><p>多用同步工具少用 wait() 和 notify()。首先，CountDownLatch, CyclicBarrier, Semaphore 和 Exchanger 这些同步类简化了编码操作，而用 wait() 和 notify() 很难实现复杂控制流；其次，这些同步类是由最好的企业编写和维护，在后续的 JDK 中还会不断优化和完善。</p>\n</li>\n<li><p>使用 BlockingQueue 实现生产者消费者问题。<br>多用并发集合少用同步集合，例如应该使用 ConcurrentHashMap 而不是 Hashtable。</p>\n</li>\n<li><p>使用本地变量和不可变类来保证线程安全。</p>\n</li>\n<li><p>使用线程池而不是直接创建线程，这是因为创建线程代价很高，线程池可以有效地利用有限的线程来启动任务。</p>\n</li>\n</ul>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"https://github.com/CyC2018/CS-Notes/blob/master/docs/notes/Java%20%E5%B9%B6%E5%8F%91.md\" target=\"_blank\" rel=\"noopener\">Java并发</a></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjuc90mc70002v4uo0fnl6fna","category_id":"cjuc90mcj0005v4uohom5esdg","_id":"cjuc90mcq0008v4uodc9v2esm"}],"PostTag":[{"post_id":"cjuc90mc70002v4uo0fnl6fna","tag_id":"cjuc90mcn0006v4uo0pb3czr3","_id":"cjuc90mcr0009v4uo2pfkcum0"},{"post_id":"cjuc90mc70002v4uo0fnl6fna","tag_id":"cjuc90mco0007v4uogpb6jiu8","_id":"cjuc90mcs000av4uolhprfd1w"}],"Tag":[{"name":"java","_id":"cjuc90mcn0006v4uo0pb3czr3"},{"name":"并发","_id":"cjuc90mco0007v4uogpb6jiu8"}]}}